ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"cyPm.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.CySysPmSleep,"ax",%progbits
  20              		.align	2
  21              		.global	CySysPmSleep
  22              		.code	16
  23              		.thumb_func
  24              		.type	CySysPmSleep, %function
  25              	CySysPmSleep:
  26              	.LFB0:
  27              		.file 1 "Generated_Source\\PSoC4\\cyPm.c"
   1:Generated_Source\PSoC4/cyPm.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/cyPm.c **** * \file cyPm.c
   3:Generated_Source\PSoC4/cyPm.c **** * \version 5.60
   4:Generated_Source\PSoC4/cyPm.c **** *
   5:Generated_Source\PSoC4/cyPm.c **** * \brief Provides an API for the power management.
   6:Generated_Source\PSoC4/cyPm.c **** *
   7:Generated_Source\PSoC4/cyPm.c **** * \note Documentation of the API's in this file is located in the System
   8:Generated_Source\PSoC4/cyPm.c **** * Reference Guide provided with PSoC Creator.
   9:Generated_Source\PSoC4/cyPm.c **** *
  10:Generated_Source\PSoC4/cyPm.c **** ********************************************************************************
  11:Generated_Source\PSoC4/cyPm.c **** * \copyright
  12:Generated_Source\PSoC4/cyPm.c **** * Copyright 2011-2017, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/cyPm.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/cyPm.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/cyPm.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/cyPm.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/cyPm.c **** 
  18:Generated_Source\PSoC4/cyPm.c **** #include "cyPm.h"
  19:Generated_Source\PSoC4/cyPm.c **** #include "CyLib.h"
  20:Generated_Source\PSoC4/cyPm.c **** 
  21:Generated_Source\PSoC4/cyPm.c **** 
  22:Generated_Source\PSoC4/cyPm.c **** /*******************************************************************************
  23:Generated_Source\PSoC4/cyPm.c **** * Function Name: CySysPmSleep
  24:Generated_Source\PSoC4/cyPm.c **** ****************************************************************************//**
  25:Generated_Source\PSoC4/cyPm.c **** *
  26:Generated_Source\PSoC4/cyPm.c **** * Puts the part into the Sleep state. This is a CPU-centric power mode.
  27:Generated_Source\PSoC4/cyPm.c **** * It means that the CPU has indicated that it is in the sleep mode and
  28:Generated_Source\PSoC4/cyPm.c **** * its main clock can be removed. It is identical to Active from a peripheral
  29:Generated_Source\PSoC4/cyPm.c **** * point of view. Any enabled interrupts can cause wakeup from the Sleep mode.
  30:Generated_Source\PSoC4/cyPm.c **** *
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 2


  31:Generated_Source\PSoC4/cyPm.c **** *******************************************************************************/
  32:Generated_Source\PSoC4/cyPm.c **** void CySysPmSleep(void)
  33:Generated_Source\PSoC4/cyPm.c **** {
  28              		.loc 1 33 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  34:Generated_Source\PSoC4/cyPm.c ****     uint8 interruptState;
  35:Generated_Source\PSoC4/cyPm.c **** 
  36:Generated_Source\PSoC4/cyPm.c ****     interruptState = CyEnterCriticalSection();
  36              		.loc 1 36 0
  37 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  38              	.LVL0:
  37:Generated_Source\PSoC4/cyPm.c **** 
  38:Generated_Source\PSoC4/cyPm.c ****     /* CPU enters Sleep mode upon execution of WFI */
  39:Generated_Source\PSoC4/cyPm.c ****     CY_PM_CPU_SCR_REG &= (uint32) (~CY_PM_CPU_SCR_SLEEPDEEP);
  39              		.loc 1 39 0
  40 0006 0421     		movs	r1, #4
  41 0008 034A     		ldr	r2, .L2
  42 000a 1368     		ldr	r3, [r2]
  43 000c 8B43     		bics	r3, r1
  44 000e 1360     		str	r3, [r2]
  40:Generated_Source\PSoC4/cyPm.c **** 
  41:Generated_Source\PSoC4/cyPm.c ****     /* Sleep and wait for interrupt */
  42:Generated_Source\PSoC4/cyPm.c ****     CY_PM_WFI;
  45              		.loc 1 42 0
  46              		.syntax divided
  47              	@ 42 "Generated_Source\PSoC4\cyPm.c" 1
  48 0010 30BF     		WFI 
  49              	
  50              	@ 0 "" 2
  43:Generated_Source\PSoC4/cyPm.c **** 
  44:Generated_Source\PSoC4/cyPm.c ****     CyExitCriticalSection(interruptState);
  51              		.loc 1 44 0
  52              		.thumb
  53              		.syntax unified
  54 0012 FFF7FEFF 		bl	CyExitCriticalSection
  55              	.LVL1:
  45:Generated_Source\PSoC4/cyPm.c **** }
  56              		.loc 1 45 0
  57              		@ sp needed
  58 0016 10BD     		pop	{r4, pc}
  59              	.L3:
  60              		.align	2
  61              	.L2:
  62 0018 10ED00E0 		.word	-536810224
  63              		.cfi_endproc
  64              	.LFE0:
  65              		.size	CySysPmSleep, .-CySysPmSleep
  66              		.section	.text.CySysPmDeepSleep,"ax",%progbits
  67              		.align	2
  68              		.global	CySysPmDeepSleep
  69              		.code	16
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 3


  70              		.thumb_func
  71              		.type	CySysPmDeepSleep, %function
  72              	CySysPmDeepSleep:
  73              	.LFB1:
  46:Generated_Source\PSoC4/cyPm.c **** 
  47:Generated_Source\PSoC4/cyPm.c **** 
  48:Generated_Source\PSoC4/cyPm.c **** /*******************************************************************************
  49:Generated_Source\PSoC4/cyPm.c **** * Function Name: CySysPmDeepSleep
  50:Generated_Source\PSoC4/cyPm.c **** ****************************************************************************//**
  51:Generated_Source\PSoC4/cyPm.c **** *
  52:Generated_Source\PSoC4/cyPm.c **** * Puts the part into the Deep Sleep state. If the firmware attempts to enter
  53:Generated_Source\PSoC4/cyPm.c **** * this mode before the system is ready (that is, when
  54:Generated_Source\PSoC4/cyPm.c **** * PWR_CONTROL.LPM_READY = 0), then the device will go into the Sleep mode
  55:Generated_Source\PSoC4/cyPm.c **** * instead and automatically enter the originally intended mode when the
  56:Generated_Source\PSoC4/cyPm.c **** * holdoff expires.
  57:Generated_Source\PSoC4/cyPm.c **** *
  58:Generated_Source\PSoC4/cyPm.c **** * The wakeup occurs when an interrupt is received from a DeepSleep or
  59:Generated_Source\PSoC4/cyPm.c **** * Hibernate peripheral. For more details, see a corresponding
  60:Generated_Source\PSoC4/cyPm.c **** * peripheral's datasheet.
  61:Generated_Source\PSoC4/cyPm.c **** *
  62:Generated_Source\PSoC4/cyPm.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/cyPm.c **** void CySysPmDeepSleep(void)
  64:Generated_Source\PSoC4/cyPm.c **** {
  74              		.loc 1 64 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78 0000 10B5     		push	{r4, lr}
  79              		.cfi_def_cfa_offset 8
  80              		.cfi_offset 4, -8
  81              		.cfi_offset 14, -4
  65:Generated_Source\PSoC4/cyPm.c ****     uint8 interruptState;
  66:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  67:Generated_Source\PSoC4/cyPm.c ****         volatile uint32 clkSelectReg;
  68:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
  69:Generated_Source\PSoC4/cyPm.c **** 
  70:Generated_Source\PSoC4/cyPm.c ****     interruptState = CyEnterCriticalSection();
  82              		.loc 1 70 0
  83 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  84              	.LVL2:
  71:Generated_Source\PSoC4/cyPm.c **** 
  72:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  73:Generated_Source\PSoC4/cyPm.c ****         /* Device enters DeepSleep mode when CPU asserts SLEEPDEEP signal */
  74:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_CONTROL_REG &= (uint32) (~CY_PM_PWR_CONTROL_HIBERNATE);
  75:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
  76:Generated_Source\PSoC4/cyPm.c **** 
  77:Generated_Source\PSoC4/cyPm.c ****     #if (CY_IP_CPUSS && CY_IP_SRSSV2)
  78:Generated_Source\PSoC4/cyPm.c ****         CY_PM_CPUSS_CONFIG_REG |= CY_PM_CPUSS_CONFIG_FLSH_ACC_BYPASS;
  79:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_CPUSS && CY_IP_SRSSV2) */
  80:Generated_Source\PSoC4/cyPm.c **** 
  81:Generated_Source\PSoC4/cyPm.c ****     /* Adjust delay to wait for references to settle on wakeup from Deep Sleep */
  82:Generated_Source\PSoC4/cyPm.c ****     CY_PM_PWR_KEY_DELAY_REG = CY_SFLASH_DPSLP_KEY_DELAY_REG;
  85              		.loc 1 82 0
  86 0006 074B     		ldr	r3, .L5
  87 0008 074A     		ldr	r2, .L5+4
  88 000a 1B88     		ldrh	r3, [r3]
  89 000c 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 4


  90 000e 1360     		str	r3, [r2]
  83:Generated_Source\PSoC4/cyPm.c **** 
  84:Generated_Source\PSoC4/cyPm.c ****     /* CPU enters DeepSleep/Hibernate mode upon execution of WFI */
  85:Generated_Source\PSoC4/cyPm.c ****     CY_PM_CPU_SCR_REG |= CY_PM_CPU_SCR_SLEEPDEEP;
  91              		.loc 1 85 0
  92 0010 0423     		movs	r3, #4
  93 0012 064A     		ldr	r2, .L5+8
  94 0014 1168     		ldr	r1, [r2]
  95 0016 0B43     		orrs	r3, r1
  96 0018 1360     		str	r3, [r2]
  86:Generated_Source\PSoC4/cyPm.c **** 
  87:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  88:Generated_Source\PSoC4/cyPm.c ****         /* Preserve system clock configuration and
  89:Generated_Source\PSoC4/cyPm.c ****         * reduce sysclk to <=12 MHz (Cypress ID #158710, #179888).
  90:Generated_Source\PSoC4/cyPm.c ****         */
  91:Generated_Source\PSoC4/cyPm.c ****         clkSelectReg = CY_SYS_CLK_SELECT_REG;
  92:Generated_Source\PSoC4/cyPm.c ****         CySysClkWriteSysclkDiv(CY_SYS_CLK_SYSCLK_DIV4);
  93:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
  94:Generated_Source\PSoC4/cyPm.c **** 
  95:Generated_Source\PSoC4/cyPm.c ****     /* Sleep and wait for interrupt */
  96:Generated_Source\PSoC4/cyPm.c ****     CY_PM_WFI;
  97              		.loc 1 96 0
  98              		.syntax divided
  99              	@ 96 "Generated_Source\PSoC4\cyPm.c" 1
 100 001a 30BF     		WFI 
 101              	
 102              	@ 0 "" 2
  97:Generated_Source\PSoC4/cyPm.c **** 
  98:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  99:Generated_Source\PSoC4/cyPm.c ****         /* Restore system clock configuration */
 100:Generated_Source\PSoC4/cyPm.c ****         CY_SYS_CLK_SELECT_REG = clkSelectReg;
 101:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
 102:Generated_Source\PSoC4/cyPm.c **** 
 103:Generated_Source\PSoC4/cyPm.c ****     #if (CY_IP_CPUSS && CY_IP_SRSSV2)
 104:Generated_Source\PSoC4/cyPm.c ****         CY_PM_CPUSS_CONFIG_REG &= (uint32) (~CY_PM_CPUSS_CONFIG_FLSH_ACC_BYPASS);
 105:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_CPUSS && CY_IP_SRSSV2) */
 106:Generated_Source\PSoC4/cyPm.c **** 
 107:Generated_Source\PSoC4/cyPm.c ****     CyExitCriticalSection(interruptState);
 103              		.loc 1 107 0
 104              		.thumb
 105              		.syntax unified
 106 001c FFF7FEFF 		bl	CyExitCriticalSection
 107              	.LVL3:
 108:Generated_Source\PSoC4/cyPm.c **** }
 108              		.loc 1 108 0
 109              		@ sp needed
 110 0020 10BD     		pop	{r4, pc}
 111              	.L6:
 112 0022 C046     		.align	2
 113              	.L5:
 114 0024 52F1FF0F 		.word	268431698
 115 0028 04000340 		.word	1073938436
 116 002c 10ED00E0 		.word	-536810224
 117              		.cfi_endproc
 118              	.LFE1:
 119              		.size	CySysPmDeepSleep, .-CySysPmDeepSleep
 120              		.section	.text.CySysPmSetWakeupHoldoff,"ax",%progbits
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 5


 121              		.align	2
 122              		.global	CySysPmSetWakeupHoldoff
 123              		.code	16
 124              		.thumb_func
 125              		.type	CySysPmSetWakeupHoldoff, %function
 126              	CySysPmSetWakeupHoldoff:
 127              	.LFB2:
 109:Generated_Source\PSoC4/cyPm.c **** 
 110:Generated_Source\PSoC4/cyPm.c **** 
 111:Generated_Source\PSoC4/cyPm.c **** #if(CY_IP_SRSSV2)
 112:Generated_Source\PSoC4/cyPm.c **** 
 113:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 114:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmHibernate
 115:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 116:Generated_Source\PSoC4/cyPm.c ****     *
 117:Generated_Source\PSoC4/cyPm.c ****     * Puts the part into the Hibernate state. Only SRAM and UDBs are retained;
 118:Generated_Source\PSoC4/cyPm.c ****     * most internal supplies are off. Wakeup is possible from a pin or a hibernate
 119:Generated_Source\PSoC4/cyPm.c ****     * comparator only.
 120:Generated_Source\PSoC4/cyPm.c ****     *
 121:Generated_Source\PSoC4/cyPm.c ****     * It is expected that the firmware has already frozen the IO-Cells using
 122:Generated_Source\PSoC4/cyPm.c ****     * CySysPmFreezeIo() function before the call to this function. If this is
 123:Generated_Source\PSoC4/cyPm.c ****     * omitted, the IO-cells will be frozen in the same way as they are
 124:Generated_Source\PSoC4/cyPm.c ****     * in the Active to Deep Sleep transition, but will lose their state on wake up
 125:Generated_Source\PSoC4/cyPm.c ****     * (because of the reset occurring at that time).
 126:Generated_Source\PSoC4/cyPm.c ****     *
 127:Generated_Source\PSoC4/cyPm.c ****     * Because all the CPU state is lost, the CPU will start up at the reset vector.
 128:Generated_Source\PSoC4/cyPm.c ****     * To save the firmware state through the Hibernate low power mode, a
 129:Generated_Source\PSoC4/cyPm.c ****     * corresponding variable should be defined with CY_NOINIT attribute. It
 130:Generated_Source\PSoC4/cyPm.c ****     * prevents data from being initialized to zero on startup. The interrupt
 131:Generated_Source\PSoC4/cyPm.c ****     * cause of the hibernate peripheral is retained, such that it can be either
 132:Generated_Source\PSoC4/cyPm.c ****     * read by the firmware or cause an interrupt after the firmware has booted and
 133:Generated_Source\PSoC4/cyPm.c ****     * enabled the corresponding interrupt. To distinguish the wakeup from
 134:Generated_Source\PSoC4/cyPm.c ****     * the Hibernate mode and the general Reset event, the
 135:Generated_Source\PSoC4/cyPm.c ****     * \ref CySysPmGetResetReason() function could be used.
 136:Generated_Source\PSoC4/cyPm.c ****     *
 137:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 138:Generated_Source\PSoC4/cyPm.c ****     void CySysPmHibernate(void)
 139:Generated_Source\PSoC4/cyPm.c ****     {
 140:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 141:Generated_Source\PSoC4/cyPm.c **** 
 142:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 143:Generated_Source\PSoC4/cyPm.c **** 
 144:Generated_Source\PSoC4/cyPm.c ****         #if (CY_IP_HOBTO_DEVICE)
 145:Generated_Source\PSoC4/cyPm.c ****             /* Disable input buffers for all ports */
 146:Generated_Source\PSoC4/cyPm.c ****             CySysPmHibPinsDisableInputBuf();
 147:Generated_Source\PSoC4/cyPm.c ****         #endif /* (CY_IP_HOBTO_DEVICE) */
 148:Generated_Source\PSoC4/cyPm.c **** 
 149:Generated_Source\PSoC4/cyPm.c ****         /* Device enters Hibernate mode when CPU asserts SLEEPDEEP signal */
 150:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_CONTROL_REG |= CY_PM_PWR_CONTROL_HIBERNATE;
 151:Generated_Source\PSoC4/cyPm.c **** 
 152:Generated_Source\PSoC4/cyPm.c ****         /* Adjust delay to wait for references to settle on wakeup from hibernate */
 153:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = CY_SFLASH_HIB_KEY_DELAY_REG;
 154:Generated_Source\PSoC4/cyPm.c **** 
 155:Generated_Source\PSoC4/cyPm.c ****         /* CPU enters DeepSleep/Hibernate mode upon execution of WFI */
 156:Generated_Source\PSoC4/cyPm.c ****         CY_PM_CPU_SCR_REG |= CY_PM_CPU_SCR_SLEEPDEEP;
 157:Generated_Source\PSoC4/cyPm.c **** 
 158:Generated_Source\PSoC4/cyPm.c ****         /* Save token that will retain through a STOP/WAKEUP sequence
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 6


 159:Generated_Source\PSoC4/cyPm.c ****          * thus could be used by CySysPmGetResetReason() to differentiate
 160:Generated_Source\PSoC4/cyPm.c ****          * WAKEUP from a general RESET event.
 161:Generated_Source\PSoC4/cyPm.c ****          */
 162:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = (CY_PM_PWR_STOP_REG & (uint32)(~CY_PM_PWR_STOP_TOKEN_MASK)) | CY_PM_PW
 163:Generated_Source\PSoC4/cyPm.c **** 
 164:Generated_Source\PSoC4/cyPm.c ****         /* Sleep and wait for interrupt. Wakeup from Hibernate is performed
 165:Generated_Source\PSoC4/cyPm.c ****          * through RESET state, causing a normal Boot procedure to occur.
 166:Generated_Source\PSoC4/cyPm.c ****          * The WFI instruction doesn't put the core to sleep if its wake condition
 167:Generated_Source\PSoC4/cyPm.c ****          * is true when the instruction is executed.
 168:Generated_Source\PSoC4/cyPm.c ****          */
 169:Generated_Source\PSoC4/cyPm.c ****         CY_PM_WFI;
 170:Generated_Source\PSoC4/cyPm.c **** 
 171:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 172:Generated_Source\PSoC4/cyPm.c ****     }
 173:Generated_Source\PSoC4/cyPm.c **** 
 174:Generated_Source\PSoC4/cyPm.c **** 
 175:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 176:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmStop
 177:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 178:Generated_Source\PSoC4/cyPm.c ****     *
 179:Generated_Source\PSoC4/cyPm.c ****     * Puts the part into the Stop state. All internal supplies are off;
 180:Generated_Source\PSoC4/cyPm.c ****     * no state is retained.
 181:Generated_Source\PSoC4/cyPm.c ****     *
 182:Generated_Source\PSoC4/cyPm.c ****     * Wakeup from Stop is performed by toggling the wakeup pin, causing
 183:Generated_Source\PSoC4/cyPm.c ****     * a normal boot procedure to occur. To configure the wakeup pin,
 184:Generated_Source\PSoC4/cyPm.c ****     * the Digital Input Pin component should be placed on the schematic,
 185:Generated_Source\PSoC4/cyPm.c ****     * assigned to the wakeup pin, and resistively pulled up or down to the inverse
 186:Generated_Source\PSoC4/cyPm.c ****     * state of the wakeup polarity. To distinguish the wakeup from the Stop mode
 187:Generated_Source\PSoC4/cyPm.c ****     * and the general Reset event, \ref CySysPmGetResetReason() function could be
 188:Generated_Source\PSoC4/cyPm.c ****     * used.  The wakeup pin is active low by default. The wakeup pin polarity
 189:Generated_Source\PSoC4/cyPm.c ****     * could be changed with the \ref CySysPmSetWakeupPolarity() function.
 190:Generated_Source\PSoC4/cyPm.c ****     *
 191:Generated_Source\PSoC4/cyPm.c ****     * This function freezes IO cells implicitly. It is not possible to enter
 192:Generated_Source\PSoC4/cyPm.c ****     * the STOP mode before freezing the IO cells. The IO cells remain frozen after
 193:Generated_Source\PSoC4/cyPm.c ****     * awake from the Stop mode until the firmware unfreezes them after booting
 194:Generated_Source\PSoC4/cyPm.c ****     * explicitly with \ref CySysPmUnfreezeIo() function call.
 195:Generated_Source\PSoC4/cyPm.c ****     *
 196:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 197:Generated_Source\PSoC4/cyPm.c ****     void CySysPmStop(void)
 198:Generated_Source\PSoC4/cyPm.c ****     {
 199:Generated_Source\PSoC4/cyPm.c ****         (void) CyEnterCriticalSection();
 200:Generated_Source\PSoC4/cyPm.c **** 
 201:Generated_Source\PSoC4/cyPm.c ****         /* Update token to indicate Stop mode transition. Preserve only polarity. */
 202:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = (CY_PM_PWR_STOP_REG & CY_PM_PWR_STOP_POLARITY) | CY_PM_PWR_STOP_TOKEN_
 203:Generated_Source\PSoC4/cyPm.c **** 
 204:Generated_Source\PSoC4/cyPm.c ****         /* Freeze IO-Cells to save IO-Cell state */
 205:Generated_Source\PSoC4/cyPm.c ****         CySysPmFreezeIo();
 206:Generated_Source\PSoC4/cyPm.c **** 
 207:Generated_Source\PSoC4/cyPm.c ****         /* Initiates transition to Stop state */
 208:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_REG | CY_PM_PWR_STOP_STOP;
 209:Generated_Source\PSoC4/cyPm.c **** 
 210:Generated_Source\PSoC4/cyPm.c ****         /* Depending on the clock frequency and internal timing delays,
 211:Generated_Source\PSoC4/cyPm.c ****          * the final AHB transaction may or may not complete. To guard against
 212:Generated_Source\PSoC4/cyPm.c ****          * accidentally executing an unintended instruction, it is recommended
 213:Generated_Source\PSoC4/cyPm.c ****          * to add 2 NOP cycles after the final write to the STOP register.
 214:Generated_Source\PSoC4/cyPm.c ****          */
 215:Generated_Source\PSoC4/cyPm.c ****         CY_NOP;
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 7


 216:Generated_Source\PSoC4/cyPm.c ****         CY_NOP;
 217:Generated_Source\PSoC4/cyPm.c **** 
 218:Generated_Source\PSoC4/cyPm.c ****         /* Should never get to this WFI instruction */
 219:Generated_Source\PSoC4/cyPm.c ****         CY_PM_WFI;
 220:Generated_Source\PSoC4/cyPm.c **** 
 221:Generated_Source\PSoC4/cyPm.c ****         /* Wakeup from Stop is performed by toggling of Wakeup pin,
 222:Generated_Source\PSoC4/cyPm.c ****          * causing a normal Boot procedure to occur. No need to exit
 223:Generated_Source\PSoC4/cyPm.c ****          * from the critical section.
 224:Generated_Source\PSoC4/cyPm.c ****          */
 225:Generated_Source\PSoC4/cyPm.c ****     }
 226:Generated_Source\PSoC4/cyPm.c **** 
 227:Generated_Source\PSoC4/cyPm.c **** 
 228:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 229:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmSetWakeupPolarity
 230:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 231:Generated_Source\PSoC4/cyPm.c ****     *
 232:Generated_Source\PSoC4/cyPm.c ****     * Wake up from the stop mode is performed by toggling the wakeup pin,
 233:Generated_Source\PSoC4/cyPm.c ****     * causing a normal boot procedure to occur. This function assigns
 234:Generated_Source\PSoC4/cyPm.c ****     * the wakeup pin active level. Setting the wakeup pin to this level will cause
 235:Generated_Source\PSoC4/cyPm.c ****     * the wakeup from stop mode. The wakeup pin is active low by default.
 236:Generated_Source\PSoC4/cyPm.c ****     *
 237:Generated_Source\PSoC4/cyPm.c ****     * \param polarity
 238:Generated_Source\PSoC4/cyPm.c ****     * - \ref CY_PM_STOP_WAKEUP_ACTIVE_LOW Logical zero will wakeup the chip
 239:Generated_Source\PSoC4/cyPm.c ****     * - \ref CY_PM_STOP_WAKEUP_ACTIVE_HIGH Logical one will wakeup the chip
 240:Generated_Source\PSoC4/cyPm.c ****     *
 241:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 242:Generated_Source\PSoC4/cyPm.c ****     void CySysPmSetWakeupPolarity(uint32 polarity)
 243:Generated_Source\PSoC4/cyPm.c ****     {
 244:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 245:Generated_Source\PSoC4/cyPm.c **** 
 246:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 247:Generated_Source\PSoC4/cyPm.c **** 
 248:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = (CY_PM_STOP_WAKEUP_ACTIVE_LOW != polarity) ?
 249:Generated_Source\PSoC4/cyPm.c ****                             (CY_PM_PWR_STOP_REG | CY_PM_PWR_STOP_POLARITY) :
 250:Generated_Source\PSoC4/cyPm.c ****                             (CY_PM_PWR_STOP_REG & (uint32) (~CY_PM_PWR_STOP_POLARITY));
 251:Generated_Source\PSoC4/cyPm.c **** 
 252:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 253:Generated_Source\PSoC4/cyPm.c ****     }
 254:Generated_Source\PSoC4/cyPm.c **** 
 255:Generated_Source\PSoC4/cyPm.c **** 
 256:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 257:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmGetResetReason
 258:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 259:Generated_Source\PSoC4/cyPm.c ****     *
 260:Generated_Source\PSoC4/cyPm.c ****     * Retrieves the last reset reason - transition from OFF/XRES/STOP/HIBERNATE to
 261:Generated_Source\PSoC4/cyPm.c ****     * the RESET state. Note that waking up from STOP using XRES will be perceived
 262:Generated_Source\PSoC4/cyPm.c ****     * as a general RESET.
 263:Generated_Source\PSoC4/cyPm.c ****     *
 264:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_UNKN          Unknown reset reason.
 265:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_XRES          Transition from OFF/XRES to RESET
 266:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_WAKEUP_HIB    Transition/wakeup from HIBERNATE to RESET
 267:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_WAKEUP_STOP   Transition/wakeup from STOP to RESET
 268:Generated_Source\PSoC4/cyPm.c ****     *
 269:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 270:Generated_Source\PSoC4/cyPm.c ****     uint32 CySysPmGetResetReason(void)
 271:Generated_Source\PSoC4/cyPm.c ****     {
 272:Generated_Source\PSoC4/cyPm.c ****         uint32 reason = CY_PM_RESET_REASON_UNKN;
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 8


 273:Generated_Source\PSoC4/cyPm.c **** 
 274:Generated_Source\PSoC4/cyPm.c ****         switch(CY_PM_PWR_STOP_REG & CY_PM_PWR_STOP_TOKEN_MASK)
 275:Generated_Source\PSoC4/cyPm.c ****         {
 276:Generated_Source\PSoC4/cyPm.c ****         /* Power up, XRES */
 277:Generated_Source\PSoC4/cyPm.c ****         case CY_PM_PWR_STOP_TOKEN_XRES:
 278:Generated_Source\PSoC4/cyPm.c ****             reason = CY_PM_RESET_REASON_XRES;
 279:Generated_Source\PSoC4/cyPm.c ****             break;
 280:Generated_Source\PSoC4/cyPm.c **** 
 281:Generated_Source\PSoC4/cyPm.c ****         /* Wakeup from Hibernate */
 282:Generated_Source\PSoC4/cyPm.c ****         case CY_PM_PWR_STOP_TOKEN_HIB:
 283:Generated_Source\PSoC4/cyPm.c ****             reason = CY_PM_RESET_REASON_WAKEUP_HIB;
 284:Generated_Source\PSoC4/cyPm.c ****             break;
 285:Generated_Source\PSoC4/cyPm.c **** 
 286:Generated_Source\PSoC4/cyPm.c ****         /* Wakeup from Stop (through WAKEUP pin assert) */
 287:Generated_Source\PSoC4/cyPm.c ****         case CY_PM_PWR_STOP_TOKEN_STOP:
 288:Generated_Source\PSoC4/cyPm.c ****             reason = CY_PM_RESET_REASON_WAKEUP_STOP;
 289:Generated_Source\PSoC4/cyPm.c ****             break;
 290:Generated_Source\PSoC4/cyPm.c **** 
 291:Generated_Source\PSoC4/cyPm.c ****         /* Unknown reason */
 292:Generated_Source\PSoC4/cyPm.c ****         default:
 293:Generated_Source\PSoC4/cyPm.c ****             break;
 294:Generated_Source\PSoC4/cyPm.c ****         }
 295:Generated_Source\PSoC4/cyPm.c **** 
 296:Generated_Source\PSoC4/cyPm.c ****         return (reason);
 297:Generated_Source\PSoC4/cyPm.c ****     }
 298:Generated_Source\PSoC4/cyPm.c **** 
 299:Generated_Source\PSoC4/cyPm.c **** 
 300:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 301:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmFreezeIo
 302:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 303:Generated_Source\PSoC4/cyPm.c ****     *
 304:Generated_Source\PSoC4/cyPm.c ****     * Freezes IO-Cells directly to save the IO-Cell state on wake up from the
 305:Generated_Source\PSoC4/cyPm.c ****     * Hibernate or Stop state. It is not required to call this function before
 306:Generated_Source\PSoC4/cyPm.c ****     * entering the Stop mode, since \ref CySysPmStop() function freezes IO-Cells
 307:Generated_Source\PSoC4/cyPm.c ****     * implicitly.
 308:Generated_Source\PSoC4/cyPm.c ****     *
 309:Generated_Source\PSoC4/cyPm.c ****     * This API is not available for PSoC 4000 family of devices.
 310:Generated_Source\PSoC4/cyPm.c ****     *
 311:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 312:Generated_Source\PSoC4/cyPm.c ****     void CySysPmFreezeIo(void)
 313:Generated_Source\PSoC4/cyPm.c ****     {
 314:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 315:Generated_Source\PSoC4/cyPm.c **** 
 316:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 317:Generated_Source\PSoC4/cyPm.c **** 
 318:Generated_Source\PSoC4/cyPm.c ****         /* Check FREEZE state to avoid recurrent IO-Cells freeze attempt,
 319:Generated_Source\PSoC4/cyPm.c ****          * since the second call to this function will cause accidental switch
 320:Generated_Source\PSoC4/cyPm.c ****          * to the STOP mode (the system will enter STOP mode immediately after
 321:Generated_Source\PSoC4/cyPm.c ****          * writing to STOP bit since both UNLOCK and FREEZE have been set correctly
 322:Generated_Source\PSoC4/cyPm.c ****          * in a previous call to this function).
 323:Generated_Source\PSoC4/cyPm.c ****          */
 324:Generated_Source\PSoC4/cyPm.c ****         if (0u == (CY_PM_PWR_STOP_REG & CY_PM_PWR_STOP_FREEZE))
 325:Generated_Source\PSoC4/cyPm.c ****         {
 326:Generated_Source\PSoC4/cyPm.c ****             /* Preserve last reset reason and disable overrides the next freeze command by peripher
 327:Generated_Source\PSoC4/cyPm.c ****             CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_STOP | CY_PM_PWR_STOP_FREEZE | CY_PM_PWR_STOP_UNLOC
 328:Generated_Source\PSoC4/cyPm.c ****                                 (CY_PM_PWR_STOP_REG & (CY_PM_PWR_STOP_TOKEN_MASK | CY_PM_PWR_STOP_P
 329:Generated_Source\PSoC4/cyPm.c **** 
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 9


 330:Generated_Source\PSoC4/cyPm.c ****             /* If reading after writing, read this register three times to delay
 331:Generated_Source\PSoC4/cyPm.c ****             *  enough time for internal settling.
 332:Generated_Source\PSoC4/cyPm.c ****             */
 333:Generated_Source\PSoC4/cyPm.c ****             (void) CY_PM_PWR_STOP_REG;
 334:Generated_Source\PSoC4/cyPm.c ****             (void) CY_PM_PWR_STOP_REG;
 335:Generated_Source\PSoC4/cyPm.c **** 
 336:Generated_Source\PSoC4/cyPm.c ****             /* Second write causes the freeze of IO-Cells to save IO-Cell state */
 337:Generated_Source\PSoC4/cyPm.c ****             CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_REG;
 338:Generated_Source\PSoC4/cyPm.c ****         }
 339:Generated_Source\PSoC4/cyPm.c **** 
 340:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 341:Generated_Source\PSoC4/cyPm.c ****     }
 342:Generated_Source\PSoC4/cyPm.c **** 
 343:Generated_Source\PSoC4/cyPm.c **** 
 344:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 345:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmUnfreezeIo
 346:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 347:Generated_Source\PSoC4/cyPm.c ****     *
 348:Generated_Source\PSoC4/cyPm.c ****     * The IO-Cells remain frozen after awake from Hibernate or Stop mode until
 349:Generated_Source\PSoC4/cyPm.c ****     * the firmware unfreezes them after booting. The call of this function
 350:Generated_Source\PSoC4/cyPm.c ****     * unfreezes IO-Cells explicitly.
 351:Generated_Source\PSoC4/cyPm.c ****     *
 352:Generated_Source\PSoC4/cyPm.c ****     * If the firmware intent is to retain the data value on the port, then the
 353:Generated_Source\PSoC4/cyPm.c ****     * value must be read and re-written to the data register before calling this
 354:Generated_Source\PSoC4/cyPm.c ****     * API. Furthermore, the drive mode must be re-programmed.  If this is not done,
 355:Generated_Source\PSoC4/cyPm.c ****     * the pin state will change to default state the moment the freeze is removed.
 356:Generated_Source\PSoC4/cyPm.c ****     *
 357:Generated_Source\PSoC4/cyPm.c ****     * This API is not available for PSoC 4000 family of devices.
 358:Generated_Source\PSoC4/cyPm.c ****     *
 359:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 360:Generated_Source\PSoC4/cyPm.c ****     void CySysPmUnfreezeIo(void)
 361:Generated_Source\PSoC4/cyPm.c ****     {
 362:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 363:Generated_Source\PSoC4/cyPm.c **** 
 364:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 365:Generated_Source\PSoC4/cyPm.c **** 
 366:Generated_Source\PSoC4/cyPm.c ****         /* Preserve last reset reason and wakeup polarity. Then, unfreeze I/O:
 367:Generated_Source\PSoC4/cyPm.c ****          * write PWR_STOP.FREEZE=0, .UNLOCK=0x3A, .STOP=0, .TOKEN
 368:Generated_Source\PSoC4/cyPm.c ****          */
 369:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_UNLOCK |
 370:Generated_Source\PSoC4/cyPm.c ****                             (CY_PM_PWR_STOP_REG & (CY_PM_PWR_STOP_TOKEN_MASK | CY_PM_PWR_STOP_POLAR
 371:Generated_Source\PSoC4/cyPm.c **** 
 372:Generated_Source\PSoC4/cyPm.c ****         /* If reading after writing, read this register three times to delay
 373:Generated_Source\PSoC4/cyPm.c ****         *  enough time for internal settling.
 374:Generated_Source\PSoC4/cyPm.c ****         */
 375:Generated_Source\PSoC4/cyPm.c ****         (void) CY_PM_PWR_STOP_REG;
 376:Generated_Source\PSoC4/cyPm.c ****         (void) CY_PM_PWR_STOP_REG;
 377:Generated_Source\PSoC4/cyPm.c **** 
 378:Generated_Source\PSoC4/cyPm.c ****         /* Lock STOP mode: write PWR_STOP.FREEZE=0, UNLOCK=0x00, STOP=0, .TOKEN */
 379:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG &= (CY_PM_PWR_STOP_TOKEN_MASK | CY_PM_PWR_STOP_POLARITY);
 380:Generated_Source\PSoC4/cyPm.c **** 
 381:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 382:Generated_Source\PSoC4/cyPm.c ****     }
 383:Generated_Source\PSoC4/cyPm.c **** 
 384:Generated_Source\PSoC4/cyPm.c **** #else
 385:Generated_Source\PSoC4/cyPm.c **** 
 386:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 10


 387:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmSetWakeupHoldoff
 388:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 389:Generated_Source\PSoC4/cyPm.c ****     *
 390:Generated_Source\PSoC4/cyPm.c ****     * Sets the Deep Sleep wakeup time by scaling the hold-off to the HFCLK
 391:Generated_Source\PSoC4/cyPm.c ****     * frequency.
 392:Generated_Source\PSoC4/cyPm.c ****     *
 393:Generated_Source\PSoC4/cyPm.c ****     * This function must be called before increasing HFCLK clock frequency. It can
 394:Generated_Source\PSoC4/cyPm.c ****     * optionally be called after lowering HFCLK clock frequency in order to improve
 395:Generated_Source\PSoC4/cyPm.c ****     * Deep Sleep wakeup time.
 396:Generated_Source\PSoC4/cyPm.c ****     *
 397:Generated_Source\PSoC4/cyPm.c ****     * It is functionally acceptable to leave the default hold-off setting, but
 398:Generated_Source\PSoC4/cyPm.c ****     * Deep Sleep wakeup time may exceed the specification.
 399:Generated_Source\PSoC4/cyPm.c ****     *
 400:Generated_Source\PSoC4/cyPm.c ****     * This function is applicable only for the 4000 device family.
 401:Generated_Source\PSoC4/cyPm.c ****     *
 402:Generated_Source\PSoC4/cyPm.c ****     * \param hfclkFrequencyMhz The HFCLK frequency in MHz.
 403:Generated_Source\PSoC4/cyPm.c ****     *
 404:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 405:Generated_Source\PSoC4/cyPm.c ****     void CySysPmSetWakeupHoldoff(uint32 hfclkFrequencyMhz)
 406:Generated_Source\PSoC4/cyPm.c ****     {
 128              		.loc 1 406 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              		@ link register save eliminated.
 133              	.LVL4:
 407:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = ((((uint32)(CY_PM_PWR_KEY_DELAY_REG_DEFAULT << 16u) /
 408:Generated_Source\PSoC4/cyPm.c ****             CY_PM_PWR_KEY_DELAY_FREQ_DEFAULT) * hfclkFrequencyMhz) >> 16u) + 1u;
 134              		.loc 1 408 0
 135 0000 034B     		ldr	r3, .L8
 409:Generated_Source\PSoC4/cyPm.c ****     }
 136              		.loc 1 409 0
 137              		@ sp needed
 408:Generated_Source\PSoC4/cyPm.c ****     }
 138              		.loc 1 408 0
 139 0002 5843     		muls	r0, r3
 140              	.LVL5:
 407:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = ((((uint32)(CY_PM_PWR_KEY_DELAY_REG_DEFAULT << 16u) /
 141              		.loc 1 407 0
 142 0004 034B     		ldr	r3, .L8+4
 408:Generated_Source\PSoC4/cyPm.c ****     }
 143              		.loc 1 408 0
 144 0006 000C     		lsrs	r0, r0, #16
 145 0008 0130     		adds	r0, r0, #1
 407:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = ((((uint32)(CY_PM_PWR_KEY_DELAY_REG_DEFAULT << 16u) /
 146              		.loc 1 407 0
 147 000a 1860     		str	r0, [r3]
 148              		.loc 1 409 0
 149 000c 7047     		bx	lr
 150              	.L9:
 151 000e C046     		.align	2
 152              	.L8:
 153 0010 AA2A0500 		.word	338602
 154 0014 04000340 		.word	1073938436
 155              		.cfi_endproc
 156              	.LFE2:
 157              		.size	CySysPmSetWakeupHoldoff, .-CySysPmSetWakeupHoldoff
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 11


 158              		.text
 159              	.Letext0:
 160              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 161              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 162              		.section	.debug_info,"",%progbits
 163              	.Ldebug_info0:
 164 0000 7C010000 		.4byte	0x17c
 165 0004 0400     		.2byte	0x4
 166 0006 00000000 		.4byte	.Ldebug_abbrev0
 167 000a 04       		.byte	0x4
 168 000b 01       		.uleb128 0x1
 169 000c 34010000 		.4byte	.LASF25
 170 0010 0C       		.byte	0xc
 171 0011 41000000 		.4byte	.LASF26
 172 0015 C3000000 		.4byte	.LASF27
 173 0019 00000000 		.4byte	.Ldebug_ranges0+0
 174 001d 00000000 		.4byte	0
 175 0021 00000000 		.4byte	.Ldebug_line0
 176 0025 02       		.uleb128 0x2
 177 0026 01       		.byte	0x1
 178 0027 06       		.byte	0x6
 179 0028 03020000 		.4byte	.LASF0
 180 002c 02       		.uleb128 0x2
 181 002d 01       		.byte	0x1
 182 002e 08       		.byte	0x8
 183 002f 22000000 		.4byte	.LASF1
 184 0033 02       		.uleb128 0x2
 185 0034 02       		.byte	0x2
 186 0035 05       		.byte	0x5
 187 0036 3E020000 		.4byte	.LASF2
 188 003a 02       		.uleb128 0x2
 189 003b 02       		.byte	0x2
 190 003c 07       		.byte	0x7
 191 003d F0010000 		.4byte	.LASF3
 192 0041 02       		.uleb128 0x2
 193 0042 04       		.byte	0x4
 194 0043 05       		.byte	0x5
 195 0044 C2010000 		.4byte	.LASF4
 196 0048 02       		.uleb128 0x2
 197 0049 04       		.byte	0x4
 198 004a 07       		.byte	0x7
 199 004b 94000000 		.4byte	.LASF5
 200 004f 02       		.uleb128 0x2
 201 0050 08       		.byte	0x8
 202 0051 05       		.byte	0x5
 203 0052 00000000 		.4byte	.LASF6
 204 0056 02       		.uleb128 0x2
 205 0057 08       		.byte	0x8
 206 0058 07       		.byte	0x7
 207 0059 A6000000 		.4byte	.LASF7
 208 005d 03       		.uleb128 0x3
 209 005e 04       		.byte	0x4
 210 005f 05       		.byte	0x5
 211 0060 696E7400 		.ascii	"int\000"
 212 0064 02       		.uleb128 0x2
 213 0065 04       		.byte	0x4
 214 0066 07       		.byte	0x7
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 12


 215 0067 15000000 		.4byte	.LASF8
 216 006b 04       		.uleb128 0x4
 217 006c 8E000000 		.4byte	.LASF9
 218 0070 02       		.byte	0x2
 219 0071 D201     		.2byte	0x1d2
 220 0073 2C000000 		.4byte	0x2c
 221 0077 04       		.uleb128 0x4
 222 0078 48020000 		.4byte	.LASF10
 223 007c 02       		.byte	0x2
 224 007d D301     		.2byte	0x1d3
 225 007f 3A000000 		.4byte	0x3a
 226 0083 04       		.uleb128 0x4
 227 0084 0E000000 		.4byte	.LASF11
 228 0088 02       		.byte	0x2
 229 0089 D401     		.2byte	0x1d4
 230 008b 48000000 		.4byte	0x48
 231 008f 02       		.uleb128 0x2
 232 0090 04       		.byte	0x4
 233 0091 04       		.byte	0x4
 234 0092 BD000000 		.4byte	.LASF12
 235 0096 02       		.uleb128 0x2
 236 0097 08       		.byte	0x8
 237 0098 04       		.byte	0x4
 238 0099 D1010000 		.4byte	.LASF13
 239 009d 02       		.uleb128 0x2
 240 009e 01       		.byte	0x1
 241 009f 08       		.byte	0x8
 242 00a0 2F010000 		.4byte	.LASF14
 243 00a4 04       		.uleb128 0x4
 244 00a5 CB010000 		.4byte	.LASF15
 245 00a9 02       		.byte	0x2
 246 00aa 7D02     		.2byte	0x27d
 247 00ac B0000000 		.4byte	0xb0
 248 00b0 05       		.uleb128 0x5
 249 00b1 77000000 		.4byte	0x77
 250 00b5 04       		.uleb128 0x4
 251 00b6 EA010000 		.4byte	.LASF16
 252 00ba 02       		.byte	0x2
 253 00bb 7E02     		.2byte	0x27e
 254 00bd C1000000 		.4byte	0xc1
 255 00c1 05       		.uleb128 0x5
 256 00c2 83000000 		.4byte	0x83
 257 00c6 02       		.uleb128 0x2
 258 00c7 08       		.byte	0x8
 259 00c8 04       		.byte	0x4
 260 00c9 32020000 		.4byte	.LASF17
 261 00cd 02       		.uleb128 0x2
 262 00ce 04       		.byte	0x4
 263 00cf 07       		.byte	0x7
 264 00d0 4F020000 		.4byte	.LASF18
 265 00d4 06       		.uleb128 0x6
 266 00d5 0F020000 		.4byte	.LASF19
 267 00d9 01       		.byte	0x1
 268 00da 20       		.byte	0x20
 269 00db 00000000 		.4byte	.LFB0
 270 00df 1C000000 		.4byte	.LFE0-.LFB0
 271 00e3 01       		.uleb128 0x1
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 13


 272 00e4 9C       		.byte	0x9c
 273 00e5 0B010000 		.4byte	0x10b
 274 00e9 07       		.uleb128 0x7
 275 00ea 58020000 		.4byte	.LASF21
 276 00ee 01       		.byte	0x1
 277 00ef 22       		.byte	0x22
 278 00f0 6B000000 		.4byte	0x6b
 279 00f4 00000000 		.4byte	.LLST0
 280 00f8 08       		.uleb128 0x8
 281 00f9 06000000 		.4byte	.LVL0
 282 00fd 69010000 		.4byte	0x169
 283 0101 08       		.uleb128 0x8
 284 0102 16000000 		.4byte	.LVL1
 285 0106 74010000 		.4byte	0x174
 286 010a 00       		.byte	0
 287 010b 06       		.uleb128 0x6
 288 010c 30000000 		.4byte	.LASF20
 289 0110 01       		.byte	0x1
 290 0111 3F       		.byte	0x3f
 291 0112 00000000 		.4byte	.LFB1
 292 0116 30000000 		.4byte	.LFE1-.LFB1
 293 011a 01       		.uleb128 0x1
 294 011b 9C       		.byte	0x9c
 295 011c 42010000 		.4byte	0x142
 296 0120 07       		.uleb128 0x7
 297 0121 58020000 		.4byte	.LASF21
 298 0125 01       		.byte	0x1
 299 0126 41       		.byte	0x41
 300 0127 6B000000 		.4byte	0x6b
 301 012b 13000000 		.4byte	.LLST1
 302 012f 08       		.uleb128 0x8
 303 0130 06000000 		.4byte	.LVL2
 304 0134 69010000 		.4byte	0x169
 305 0138 08       		.uleb128 0x8
 306 0139 20000000 		.4byte	.LVL3
 307 013d 74010000 		.4byte	0x174
 308 0141 00       		.byte	0
 309 0142 09       		.uleb128 0x9
 310 0143 76000000 		.4byte	.LASF22
 311 0147 01       		.byte	0x1
 312 0148 9501     		.2byte	0x195
 313 014a 00000000 		.4byte	.LFB2
 314 014e 18000000 		.4byte	.LFE2-.LFB2
 315 0152 01       		.uleb128 0x1
 316 0153 9C       		.byte	0x9c
 317 0154 69010000 		.4byte	0x169
 318 0158 0A       		.uleb128 0xa
 319 0159 D8010000 		.4byte	.LASF28
 320 015d 01       		.byte	0x1
 321 015e 9501     		.2byte	0x195
 322 0160 83000000 		.4byte	0x83
 323 0164 26000000 		.4byte	.LLST2
 324 0168 00       		.byte	0
 325 0169 0B       		.uleb128 0xb
 326 016a 5F000000 		.4byte	.LASF23
 327 016e 5F000000 		.4byte	.LASF23
 328 0172 03       		.byte	0x3
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 14


 329 0173 E5       		.byte	0xe5
 330 0174 0B       		.uleb128 0xb
 331 0175 1C020000 		.4byte	.LASF24
 332 0179 1C020000 		.4byte	.LASF24
 333 017d 03       		.byte	0x3
 334 017e E6       		.byte	0xe6
 335 017f 00       		.byte	0
 336              		.section	.debug_abbrev,"",%progbits
 337              	.Ldebug_abbrev0:
 338 0000 01       		.uleb128 0x1
 339 0001 11       		.uleb128 0x11
 340 0002 01       		.byte	0x1
 341 0003 25       		.uleb128 0x25
 342 0004 0E       		.uleb128 0xe
 343 0005 13       		.uleb128 0x13
 344 0006 0B       		.uleb128 0xb
 345 0007 03       		.uleb128 0x3
 346 0008 0E       		.uleb128 0xe
 347 0009 1B       		.uleb128 0x1b
 348 000a 0E       		.uleb128 0xe
 349 000b 55       		.uleb128 0x55
 350 000c 17       		.uleb128 0x17
 351 000d 11       		.uleb128 0x11
 352 000e 01       		.uleb128 0x1
 353 000f 10       		.uleb128 0x10
 354 0010 17       		.uleb128 0x17
 355 0011 00       		.byte	0
 356 0012 00       		.byte	0
 357 0013 02       		.uleb128 0x2
 358 0014 24       		.uleb128 0x24
 359 0015 00       		.byte	0
 360 0016 0B       		.uleb128 0xb
 361 0017 0B       		.uleb128 0xb
 362 0018 3E       		.uleb128 0x3e
 363 0019 0B       		.uleb128 0xb
 364 001a 03       		.uleb128 0x3
 365 001b 0E       		.uleb128 0xe
 366 001c 00       		.byte	0
 367 001d 00       		.byte	0
 368 001e 03       		.uleb128 0x3
 369 001f 24       		.uleb128 0x24
 370 0020 00       		.byte	0
 371 0021 0B       		.uleb128 0xb
 372 0022 0B       		.uleb128 0xb
 373 0023 3E       		.uleb128 0x3e
 374 0024 0B       		.uleb128 0xb
 375 0025 03       		.uleb128 0x3
 376 0026 08       		.uleb128 0x8
 377 0027 00       		.byte	0
 378 0028 00       		.byte	0
 379 0029 04       		.uleb128 0x4
 380 002a 16       		.uleb128 0x16
 381 002b 00       		.byte	0
 382 002c 03       		.uleb128 0x3
 383 002d 0E       		.uleb128 0xe
 384 002e 3A       		.uleb128 0x3a
 385 002f 0B       		.uleb128 0xb
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 15


 386 0030 3B       		.uleb128 0x3b
 387 0031 05       		.uleb128 0x5
 388 0032 49       		.uleb128 0x49
 389 0033 13       		.uleb128 0x13
 390 0034 00       		.byte	0
 391 0035 00       		.byte	0
 392 0036 05       		.uleb128 0x5
 393 0037 35       		.uleb128 0x35
 394 0038 00       		.byte	0
 395 0039 49       		.uleb128 0x49
 396 003a 13       		.uleb128 0x13
 397 003b 00       		.byte	0
 398 003c 00       		.byte	0
 399 003d 06       		.uleb128 0x6
 400 003e 2E       		.uleb128 0x2e
 401 003f 01       		.byte	0x1
 402 0040 3F       		.uleb128 0x3f
 403 0041 19       		.uleb128 0x19
 404 0042 03       		.uleb128 0x3
 405 0043 0E       		.uleb128 0xe
 406 0044 3A       		.uleb128 0x3a
 407 0045 0B       		.uleb128 0xb
 408 0046 3B       		.uleb128 0x3b
 409 0047 0B       		.uleb128 0xb
 410 0048 27       		.uleb128 0x27
 411 0049 19       		.uleb128 0x19
 412 004a 11       		.uleb128 0x11
 413 004b 01       		.uleb128 0x1
 414 004c 12       		.uleb128 0x12
 415 004d 06       		.uleb128 0x6
 416 004e 40       		.uleb128 0x40
 417 004f 18       		.uleb128 0x18
 418 0050 9742     		.uleb128 0x2117
 419 0052 19       		.uleb128 0x19
 420 0053 01       		.uleb128 0x1
 421 0054 13       		.uleb128 0x13
 422 0055 00       		.byte	0
 423 0056 00       		.byte	0
 424 0057 07       		.uleb128 0x7
 425 0058 34       		.uleb128 0x34
 426 0059 00       		.byte	0
 427 005a 03       		.uleb128 0x3
 428 005b 0E       		.uleb128 0xe
 429 005c 3A       		.uleb128 0x3a
 430 005d 0B       		.uleb128 0xb
 431 005e 3B       		.uleb128 0x3b
 432 005f 0B       		.uleb128 0xb
 433 0060 49       		.uleb128 0x49
 434 0061 13       		.uleb128 0x13
 435 0062 02       		.uleb128 0x2
 436 0063 17       		.uleb128 0x17
 437 0064 00       		.byte	0
 438 0065 00       		.byte	0
 439 0066 08       		.uleb128 0x8
 440 0067 898201   		.uleb128 0x4109
 441 006a 00       		.byte	0
 442 006b 11       		.uleb128 0x11
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 16


 443 006c 01       		.uleb128 0x1
 444 006d 31       		.uleb128 0x31
 445 006e 13       		.uleb128 0x13
 446 006f 00       		.byte	0
 447 0070 00       		.byte	0
 448 0071 09       		.uleb128 0x9
 449 0072 2E       		.uleb128 0x2e
 450 0073 01       		.byte	0x1
 451 0074 3F       		.uleb128 0x3f
 452 0075 19       		.uleb128 0x19
 453 0076 03       		.uleb128 0x3
 454 0077 0E       		.uleb128 0xe
 455 0078 3A       		.uleb128 0x3a
 456 0079 0B       		.uleb128 0xb
 457 007a 3B       		.uleb128 0x3b
 458 007b 05       		.uleb128 0x5
 459 007c 27       		.uleb128 0x27
 460 007d 19       		.uleb128 0x19
 461 007e 11       		.uleb128 0x11
 462 007f 01       		.uleb128 0x1
 463 0080 12       		.uleb128 0x12
 464 0081 06       		.uleb128 0x6
 465 0082 40       		.uleb128 0x40
 466 0083 18       		.uleb128 0x18
 467 0084 9742     		.uleb128 0x2117
 468 0086 19       		.uleb128 0x19
 469 0087 01       		.uleb128 0x1
 470 0088 13       		.uleb128 0x13
 471 0089 00       		.byte	0
 472 008a 00       		.byte	0
 473 008b 0A       		.uleb128 0xa
 474 008c 05       		.uleb128 0x5
 475 008d 00       		.byte	0
 476 008e 03       		.uleb128 0x3
 477 008f 0E       		.uleb128 0xe
 478 0090 3A       		.uleb128 0x3a
 479 0091 0B       		.uleb128 0xb
 480 0092 3B       		.uleb128 0x3b
 481 0093 05       		.uleb128 0x5
 482 0094 49       		.uleb128 0x49
 483 0095 13       		.uleb128 0x13
 484 0096 02       		.uleb128 0x2
 485 0097 17       		.uleb128 0x17
 486 0098 00       		.byte	0
 487 0099 00       		.byte	0
 488 009a 0B       		.uleb128 0xb
 489 009b 2E       		.uleb128 0x2e
 490 009c 00       		.byte	0
 491 009d 3F       		.uleb128 0x3f
 492 009e 19       		.uleb128 0x19
 493 009f 3C       		.uleb128 0x3c
 494 00a0 19       		.uleb128 0x19
 495 00a1 6E       		.uleb128 0x6e
 496 00a2 0E       		.uleb128 0xe
 497 00a3 03       		.uleb128 0x3
 498 00a4 0E       		.uleb128 0xe
 499 00a5 3A       		.uleb128 0x3a
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 17


 500 00a6 0B       		.uleb128 0xb
 501 00a7 3B       		.uleb128 0x3b
 502 00a8 0B       		.uleb128 0xb
 503 00a9 00       		.byte	0
 504 00aa 00       		.byte	0
 505 00ab 00       		.byte	0
 506              		.section	.debug_loc,"",%progbits
 507              	.Ldebug_loc0:
 508              	.LLST0:
 509 0000 06000000 		.4byte	.LVL0
 510 0004 15000000 		.4byte	.LVL1-1
 511 0008 0100     		.2byte	0x1
 512 000a 50       		.byte	0x50
 513 000b 00000000 		.4byte	0
 514 000f 00000000 		.4byte	0
 515              	.LLST1:
 516 0013 06000000 		.4byte	.LVL2
 517 0017 1F000000 		.4byte	.LVL3-1
 518 001b 0100     		.2byte	0x1
 519 001d 50       		.byte	0x50
 520 001e 00000000 		.4byte	0
 521 0022 00000000 		.4byte	0
 522              	.LLST2:
 523 0026 00000000 		.4byte	.LVL4
 524 002a 04000000 		.4byte	.LVL5
 525 002e 0100     		.2byte	0x1
 526 0030 50       		.byte	0x50
 527 0031 04000000 		.4byte	.LVL5
 528 0035 18000000 		.4byte	.LFE2
 529 0039 0400     		.2byte	0x4
 530 003b F3       		.byte	0xf3
 531 003c 01       		.uleb128 0x1
 532 003d 50       		.byte	0x50
 533 003e 9F       		.byte	0x9f
 534 003f 00000000 		.4byte	0
 535 0043 00000000 		.4byte	0
 536              		.section	.debug_aranges,"",%progbits
 537 0000 2C000000 		.4byte	0x2c
 538 0004 0200     		.2byte	0x2
 539 0006 00000000 		.4byte	.Ldebug_info0
 540 000a 04       		.byte	0x4
 541 000b 00       		.byte	0
 542 000c 0000     		.2byte	0
 543 000e 0000     		.2byte	0
 544 0010 00000000 		.4byte	.LFB0
 545 0014 1C000000 		.4byte	.LFE0-.LFB0
 546 0018 00000000 		.4byte	.LFB1
 547 001c 30000000 		.4byte	.LFE1-.LFB1
 548 0020 00000000 		.4byte	.LFB2
 549 0024 18000000 		.4byte	.LFE2-.LFB2
 550 0028 00000000 		.4byte	0
 551 002c 00000000 		.4byte	0
 552              		.section	.debug_ranges,"",%progbits
 553              	.Ldebug_ranges0:
 554 0000 00000000 		.4byte	.LFB0
 555 0004 1C000000 		.4byte	.LFE0
 556 0008 00000000 		.4byte	.LFB1
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 18


 557 000c 30000000 		.4byte	.LFE1
 558 0010 00000000 		.4byte	.LFB2
 559 0014 18000000 		.4byte	.LFE2
 560 0018 00000000 		.4byte	0
 561 001c 00000000 		.4byte	0
 562              		.section	.debug_line,"",%progbits
 563              	.Ldebug_line0:
 564 0000 98000000 		.section	.debug_str,"MS",%progbits,1
 564      02004C00 
 564      00000201 
 564      FB0E0D00 
 564      01010101 
 565              	.LASF6:
 566 0000 6C6F6E67 		.ascii	"long long int\000"
 566      206C6F6E 
 566      6720696E 
 566      7400
 567              	.LASF11:
 568 000e 75696E74 		.ascii	"uint32\000"
 568      333200
 569              	.LASF8:
 570 0015 756E7369 		.ascii	"unsigned int\000"
 570      676E6564 
 570      20696E74 
 570      00
 571              	.LASF1:
 572 0022 756E7369 		.ascii	"unsigned char\000"
 572      676E6564 
 572      20636861 
 572      7200
 573              	.LASF20:
 574 0030 43795379 		.ascii	"CySysPmDeepSleep\000"
 574      73506D44 
 574      65657053 
 574      6C656570 
 574      00
 575              	.LASF26:
 576 0041 47656E65 		.ascii	"Generated_Source\\PSoC4\\cyPm.c\000"
 576      72617465 
 576      645F536F 
 576      75726365 
 576      5C50536F 
 577              	.LASF23:
 578 005f 4379456E 		.ascii	"CyEnterCriticalSection\000"
 578      74657243 
 578      72697469 
 578      63616C53 
 578      65637469 
 579              	.LASF22:
 580 0076 43795379 		.ascii	"CySysPmSetWakeupHoldoff\000"
 580      73506D53 
 580      65745761 
 580      6B657570 
 580      486F6C64 
 581              	.LASF9:
 582 008e 75696E74 		.ascii	"uint8\000"
 582      3800
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 19


 583              	.LASF5:
 584 0094 6C6F6E67 		.ascii	"long unsigned int\000"
 584      20756E73 
 584      69676E65 
 584      6420696E 
 584      7400
 585              	.LASF7:
 586 00a6 6C6F6E67 		.ascii	"long long unsigned int\000"
 586      206C6F6E 
 586      6720756E 
 586      7369676E 
 586      65642069 
 587              	.LASF12:
 588 00bd 666C6F61 		.ascii	"float\000"
 588      7400
 589              	.LASF27:
 590 00c3 433A5C55 		.ascii	"C:\\Users\\Public\\touch\\(NowC302)A1_Global_Multi_"
 590      73657273 
 590      5C507562 
 590      6C69635C 
 590      746F7563 
 591 00f2 43726561 		.ascii	"Creator4.1_hawkeye\\CapSense_CSD_P4_Example_WithTun"
 591      746F7234 
 591      2E315F68 
 591      61776B65 
 591      79655C43 
 592 0124 65723031 		.ascii	"er01.cydsn\000"
 592      2E637964 
 592      736E00
 593              	.LASF14:
 594 012f 63686172 		.ascii	"char\000"
 594      00
 595              	.LASF25:
 596 0134 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 596      43313120 
 596      352E342E 
 596      31203230 
 596      31363036 
 597 0167 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 597      20726576 
 597      6973696F 
 597      6E203233 
 597      37373135 
 598 019a 33202D66 		.ascii	"3 -ffunction-sections -ffat-lto-objects\000"
 598      66756E63 
 598      74696F6E 
 598      2D736563 
 598      74696F6E 
 599              	.LASF4:
 600 01c2 6C6F6E67 		.ascii	"long int\000"
 600      20696E74 
 600      00
 601              	.LASF15:
 602 01cb 72656731 		.ascii	"reg16\000"
 602      3600
 603              	.LASF13:
 604 01d1 646F7562 		.ascii	"double\000"
ARM GAS  C:\Users\young\AppData\Local\Temp\cc37K0Ka.s 			page 20


 604      6C6500
 605              	.LASF28:
 606 01d8 6866636C 		.ascii	"hfclkFrequencyMhz\000"
 606      6B467265 
 606      7175656E 
 606      63794D68 
 606      7A00
 607              	.LASF16:
 608 01ea 72656733 		.ascii	"reg32\000"
 608      3200
 609              	.LASF3:
 610 01f0 73686F72 		.ascii	"short unsigned int\000"
 610      7420756E 
 610      7369676E 
 610      65642069 
 610      6E7400
 611              	.LASF0:
 612 0203 7369676E 		.ascii	"signed char\000"
 612      65642063 
 612      68617200 
 613              	.LASF19:
 614 020f 43795379 		.ascii	"CySysPmSleep\000"
 614      73506D53 
 614      6C656570 
 614      00
 615              	.LASF24:
 616 021c 43794578 		.ascii	"CyExitCriticalSection\000"
 616      69744372 
 616      69746963 
 616      616C5365 
 616      6374696F 
 617              	.LASF17:
 618 0232 6C6F6E67 		.ascii	"long double\000"
 618      20646F75 
 618      626C6500 
 619              	.LASF2:
 620 023e 73686F72 		.ascii	"short int\000"
 620      7420696E 
 620      7400
 621              	.LASF10:
 622 0248 75696E74 		.ascii	"uint16\000"
 622      313600
 623              	.LASF18:
 624 024f 73697A65 		.ascii	"sizetype\000"
 624      74797065 
 624      00
 625              	.LASF21:
 626 0258 696E7465 		.ascii	"interruptState\000"
 626      72727570 
 626      74537461 
 626      746500
 627              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
