ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"CyLFClk.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.CySysClkIloStart,"ax",%progbits
  20              		.align	2
  21              		.global	CySysClkIloStart
  22              		.code	16
  23              		.thumb_func
  24              		.type	CySysClkIloStart, %function
  25              	CySysClkIloStart:
  26              	.LFB0:
  27              		.file 1 "Generated_Source\\PSoC4\\CyLFClk.c"
   1:Generated_Source\PSoC4/CyLFClk.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/CyLFClk.c **** * \file .c
   3:Generated_Source\PSoC4/CyLFClk.c **** * \version 1.20
   4:Generated_Source\PSoC4/CyLFClk.c **** *
   5:Generated_Source\PSoC4/CyLFClk.c **** * \brief
   6:Generated_Source\PSoC4/CyLFClk.c **** *  This file provides the source code for configuring watchdog timers WDTs, 
   7:Generated_Source\PSoC4/CyLFClk.c **** *  low frequency clocks (LFCLK) and the Real-time Clock (RTC) component in
   8:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC Creator for the PSoC 4 families.
   9:Generated_Source\PSoC4/CyLFClk.c **** *
  10:Generated_Source\PSoC4/CyLFClk.c **** ********************************************************************************
  11:Generated_Source\PSoC4/CyLFClk.c **** * \copyright
  12:Generated_Source\PSoC4/CyLFClk.c **** * Copyright 2008-2017, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/CyLFClk.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/CyLFClk.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/CyLFClk.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/CyLFClk.c **** 
  18:Generated_Source\PSoC4/CyLFClk.c **** 
  19:Generated_Source\PSoC4/CyLFClk.c **** #include "CyLFClk.h"
  20:Generated_Source\PSoC4/CyLFClk.c **** #include "CyLib.h"
  21:Generated_Source\PSoC4/CyLFClk.c **** 
  22:Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_WCO && CY_IP_SRSSV2)
  23:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkGetLfclkSource(void);
  24:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_WCO && CY_IP_SRSSV2) */
  25:Generated_Source\PSoC4/CyLFClk.c **** 
  26:Generated_Source\PSoC4/CyLFClk.c **** 
  27:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2 && (!CY_IP_CPUSS))
  28:Generated_Source\PSoC4/CyLFClk.c ****     /* Default Ilo Trim Register value for ILO trimming*/
  29:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint16 defaultIloTrimRegValue = CY_SYS_CLK_ILO_TRIM_DEFAULT_VALUE;
  30:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2 && (!CY_IP_CPUSS)) */
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 2


  31:Generated_Source\PSoC4/CyLFClk.c **** 
  32:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
  33:Generated_Source\PSoC4/CyLFClk.c ****     /* CySysClkLfclkPosedgeCatch() / CySysClkLfclkPosedgeRestore() */
  34:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 lfclkPosedgeWdtCounter0Enabled = 0u;
  35:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 lfclkPosedgeWdtCounter0Mode    = CY_SYS_WDT_MODE_NONE;
  36:Generated_Source\PSoC4/CyLFClk.c **** 
  37:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 disableServicedIsr = 0uL;
  38:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 wdtIsrMask = CY_SYS_WDT_COUNTER0_INT |\
  39:Generated_Source\PSoC4/CyLFClk.c ****                                         CY_SYS_WDT_COUNTER1_INT |\
  40:Generated_Source\PSoC4/CyLFClk.c ****                                         CY_SYS_WDT_COUNTER2_INT;
  41:Generated_Source\PSoC4/CyLFClk.c **** 
  42:Generated_Source\PSoC4/CyLFClk.c ****     static const uint32 counterIntMaskTbl[CY_WDT_NUM_OF_WDT] = {CY_SYS_WDT_COUNTER0_INT,
  43:Generated_Source\PSoC4/CyLFClk.c ****                                                                 CY_SYS_WDT_COUNTER1_INT,
  44:Generated_Source\PSoC4/CyLFClk.c ****                                                                 CY_SYS_WDT_COUNTER2_INT};
  45:Generated_Source\PSoC4/CyLFClk.c **** 
  46:Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeCatch(void);
  47:Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeRestore(void);
  48:Generated_Source\PSoC4/CyLFClk.c **** 
  49:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysWdtLocked(void);
  50:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkIloEnabled(void);
  51:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2) */
  52:Generated_Source\PSoC4/CyLFClk.c **** 
  53:Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN)
  54:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkGetTimerSource(void);
  55:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 disableTimerServicedIsr = 0uL;
  56:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 timerIsrMask = CY_SYS_TIMER0_INT |\
  57:Generated_Source\PSoC4/CyLFClk.c ****                                           CY_SYS_TIMER1_INT |\
  58:Generated_Source\PSoC4/CyLFClk.c ****                                           CY_SYS_TIMER2_INT;
  59:Generated_Source\PSoC4/CyLFClk.c **** 
  60:Generated_Source\PSoC4/CyLFClk.c ****     static const uint32 counterTimerIntMaskTbl[CY_SYS_NUM_OF_TIMERS] = {CY_SYS_TIMER0_INT,
  61:Generated_Source\PSoC4/CyLFClk.c ****                                                                         CY_SYS_TIMER1_INT,
  62:Generated_Source\PSoC4/CyLFClk.c ****                                                                         CY_SYS_TIMER2_INT};
  63:Generated_Source\PSoC4/CyLFClk.c **** 
  64:Generated_Source\PSoC4/CyLFClk.c ****     static cyTimerCallback cySysTimerCallback[CY_SYS_NUM_OF_TIMERS] = {(void *)0, (void *)0, (void 
  65:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_DWT_EN) */
  66:Generated_Source\PSoC4/CyLFClk.c **** 
  67:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
  68:Generated_Source\PSoC4/CyLFClk.c ****     static cyWdtCallback cySysWdtCallback[CY_WDT_NUM_OF_WDT] = {(void *)0, (void *)0, (void *)0};
  69:Generated_Source\PSoC4/CyLFClk.c **** #else
  70:Generated_Source\PSoC4/CyLFClk.c ****     static cyWdtCallback cySysWdtCallback = (void *)0;
  71:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2) */
  72:Generated_Source\PSoC4/CyLFClk.c **** 
  73:Generated_Source\PSoC4/CyLFClk.c **** 
  74:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
  75:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStart
  76:Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
  77:Generated_Source\PSoC4/CyLFClk.c **** * \brief
  78:Generated_Source\PSoC4/CyLFClk.c **** *  Enables ILO.
  79:Generated_Source\PSoC4/CyLFClk.c **** *
  80:Generated_Source\PSoC4/CyLFClk.c **** *  Refer to the device datasheet for the ILO startup time.
  81:Generated_Source\PSoC4/CyLFClk.c **** *
  82:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
  83:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStart(void)
  84:Generated_Source\PSoC4/CyLFClk.c **** {
  28              		.loc 1 84 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 3


  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  85:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_CLK_ILO_CONFIG_REG |= CY_SYS_CLK_ILO_CONFIG_ENABLE;
  33              		.loc 1 85 0
  34 0000 8021     		movs	r1, #128
  35 0002 034A     		ldr	r2, .L2
  36 0004 0906     		lsls	r1, r1, #24
  37 0006 1368     		ldr	r3, [r2]
  86:Generated_Source\PSoC4/CyLFClk.c **** }
  38              		.loc 1 86 0
  39              		@ sp needed
  85:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_CLK_ILO_CONFIG_REG |= CY_SYS_CLK_ILO_CONFIG_ENABLE;
  40              		.loc 1 85 0
  41 0008 0B43     		orrs	r3, r1
  42 000a 1360     		str	r3, [r2]
  43              		.loc 1 86 0
  44 000c 7047     		bx	lr
  45              	.L3:
  46 000e C046     		.align	2
  47              	.L2:
  48 0010 2C000340 		.word	1073938476
  49              		.cfi_endproc
  50              	.LFE0:
  51              		.size	CySysClkIloStart, .-CySysClkIloStart
  52              		.section	.text.CySysClkIloStop,"ax",%progbits
  53              		.align	2
  54              		.global	CySysClkIloStop
  55              		.code	16
  56              		.thumb_func
  57              		.type	CySysClkIloStop, %function
  58              	CySysClkIloStop:
  59              	.LFB1:
  87:Generated_Source\PSoC4/CyLFClk.c **** 
  88:Generated_Source\PSoC4/CyLFClk.c **** 
  89:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
  90:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStop
  91:Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
  92:Generated_Source\PSoC4/CyLFClk.c **** * \brief
  93:Generated_Source\PSoC4/CyLFClk.c **** *  Disables the ILO.
  94:Generated_Source\PSoC4/CyLFClk.c **** *
  95:Generated_Source\PSoC4/CyLFClk.c **** *  This function has no effect if WDT is locked (CySysWdtLock() is
  96:Generated_Source\PSoC4/CyLFClk.c **** *  called). Call CySysWdtUnlock() to unlock WDT and stop ILO.
  97:Generated_Source\PSoC4/CyLFClk.c **** *
  98:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4100 / PSoC 4200: Note that ILO is required for WDT's operation.
  99:Generated_Source\PSoC4/CyLFClk.c **** *
 100:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4100 BLE / PSoC 4200 BLE / PSoC 4200L / PSoC 4100M / 
 101:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4200M:
 102:Generated_Source\PSoC4/CyLFClk.c **** *  Stopping ILO affects the peripheral clocked by LFCLK, if
 103:Generated_Source\PSoC4/CyLFClk.c **** *  LFCLK is configured to be sourced by ILO.
 104:Generated_Source\PSoC4/CyLFClk.c **** *
 105:Generated_Source\PSoC4/CyLFClk.c **** *  If the ILO is disabled, all blocks run by ILO will stop functioning.
 106:Generated_Source\PSoC4/CyLFClk.c **** *
 107:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 108:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStop(void)
 109:Generated_Source\PSoC4/CyLFClk.c **** {
  60              		.loc 1 109 0
  61              		.cfi_startproc
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 4


  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              		@ link register save eliminated.
 110:Generated_Source\PSoC4/CyLFClk.c ****     #if(CY_IP_SRSSV2)
 111:Generated_Source\PSoC4/CyLFClk.c ****         uint8  interruptState;
 112:Generated_Source\PSoC4/CyLFClk.c **** 
 113:Generated_Source\PSoC4/CyLFClk.c ****         /* Do nothing if WDT is locked or ILO is disabled */
 114:Generated_Source\PSoC4/CyLFClk.c ****         if (0u == CySysWdtLocked())
 115:Generated_Source\PSoC4/CyLFClk.c ****         {
 116:Generated_Source\PSoC4/CyLFClk.c ****             if (0u != CySysClkIloEnabled())
 117:Generated_Source\PSoC4/CyLFClk.c ****             {
 118:Generated_Source\PSoC4/CyLFClk.c **** 
 119:Generated_Source\PSoC4/CyLFClk.c ****             #if (CY_IP_WCO)
 120:Generated_Source\PSoC4/CyLFClk.c ****                 if (CY_SYS_CLK_LFCLK_SRC_ILO == CySysClkGetLfclkSource())
 121:Generated_Source\PSoC4/CyLFClk.c ****                 {
 122:Generated_Source\PSoC4/CyLFClk.c ****             #endif /* (CY_IP_WCO) */
 123:Generated_Source\PSoC4/CyLFClk.c **** 
 124:Generated_Source\PSoC4/CyLFClk.c ****                 interruptState = CyEnterCriticalSection();
 125:Generated_Source\PSoC4/CyLFClk.c ****                 CySysClkLfclkPosedgeCatch();
 126:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_ILO_CONFIG_REG &= (uint32) ( ~(uint32)CY_SYS_CLK_ILO_CONFIG_ENABLE);
 127:Generated_Source\PSoC4/CyLFClk.c ****                 CySysClkLfclkPosedgeRestore();
 128:Generated_Source\PSoC4/CyLFClk.c ****                 CyExitCriticalSection(interruptState);
 129:Generated_Source\PSoC4/CyLFClk.c **** 
 130:Generated_Source\PSoC4/CyLFClk.c ****             #if (CY_IP_WCO)
 131:Generated_Source\PSoC4/CyLFClk.c ****                 }
 132:Generated_Source\PSoC4/CyLFClk.c ****                 else /* Safe to disable - shortened pulse does not impact peripheral */
 133:Generated_Source\PSoC4/CyLFClk.c ****                 {
 134:Generated_Source\PSoC4/CyLFClk.c ****                     CY_SYS_CLK_ILO_CONFIG_REG &= (uint32) ( ~(uint32)CY_SYS_CLK_ILO_CONFIG_ENABLE);
 135:Generated_Source\PSoC4/CyLFClk.c ****                 }
 136:Generated_Source\PSoC4/CyLFClk.c ****             #endif /* (CY_IP_WCO) */
 137:Generated_Source\PSoC4/CyLFClk.c **** 
 138:Generated_Source\PSoC4/CyLFClk.c ****             }
 139:Generated_Source\PSoC4/CyLFClk.c ****         }
 140:Generated_Source\PSoC4/CyLFClk.c ****     #else
 141:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_ILO_CONFIG_REG &= ( uint32 ) ( ~( uint32 )CY_SYS_CLK_ILO_CONFIG_ENABLE);
  65              		.loc 1 141 0
  66 0000 024A     		ldr	r2, .L5
 142:Generated_Source\PSoC4/CyLFClk.c ****     #endif /* (CY_IP_SRSSV2) */
 143:Generated_Source\PSoC4/CyLFClk.c **** }
  67              		.loc 1 143 0
  68              		@ sp needed
 141:Generated_Source\PSoC4/CyLFClk.c ****     #endif /* (CY_IP_SRSSV2) */
  69              		.loc 1 141 0
  70 0002 1368     		ldr	r3, [r2]
  71 0004 5B00     		lsls	r3, r3, #1
  72 0006 5B08     		lsrs	r3, r3, #1
  73 0008 1360     		str	r3, [r2]
  74              		.loc 1 143 0
  75 000a 7047     		bx	lr
  76              	.L6:
  77              		.align	2
  78              	.L5:
  79 000c 2C000340 		.word	1073938476
  80              		.cfi_endproc
  81              	.LFE1:
  82              		.size	CySysClkIloStop, .-CySysClkIloStop
  83              		.section	.text.CySysClkIloStartMeasurement,"ax",%progbits
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 5


  84              		.align	2
  85              		.global	CySysClkIloStartMeasurement
  86              		.code	16
  87              		.thumb_func
  88              		.type	CySysClkIloStartMeasurement, %function
  89              	CySysClkIloStartMeasurement:
  90              	.LFB2:
 144:Generated_Source\PSoC4/CyLFClk.c **** 
 145:Generated_Source\PSoC4/CyLFClk.c **** 
 146:Generated_Source\PSoC4/CyLFClk.c **** /******************************************************************************
 147:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStartMeasurement
 148:Generated_Source\PSoC4/CyLFClk.c **** ***************************************************************************//**
 149:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 150:Generated_Source\PSoC4/CyLFClk.c **** * Starts the ILO accuracy measurement.
 151:Generated_Source\PSoC4/CyLFClk.c **** *
 152:Generated_Source\PSoC4/CyLFClk.c **** * This function is non-blocking and needs to be called before using the 
 153:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloTrim() and CySysClkIloCompensate() API.
 154:Generated_Source\PSoC4/CyLFClk.c **** *
 155:Generated_Source\PSoC4/CyLFClk.c **** * This API configures measurement counters to be sourced by SysClk (Counter 1)
 156:Generated_Source\PSoC4/CyLFClk.c **** * and ILO (Counter 2). 
 157:Generated_Source\PSoC4/CyLFClk.c **** *
 158:Generated_Source\PSoC4/CyLFClk.c **** * \note SysClk should be sourced by IMO. Otherwise CySysClkIloTrim() and 
 159:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloCompensate() API can give incorrect results.
 160:Generated_Source\PSoC4/CyLFClk.c **** *
 161:Generated_Source\PSoC4/CyLFClk.c **** * In addition, this API stores the factory ILO trim settings on the first call 
 162:Generated_Source\PSoC4/CyLFClk.c **** * after reset. This stored factory setting is used by the 
 163:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloRestoreFactoryTrim() API to restore the ILO factory trim. 
 164:Generated_Source\PSoC4/CyLFClk.c **** * Hence, it is important to call this API before restoring the ILO 
 165:Generated_Source\PSoC4/CyLFClk.c **** * factory trim settings.
 166:Generated_Source\PSoC4/CyLFClk.c **** *
 167:Generated_Source\PSoC4/CyLFClk.c **** ******************************************************************************/
 168:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStartMeasurement(void)
 169:Generated_Source\PSoC4/CyLFClk.c **** {
  91              		.loc 1 169 0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 0
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95              		@ link register save eliminated.
 170:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2 && (!CY_IP_CPUSS))
 171:Generated_Source\PSoC4/CyLFClk.c ****     static uint8 iloTrimTrig = 0u;
 172:Generated_Source\PSoC4/CyLFClk.c **** 
 173:Generated_Source\PSoC4/CyLFClk.c ****     /* Write default ILO trim value while ILO starting ( Cypress ID 225244 )*/
 174:Generated_Source\PSoC4/CyLFClk.c ****     if (0u == iloTrimTrig)
 175:Generated_Source\PSoC4/CyLFClk.c ****     {
 176:Generated_Source\PSoC4/CyLFClk.c ****         defaultIloTrimRegValue = ((uint8)(CY_SYS_CLK_ILO_TRIM_REG & CY_SYS_CLK_ILO_TRIM_MASK));
 177:Generated_Source\PSoC4/CyLFClk.c ****         iloTrimTrig = 1u;
 178:Generated_Source\PSoC4/CyLFClk.c ****     }
 179:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2 && (!CY_IP_CPUSS)) */
 180:Generated_Source\PSoC4/CyLFClk.c **** 
 181:Generated_Source\PSoC4/CyLFClk.c ****     /* Configure measurement counters to source by SysClk (Counter 1) and ILO (Counter 2)*/
 182:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_CLK_DFT_REG = (CY_SYS_CLK_DFT_REG & (uint32) ~CY_SYS_CLK_DFT_SELECT_DEFAULT_MASK) |
  96              		.loc 1 182 0
  97 0000 074A     		ldr	r2, .L8
  98 0002 084B     		ldr	r3, .L8+4
  99 0004 1168     		ldr	r1, [r2]
 183:Generated_Source\PSoC4/CyLFClk.c ****                             CY_SYS_CLK_SEL_ILO_DFT_SOURCE; 
 184:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 6


 185:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_TST_DDFT_CTRL_REG = (CY_SYS_TST_DDFT_CTRL_REG & (uint32) ~ CY_SYS_TST_DDFT_CTRL_REG_DEFA
 186:Generated_Source\PSoC4/CyLFClk.c ****                             CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1;
 187:Generated_Source\PSoC4/CyLFClk.c **** }
 100              		.loc 1 187 0
 101              		@ sp needed
 182:Generated_Source\PSoC4/CyLFClk.c ****                             CY_SYS_CLK_SEL_ILO_DFT_SOURCE; 
 102              		.loc 1 182 0
 103 0006 0B40     		ands	r3, r1
 104 0008 8021     		movs	r1, #128
 105 000a 4900     		lsls	r1, r1, #1
 106 000c 0B43     		orrs	r3, r1
 107 000e 1360     		str	r3, [r2]
 185:Generated_Source\PSoC4/CyLFClk.c ****                             CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1;
 108              		.loc 1 185 0
 109 0010 054A     		ldr	r2, .L8+8
 110 0012 064B     		ldr	r3, .L8+12
 111 0014 1168     		ldr	r1, [r2]
 112 0016 0B40     		ands	r3, r1
 113 0018 0549     		ldr	r1, .L8+16
 114 001a 0B43     		orrs	r3, r1
 115 001c 1360     		str	r3, [r2]
 116              		.loc 1 187 0
 117 001e 7047     		bx	lr
 118              	.L9:
 119              		.align	2
 120              	.L8:
 121 0020 34000340 		.word	1073938484
 122 0024 FFF0FFFF 		.word	-3841
 123 0028 18000340 		.word	1073938456
 124 002c F0F0FFFF 		.word	-3856
 125 0030 08090000 		.word	2312
 126              		.cfi_endproc
 127              	.LFE2:
 128              		.size	CySysClkIloStartMeasurement, .-CySysClkIloStartMeasurement
 129              		.section	.text.CySysClkIloStopMeasurement,"ax",%progbits
 130              		.align	2
 131              		.global	CySysClkIloStopMeasurement
 132              		.code	16
 133              		.thumb_func
 134              		.type	CySysClkIloStopMeasurement, %function
 135              	CySysClkIloStopMeasurement:
 136              	.LFB3:
 188:Generated_Source\PSoC4/CyLFClk.c **** 
 189:Generated_Source\PSoC4/CyLFClk.c **** 
 190:Generated_Source\PSoC4/CyLFClk.c **** /******************************************************************************
 191:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStopMeasurement
 192:Generated_Source\PSoC4/CyLFClk.c **** ***************************************************************************//**
 193:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 194:Generated_Source\PSoC4/CyLFClk.c **** * Stops the ILO accuracy measurement.
 195:Generated_Source\PSoC4/CyLFClk.c **** *
 196:Generated_Source\PSoC4/CyLFClk.c **** * Calling this function immediately stops the the ILO frequency measurement.
 197:Generated_Source\PSoC4/CyLFClk.c **** * This function should be called before placing the device to deepsleep, if 
 198:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloStartMeasurement() API was called before. 
 199:Generated_Source\PSoC4/CyLFClk.c **** *
 200:Generated_Source\PSoC4/CyLFClk.c **** ******************************************************************************/
 201:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStopMeasurement(void)
 202:Generated_Source\PSoC4/CyLFClk.c **** {
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 7


 137              		.loc 1 202 0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 203:Generated_Source\PSoC4/CyLFClk.c ****     /* Set default configurations in 11...8 DFT register bits to zero */
 204:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_CLK_DFT_REG &= ~CY_SYS_CLK_DFT_SELECT_DEFAULT_MASK;
 142              		.loc 1 204 0
 143 0000 054A     		ldr	r2, .L11
 144 0002 064B     		ldr	r3, .L11+4
 145 0004 1168     		ldr	r1, [r2]
 205:Generated_Source\PSoC4/CyLFClk.c ****     #if(CY_IP_SRSSLT)
 206:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_TST_DDFT_CTRL_REG &= ((uint32) CY_SYS_TST_DDFT_CTRL_REG_DEFAULT_MASK);
 207:Generated_Source\PSoC4/CyLFClk.c ****     #endif /* (CY_IP_SRSSLT) */
 208:Generated_Source\PSoC4/CyLFClk.c **** }
 146              		.loc 1 208 0
 147              		@ sp needed
 204:Generated_Source\PSoC4/CyLFClk.c ****     #if(CY_IP_SRSSLT)
 148              		.loc 1 204 0
 149 0006 0B40     		ands	r3, r1
 150 0008 1360     		str	r3, [r2]
 206:Generated_Source\PSoC4/CyLFClk.c ****     #endif /* (CY_IP_SRSSLT) */
 151              		.loc 1 206 0
 152 000a 054A     		ldr	r2, .L11+8
 153 000c 054B     		ldr	r3, .L11+12
 154 000e 1168     		ldr	r1, [r2]
 155 0010 0B40     		ands	r3, r1
 156 0012 1360     		str	r3, [r2]
 157              		.loc 1 208 0
 158 0014 7047     		bx	lr
 159              	.L12:
 160 0016 C046     		.align	2
 161              	.L11:
 162 0018 34000340 		.word	1073938484
 163 001c FFF0FFFF 		.word	-3841
 164 0020 18000340 		.word	1073938456
 165 0024 0F0F0000 		.word	3855
 166              		.cfi_endproc
 167              	.LFE3:
 168              		.size	CySysClkIloStopMeasurement, .-CySysClkIloStopMeasurement
 169              		.global	__aeabi_uidiv
 170              		.section	.text.CySysClkIloCompensate,"ax",%progbits
 171              		.align	2
 172              		.global	CySysClkIloCompensate
 173              		.code	16
 174              		.thumb_func
 175              		.type	CySysClkIloCompensate, %function
 176              	CySysClkIloCompensate:
 177              	.LFB4:
 209:Generated_Source\PSoC4/CyLFClk.c **** 
 210:Generated_Source\PSoC4/CyLFClk.c **** 
 211:Generated_Source\PSoC4/CyLFClk.c **** /******************************************************************************
 212:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloCompensate
 213:Generated_Source\PSoC4/CyLFClk.c **** ***************************************************************************//**
 214:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 215:Generated_Source\PSoC4/CyLFClk.c **** * This API measures the current ILO accuracy.
 216:Generated_Source\PSoC4/CyLFClk.c **** *
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 8


 217:Generated_Source\PSoC4/CyLFClk.c **** * Basing on the measured frequency the required number of ILO cycles for a 
 218:Generated_Source\PSoC4/CyLFClk.c **** * given delay (in microseconds) is obtained. The desired delay that needs to 
 219:Generated_Source\PSoC4/CyLFClk.c **** * be compensated is passed through the desiredDelay parameter. The compensated 
 220:Generated_Source\PSoC4/CyLFClk.c **** * cycle count is returned through the compesatedCycles pointer.
 221:Generated_Source\PSoC4/CyLFClk.c **** * The compensated ILO cycles can then be used to define the WDT period value, 
 222:Generated_Source\PSoC4/CyLFClk.c **** * effectively compensating for the ILO inaccuracy and allowing a more 
 223:Generated_Source\PSoC4/CyLFClk.c **** * accurate WDT interrupt generation.
 224:Generated_Source\PSoC4/CyLFClk.c **** *
 225:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloStartMeasurement() API should be called prior to calling this API. 
 226:Generated_Source\PSoC4/CyLFClk.c **** *
 227:Generated_Source\PSoC4/CyLFClk.c **** * \note SysClk should be sourced by IMO. Otherwise CySysClkIloTrim() and 
 228:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloCompensate() API can give incorrect results.
 229:Generated_Source\PSoC4/CyLFClk.c **** *
 230:Generated_Source\PSoC4/CyLFClk.c **** * \note If the System clock frequency is changed in runtime, the CyDelayFreq() 
 231:Generated_Source\PSoC4/CyLFClk.c **** * with the appropriate parameter (Frequency of bus clock in Hertz) should be 
 232:Generated_Source\PSoC4/CyLFClk.c **** * called before calling a next CySysClkIloCompensate().
 233:Generated_Source\PSoC4/CyLFClk.c **** *
 234:Generated_Source\PSoC4/CyLFClk.c **** * \warning Do not enter deep sleep mode until the function returns CYRET_SUCCESS.
 235:Generated_Source\PSoC4/CyLFClk.c **** *
 236:Generated_Source\PSoC4/CyLFClk.c **** * \param desiredDelay Required delay in microseconds.
 237:Generated_Source\PSoC4/CyLFClk.c **** *
 238:Generated_Source\PSoC4/CyLFClk.c **** * \param *compensatedCycles The pointer to the variable in which the required
 239:Generated_Source\PSoC4/CyLFClk.c **** * number of ILO cycles for the given delay will be returned.
 240:Generated_Source\PSoC4/CyLFClk.c **** *
 241:Generated_Source\PSoC4/CyLFClk.c **** * \details
 242:Generated_Source\PSoC4/CyLFClk.c **** * The value returned in *compensatedCycles pointer is not valid until the 
 243:Generated_Source\PSoC4/CyLFClk.c **** * function returns CYRET_SUCCESS.
 244:Generated_Source\PSoC4/CyLFClk.c **** *
 245:Generated_Source\PSoC4/CyLFClk.c **** * The desiredDelay parameter value should be in next range: <br>From 100 to 
 246:Generated_Source\PSoC4/CyLFClk.c **** * 2 000 000 microseconds for PSoC 4000 / PSoC 4000S / PSoC 4100S / PSoC Analog 
 247:Generated_Source\PSoC4/CyLFClk.c **** * Coprocessor devices.<br>From 100 to 4 000 000 000 microseconds for 
 248:Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4100 / PSoC 4200 / PSoC 4100 BLE / PSoC 4200 BLE / PRoC BLE /
 249:Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4200L / PSoC 4100M /PSoC 4200M devices.
 250:Generated_Source\PSoC4/CyLFClk.c **** *
 251:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - The compensation process is complete and the 
 252:Generated_Source\PSoC4/CyLFClk.c **** * compensated cycles value is returned in the compensatedCycles pointer.
 253:Generated_Source\PSoC4/CyLFClk.c **** *
 254:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_STARTED - Indicates measurement is in progress. It is 
 255:Generated_Source\PSoC4/CyLFClk.c **** * strongly recommended to do not make pauses between API calling. The 
 256:Generated_Source\PSoC4/CyLFClk.c **** * function should be called repeatedly until the API returns CYRET_SUCCESS.
 257:Generated_Source\PSoC4/CyLFClk.c **** *
 258:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_INVALID_STATE - Indicates that measurement not started. 
 259:Generated_Source\PSoC4/CyLFClk.c **** * The user should call CySysClkIloStartMeasurement() API before calling 
 260:Generated_Source\PSoC4/CyLFClk.c **** * this API.
 261:Generated_Source\PSoC4/CyLFClk.c **** *
 262:Generated_Source\PSoC4/CyLFClk.c **** * \note For a correct WDT or DeepSleep Timers functioning with ILO compensating 
 263:Generated_Source\PSoC4/CyLFClk.c **** * the CySysClkIloCompensate() should be called before WDT or DeepSleep Timers 
 264:Generated_Source\PSoC4/CyLFClk.c **** * enabling.
 265:Generated_Source\PSoC4/CyLFClk.c **** *
 266:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 267:Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloCompensate(uint32 desiredDelay , uint32* compensatedCycles)
 268:Generated_Source\PSoC4/CyLFClk.c **** {
 178              		.loc 1 268 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              	.LVL0:
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 9


 183 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 184              		.cfi_def_cfa_offset 20
 185              		.cfi_offset 4, -20
 186              		.cfi_offset 5, -16
 187              		.cfi_offset 6, -12
 188              		.cfi_offset 7, -8
 189              		.cfi_offset 14, -4
 190 0002 4746     		mov	r7, r8
 191 0004 0C00     		movs	r4, r1
 269:Generated_Source\PSoC4/CyLFClk.c ****     uint32 iloCompensatedCycles;
 270:Generated_Source\PSoC4/CyLFClk.c ****     uint32 desiredDelayInCounts;
 271:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 272:Generated_Source\PSoC4/CyLFClk.c ****     uint32 checkStatus;
 273:Generated_Source\PSoC4/CyLFClk.c ****     cystatus returnStatus;
 274:Generated_Source\PSoC4/CyLFClk.c **** 
 275:Generated_Source\PSoC4/CyLFClk.c ****     checkStatus = (uint32) (CY_SYS_CLK_DFT_REG & (uint32) CY_SYS_TST_DDFT_CTRL_REG_DEFAULT_MASK);
 276:Generated_Source\PSoC4/CyLFClk.c **** 
 277:Generated_Source\PSoC4/CyLFClk.c ****     /* Check if CySysStartMeasurement was called before */
 278:Generated_Source\PSoC4/CyLFClk.c ****     if((checkStatus == CY_SYS_CLK_SEL_ILO_DFT_SOURCE) && 
 192              		.loc 1 278 0
 193 0006 8021     		movs	r1, #128
 194              	.LVL1:
 275:Generated_Source\PSoC4/CyLFClk.c **** 
 195              		.loc 1 275 0
 196 0008 2F4B     		ldr	r3, .L28
 268:Generated_Source\PSoC4/CyLFClk.c ****     uint32 iloCompensatedCycles;
 197              		.loc 1 268 0
 198 000a 80B4     		push	{r7}
 199              		.cfi_def_cfa_offset 24
 200              		.cfi_offset 8, -24
 275:Generated_Source\PSoC4/CyLFClk.c **** 
 201              		.loc 1 275 0
 202 000c 1A68     		ldr	r2, [r3]
 203              	.LVL2:
 204              		.loc 1 278 0
 205 000e 2F4B     		ldr	r3, .L28+4
 206 0010 4900     		lsls	r1, r1, #1
 207 0012 1340     		ands	r3, r2
 208              	.LVL3:
 279:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
 280:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_CLK_MAX_DELAY_US >= desiredDelay) &&
 281:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_CLK_MIN_DELAY_US <= desiredDelay) &&
 282:Generated_Source\PSoC4/CyLFClk.c ****        (compensatedCycles !=  NULL))
 283:Generated_Source\PSoC4/CyLFClk.c ****     {
 284:Generated_Source\PSoC4/CyLFClk.c ****         if(CY_SYS_CLK_TRIM_OR_COMP_FINISHED != compensateRunningStatus)
 285:Generated_Source\PSoC4/CyLFClk.c ****         {
 286:Generated_Source\PSoC4/CyLFClk.c ****             /* Wait until counter 1 stopped counting and after it calculate compensated cycles */
 287:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_CNT_REG1_REG & CY_SYS_CLK_ILO_CALIBR_COMPLETE_MASK))
 288:Generated_Source\PSoC4/CyLFClk.c ****             {
 289:Generated_Source\PSoC4/CyLFClk.c ****                 if (0u != CY_SYS_CNT_REG2_REG)
 290:Generated_Source\PSoC4/CyLFClk.c ****                 {
 291:Generated_Source\PSoC4/CyLFClk.c ****                     /* Calculate required number of ILO cycles for given delay */
 292:Generated_Source\PSoC4/CyLFClk.c ****                     #if(CY_IP_SRSSV2)
 293:Generated_Source\PSoC4/CyLFClk.c ****                         if (CY_SYS_CLK_DELAY_COUNTS_LIMIT < desiredDelay)
 294:Generated_Source\PSoC4/CyLFClk.c ****                         {
 295:Generated_Source\PSoC4/CyLFClk.c ****                             desiredDelayInCounts = (desiredDelay / CY_SYS_CLK_ILO_PERIOD);
 296:Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = 
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 10


 297:Generated_Source\PSoC4/CyLFClk.c ****                             (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / (cydelayFreqHz >> CY_SYS_CLK_
 298:Generated_Source\PSoC4/CyLFClk.c ****                                 CY_SYS_CLK_ILO_FREQ_2MSB) * (desiredDelayInCounts / CY_SYS_CLK_ILO_
 299:Generated_Source\PSoC4/CyLFClk.c ****                         }
 300:Generated_Source\PSoC4/CyLFClk.c ****                         else
 301:Generated_Source\PSoC4/CyLFClk.c ****                         {
 302:Generated_Source\PSoC4/CyLFClk.c ****                             desiredDelayInCounts = ((desiredDelay * CY_SYS_CLK_COEF_PHUNDRED) + 
 303:Generated_Source\PSoC4/CyLFClk.c ****                                                      CY_SYS_CLK_HALF_OF_CLOCK) / CY_SYS_CLK_ILO_PER
 304:Generated_Source\PSoC4/CyLFClk.c **** 
 305:Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / 
 306:Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 307:Generated_Source\PSoC4/CyLFClk.c ****                                                      desiredDelayInCounts) / CY_SYS_CLK_ILO_DESIRED
 308:Generated_Source\PSoC4/CyLFClk.c ****                         }
 309:Generated_Source\PSoC4/CyLFClk.c ****                     #else /* (CY_IP_SRSSLT) */
 310:Generated_Source\PSoC4/CyLFClk.c ****                         desiredDelayInCounts = ((desiredDelay * CY_SYS_CLK_COEF_PHUNDRED) + CY_SYS_
 311:Generated_Source\PSoC4/CyLFClk.c ****                                                                                            CY_SYS_C
 312:Generated_Source\PSoC4/CyLFClk.c ****                         if(CY_SYS_CLK_MAX_LITE_NUMBER < desiredDelayInCounts)
 313:Generated_Source\PSoC4/CyLFClk.c ****                         {
 314:Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / (cydel
 315:Generated_Source\PSoC4/CyLFClk.c ****                                                    CY_SYS_CLK_SYS_CLK_DEVIDER)) / CY_SYS_CLK_ILO_FR
 316:Generated_Source\PSoC4/CyLFClk.c ****                                                    (desiredDelayInCounts / CY_SYS_CLK_ILO_FREQ_3LSB
 317:Generated_Source\PSoC4/CyLFClk.c ****                         }
 318:Generated_Source\PSoC4/CyLFClk.c ****                         else
 319:Generated_Source\PSoC4/CyLFClk.c ****                         {
 320:Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / 
 321:Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 322:Generated_Source\PSoC4/CyLFClk.c ****                                                      desiredDelayInCounts) / CY_SYS_CLK_ILO_DESIRED
 323:Generated_Source\PSoC4/CyLFClk.c ****                         }
 324:Generated_Source\PSoC4/CyLFClk.c ****                     #endif /* (CY_IP_SRSSV2) */
 325:Generated_Source\PSoC4/CyLFClk.c **** 
 326:Generated_Source\PSoC4/CyLFClk.c ****                     *compensatedCycles = iloCompensatedCycles;
 327:Generated_Source\PSoC4/CyLFClk.c ****                     compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 328:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_SUCCESS;
 329:Generated_Source\PSoC4/CyLFClk.c ****                 }
 330:Generated_Source\PSoC4/CyLFClk.c ****                 else
 331:Generated_Source\PSoC4/CyLFClk.c ****                 {
 332:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus  = CYRET_INVALID_STATE;
 333:Generated_Source\PSoC4/CyLFClk.c ****                 }
 334:Generated_Source\PSoC4/CyLFClk.c ****             }
 335:Generated_Source\PSoC4/CyLFClk.c ****             else
 336:Generated_Source\PSoC4/CyLFClk.c ****             {
 337:Generated_Source\PSoC4/CyLFClk.c ****                 returnStatus = CYRET_STARTED;
 338:Generated_Source\PSoC4/CyLFClk.c ****             }
 339:Generated_Source\PSoC4/CyLFClk.c ****         }
 340:Generated_Source\PSoC4/CyLFClk.c ****         else
 341:Generated_Source\PSoC4/CyLFClk.c ****         {
 342:Generated_Source\PSoC4/CyLFClk.c ****             /* Reload CNTR 1 count value for next measurement cycle*/
 343:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_CNT_REG1_REG = (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER);
 344:Generated_Source\PSoC4/CyLFClk.c ****             compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_STARTED;
 345:Generated_Source\PSoC4/CyLFClk.c ****             returnStatus = CYRET_STARTED;
 346:Generated_Source\PSoC4/CyLFClk.c ****         }
 347:Generated_Source\PSoC4/CyLFClk.c ****     }
 348:Generated_Source\PSoC4/CyLFClk.c ****     else
 349:Generated_Source\PSoC4/CyLFClk.c ****     {
 350:Generated_Source\PSoC4/CyLFClk.c ****         returnStatus = CYRET_INVALID_STATE;
 209              		.loc 1 350 0
 210 0014 1122     		movs	r2, #17
 278:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 11


 211              		.loc 1 278 0
 212 0016 8B42     		cmp	r3, r1
 213 0018 03D0     		beq	.L26
 214              	.LVL4:
 215              	.L14:
 351:Generated_Source\PSoC4/CyLFClk.c ****     }
 352:Generated_Source\PSoC4/CyLFClk.c **** 
 353:Generated_Source\PSoC4/CyLFClk.c ****     return (returnStatus);
 354:Generated_Source\PSoC4/CyLFClk.c **** }
 216              		.loc 1 354 0
 217 001a 1000     		movs	r0, r2
 218              		@ sp needed
 219              	.LVL5:
 220 001c 04BC     		pop	{r2}
 221 001e 9046     		mov	r8, r2
 222 0020 F0BD     		pop	{r4, r5, r6, r7, pc}
 223              	.LVL6:
 224              	.L26:
 279:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_CLK_MAX_DELAY_US >= desiredDelay) &&
 225              		.loc 1 279 0 discriminator 1
 226 0022 2B4B     		ldr	r3, .L28+8
 227              	.LVL7:
 228 0024 1968     		ldr	r1, [r3]
 278:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
 229              		.loc 1 278 0 discriminator 1
 230 0026 2B4B     		ldr	r3, .L28+12
 231 0028 9942     		cmp	r1, r3
 232 002a F6D1     		bne	.L14
 280:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_CLK_MIN_DELAY_US <= desiredDelay) &&
 233              		.loc 1 280 0
 234 002c 0300     		movs	r3, r0
 235 002e 2A49     		ldr	r1, .L28+16
 236 0030 643B     		subs	r3, r3, #100
 237 0032 8B42     		cmp	r3, r1
 238 0034 F1D8     		bhi	.L14
 281:Generated_Source\PSoC4/CyLFClk.c ****        (compensatedCycles !=  NULL))
 239              		.loc 1 281 0
 240 0036 002C     		cmp	r4, #0
 241 0038 EFD0     		beq	.L14
 284:Generated_Source\PSoC4/CyLFClk.c ****         {
 242              		.loc 1 284 0
 243 003a 284E     		ldr	r6, .L28+20
 244 003c 3368     		ldr	r3, [r6]
 245 003e 002B     		cmp	r3, #0
 246 0040 08D1     		bne	.L27
 343:Generated_Source\PSoC4/CyLFClk.c ****             compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_STARTED;
 247              		.loc 1 343 0
 248 0042 274B     		ldr	r3, .L28+24
 249 0044 274A     		ldr	r2, .L28+28
 250 0046 1B68     		ldr	r3, [r3]
 251 0048 9B0A     		lsrs	r3, r3, #10
 252 004a 1360     		str	r3, [r2]
 344:Generated_Source\PSoC4/CyLFClk.c ****             returnStatus = CYRET_STARTED;
 253              		.loc 1 344 0
 254 004c 0123     		movs	r3, #1
 345:Generated_Source\PSoC4/CyLFClk.c ****         }
 255              		.loc 1 345 0
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 12


 256 004e 0722     		movs	r2, #7
 344:Generated_Source\PSoC4/CyLFClk.c ****             returnStatus = CYRET_STARTED;
 257              		.loc 1 344 0
 258 0050 3360     		str	r3, [r6]
 259              	.LVL8:
 260 0052 E2E7     		b	.L14
 261              	.LVL9:
 262              	.L27:
 287:Generated_Source\PSoC4/CyLFClk.c ****             {
 263              		.loc 1 287 0
 264 0054 234B     		ldr	r3, .L28+28
 337:Generated_Source\PSoC4/CyLFClk.c ****             }
 265              		.loc 1 337 0
 266 0056 0A3A     		subs	r2, r2, #10
 287:Generated_Source\PSoC4/CyLFClk.c ****             {
 267              		.loc 1 287 0
 268 0058 1B68     		ldr	r3, [r3]
 269 005a 002B     		cmp	r3, #0
 270 005c DDDA     		bge	.L14
 289:Generated_Source\PSoC4/CyLFClk.c ****                 {
 271              		.loc 1 289 0
 272 005e 224B     		ldr	r3, .L28+32
 350:Generated_Source\PSoC4/CyLFClk.c ****     }
 273              		.loc 1 350 0
 274 0060 0A32     		adds	r2, r2, #10
 289:Generated_Source\PSoC4/CyLFClk.c ****                 {
 275              		.loc 1 289 0
 276 0062 9846     		mov	r8, r3
 277 0064 1B68     		ldr	r3, [r3]
 278 0066 002B     		cmp	r3, #0
 279 0068 D7D0     		beq	.L14
 310:Generated_Source\PSoC4/CyLFClk.c ****                                                                                            CY_SYS_C
 280              		.loc 1 310 0
 281 006a 6425     		movs	r5, #100
 282 006c 6843     		muls	r0, r5
 283              	.LVL10:
 284 006e 1F4B     		ldr	r3, .L28+36
 285 0070 1F49     		ldr	r1, .L28+40
 286 0072 C518     		adds	r5, r0, r3
 287 0074 2800     		movs	r0, r5
 288 0076 FFF7FEFF 		bl	__aeabi_uidiv
 289              	.LVL11:
 312:Generated_Source\PSoC4/CyLFClk.c ****                         {
 290              		.loc 1 312 0
 291 007a 1E4B     		ldr	r3, .L28+44
 310:Generated_Source\PSoC4/CyLFClk.c ****                                                                                            CY_SYS_C
 292              		.loc 1 310 0
 293 007c 0700     		movs	r7, r0
 294              	.LVL12:
 312:Generated_Source\PSoC4/CyLFClk.c ****                         {
 295              		.loc 1 312 0
 296 007e 9842     		cmp	r0, r3
 297 0080 14D9     		bls	.L16
 314:Generated_Source\PSoC4/CyLFClk.c ****                                                    CY_SYS_CLK_SYS_CLK_DEVIDER)) / CY_SYS_CLK_ILO_FR
 298              		.loc 1 314 0
 299 0082 4346     		mov	r3, r8
 300 0084 1868     		ldr	r0, [r3]
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 13


 301              	.LVL13:
 302 0086 164B     		ldr	r3, .L28+24
 303 0088 1968     		ldr	r1, [r3]
 304 008a 4843     		muls	r0, r1
 305 008c 890A     		lsrs	r1, r1, #10
 306 008e FFF7FEFF 		bl	__aeabi_uidiv
 307              	.LVL14:
 308 0092 2821     		movs	r1, #40
 309 0094 FFF7FEFF 		bl	__aeabi_uidiv
 310              	.LVL15:
 311 0098 1749     		ldr	r1, .L28+48
 312 009a 0700     		movs	r7, r0
 313              	.LVL16:
 314 009c 2800     		movs	r0, r5
 315 009e FFF7FEFF 		bl	__aeabi_uidiv
 316              	.LVL17:
 317 00a2 7843     		muls	r0, r7
 318              	.LVL18:
 319              	.L17:
 327:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_SUCCESS;
 320              		.loc 1 327 0
 321 00a4 0022     		movs	r2, #0
 326:Generated_Source\PSoC4/CyLFClk.c ****                     compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 322              		.loc 1 326 0
 323 00a6 2060     		str	r0, [r4]
 327:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_SUCCESS;
 324              		.loc 1 327 0
 325 00a8 3260     		str	r2, [r6]
 326              	.LVL19:
 327 00aa B6E7     		b	.L14
 328              	.LVL20:
 329              	.L16:
 320:Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 330              		.loc 1 320 0
 331 00ac 4346     		mov	r3, r8
 332 00ae 1868     		ldr	r0, [r3]
 333              	.LVL21:
 334 00b0 0B4B     		ldr	r3, .L28+24
 335 00b2 1968     		ldr	r1, [r3]
 336 00b4 4843     		muls	r0, r1
 337 00b6 890A     		lsrs	r1, r1, #10
 338 00b8 FFF7FEFF 		bl	__aeabi_uidiv
 339              	.LVL22:
 340 00bc 0F49     		ldr	r1, .L28+52
 341 00be 7843     		muls	r0, r7
 342 00c0 FFF7FEFF 		bl	__aeabi_uidiv
 343              	.LVL23:
 344 00c4 EEE7     		b	.L17
 345              	.L29:
 346 00c6 C046     		.align	2
 347              	.L28:
 348 00c8 34000340 		.word	1073938484
 349 00cc 0F0F0000 		.word	3855
 350 00d0 18000340 		.word	1073938456
 351 00d4 08090000 		.word	2312
 352 00d8 1C841E00 		.word	1999900
 353 00dc 00000000 		.word	.LANCHOR0
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 14


 354 00e0 00000000 		.word	cydelayFreqHz
 355 00e4 1C000340 		.word	1073938460
 356 00e8 20000340 		.word	1073938464
 357 00ec 71020000 		.word	625
 358 00f0 C4090000 		.word	2500
 359 00f4 60D10000 		.word	53600
 360 00f8 A0252600 		.word	2500000
 361 00fc 409C0000 		.word	40000
 362              		.cfi_endproc
 363              	.LFE4:
 364              		.size	CySysClkIloCompensate, .-CySysClkIloCompensate
 365              		.section	.text.CySysWdtGetEnabledStatus,"ax",%progbits
 366              		.align	2
 367              		.global	CySysWdtGetEnabledStatus
 368              		.code	16
 369              		.thumb_func
 370              		.type	CySysWdtGetEnabledStatus, %function
 371              	CySysWdtGetEnabledStatus:
 372              	.LFB5:
 355:Generated_Source\PSoC4/CyLFClk.c **** 
 356:Generated_Source\PSoC4/CyLFClk.c **** 
 357:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
 358:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 359:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkIloEnabled
 360:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 361:Generated_Source\PSoC4/CyLFClk.c ****     *
 362:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
 363:Generated_Source\PSoC4/CyLFClk.c ****     * Reports the ILO enable state.
 364:Generated_Source\PSoC4/CyLFClk.c ****     *
 365:Generated_Source\PSoC4/CyLFClk.c ****     * \return
 366:Generated_Source\PSoC4/CyLFClk.c ****     * 1 if ILO is enabled, and 0 if ILO is disabled.
 367:Generated_Source\PSoC4/CyLFClk.c ****     *
 368:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
 369:Generated_Source\PSoC4/CyLFClk.c ****     ********************************************************************************/
 370:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkIloEnabled(void)
 371:Generated_Source\PSoC4/CyLFClk.c ****     {
 372:Generated_Source\PSoC4/CyLFClk.c ****         /* Prohibits writing to WDT registers and ILO/WCO registers when not equal to 0 */
 373:Generated_Source\PSoC4/CyLFClk.c ****         return ((0u != (CY_SYS_CLK_ILO_CONFIG_REG & (uint32)(CY_SYS_CLK_ILO_CONFIG_ENABLE))) ?
 374:Generated_Source\PSoC4/CyLFClk.c ****             (uint32) 1u :
 375:Generated_Source\PSoC4/CyLFClk.c ****             (uint32) 0u);
 376:Generated_Source\PSoC4/CyLFClk.c ****     }
 377:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2) */
 378:Generated_Source\PSoC4/CyLFClk.c **** 
 379:Generated_Source\PSoC4/CyLFClk.c **** 
 380:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2 && (!CY_IP_CPUSS))
 381:Generated_Source\PSoC4/CyLFClk.c **** /********************************************************************************
 382:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloTrim
 383:Generated_Source\PSoC4/CyLFClk.c **** *****************************************************************************//**
 384:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 385:Generated_Source\PSoC4/CyLFClk.c **** * The API trims the ILO frequency to +/- 10% accuracy range using accurate 
 386:Generated_Source\PSoC4/CyLFClk.c **** * SysClk.
 387:Generated_Source\PSoC4/CyLFClk.c **** *
 388:Generated_Source\PSoC4/CyLFClk.c **** * The API can be blocking or non-blocking depending on the value of the mode 
 389:Generated_Source\PSoC4/CyLFClk.c **** * parameter passed. The accuracy of ILO after trimming in parts per thousand 
 390:Generated_Source\PSoC4/CyLFClk.c **** * is returned through the iloAccuracyInPPT pointer. A positive number indicates 
 391:Generated_Source\PSoC4/CyLFClk.c **** * that the ILO is running fast and a negative number indicates that the ILO is 
 392:Generated_Source\PSoC4/CyLFClk.c **** * running slowly. This error is relative to the error in the reference clock 
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 15


 393:Generated_Source\PSoC4/CyLFClk.c **** * (SysClk), so the absolute error will be higher and depends on the accuracy 
 394:Generated_Source\PSoC4/CyLFClk.c **** * of the reference.
 395:Generated_Source\PSoC4/CyLFClk.c **** *
 396:Generated_Source\PSoC4/CyLFClk.c **** * The CySysClkIloStartMeasurement() API should be called prior to calling this 
 397:Generated_Source\PSoC4/CyLFClk.c **** * API. Otherwise it will return CYRET_INVALID_STATE as the measurement was not 
 398:Generated_Source\PSoC4/CyLFClk.c **** * started.
 399:Generated_Source\PSoC4/CyLFClk.c **** *
 400:Generated_Source\PSoC4/CyLFClk.c **** * \note SysClk should be sourced by IMO. Otherwise CySysClkIloTrim() and 
 401:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloCompensate() API can give incorrect results.
 402:Generated_Source\PSoC4/CyLFClk.c **** *
 403:Generated_Source\PSoC4/CyLFClk.c **** * \note If System clock frequency is changed in runtime, the CyDelayFreq() 
 404:Generated_Source\PSoC4/CyLFClk.c **** * with the appropriate parameter (Frequency of bus clock in Hertz) should be 
 405:Generated_Source\PSoC4/CyLFClk.c **** * called before next CySysClkIloCompensate() usage.
 406:Generated_Source\PSoC4/CyLFClk.c **** *
 407:Generated_Source\PSoC4/CyLFClk.c **** * \warning Do not enter deep sleep mode until the function returns CYRET_SUCCESS
 408:Generated_Source\PSoC4/CyLFClk.c **** * or CYRET_TIMEOUT.
 409:Generated_Source\PSoC4/CyLFClk.c **** *
 410:Generated_Source\PSoC4/CyLFClk.c **** * Available for all PSoC 4 devices with ILO trim capability. This excludes 
 411:Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4000 / PSoC 4100 / PSoC 4200 / PSoC 4000S / PSoC 4100S / PSoC
 412:Generated_Source\PSoC4/CyLFClk.c **** * Analog Coprocessor devices.
 413:Generated_Source\PSoC4/CyLFClk.c **** *
 414:Generated_Source\PSoC4/CyLFClk.c **** * \param mode
 415:Generated_Source\PSoC4/CyLFClk.c **** *  CY_SYS_CLK_BLOCKING -  The function does not return until the ILO is 
 416:Generated_Source\PSoC4/CyLFClk.c **** * within +/-10% accuracy range or time out has occurred.<br>
 417:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_NON_BLOCKING - The function returns immediately after 
 418:Generated_Source\PSoC4/CyLFClk.c **** * performing a single iteration of the trim process. The function should be 
 419:Generated_Source\PSoC4/CyLFClk.c **** * called repeatedly until the trimming is completed successfully.
 420:Generated_Source\PSoC4/CyLFClk.c **** *
 421:Generated_Source\PSoC4/CyLFClk.c **** * \param *iloAccuracyInPPT Pointer to an integer in which the trimmed ILO 
 422:Generated_Source\PSoC4/CyLFClk.c **** * accuracy will be returned.
 423:Generated_Source\PSoC4/CyLFClk.c **** *
 424:Generated_Source\PSoC4/CyLFClk.c **** * \details The value returned in *iloAccuracyInPPT pointer is not valid 
 425:Generated_Source\PSoC4/CyLFClk.c **** * until the function returns CYRET_SUCCESS. ILO accuracy in PPT is given by:
 426:Generated_Source\PSoC4/CyLFClk.c **** *
 427:Generated_Source\PSoC4/CyLFClk.c **** * IloAccuracyInPPT = ((MeasuredIloFreq - DesiredIloFreq) * 
 428:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_PERTHOUSAND) / DesiredIloFreq);
 429:Generated_Source\PSoC4/CyLFClk.c **** *
 430:Generated_Source\PSoC4/CyLFClk.c **** * DesiredIloFreq  = 32000, CY_SYS_CLK_PERTHOUSAND = 1000;
 431:Generated_Source\PSoC4/CyLFClk.c **** *
 432:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - Indicates trimming is complete. This value indicates 
 433:Generated_Source\PSoC4/CyLFClk.c **** * trimming is successful and iloAccuracyInPPT is within +/- 10%.
 434:Generated_Source\PSoC4/CyLFClk.c **** *
 435:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_STARTED - Indicates measurement is in progress. This is applicable 
 436:Generated_Source\PSoC4/CyLFClk.c **** * only for non-blocking mode.
 437:Generated_Source\PSoC4/CyLFClk.c **** *
 438:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_INVALID_STATE - Indicates trimming was unsuccessful. You should 
 439:Generated_Source\PSoC4/CyLFClk.c **** * call CySysClkIloStartMeasurement() before calling this API.
 440:Generated_Source\PSoC4/CyLFClk.c **** *
 441:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_TIMEOUT - Indicates trimming was unsuccessful. This is applicable 
 442:Generated_Source\PSoC4/CyLFClk.c **** * only for blocking mode. Timeout means the trimming was tried 5 times without 
 443:Generated_Source\PSoC4/CyLFClk.c **** * success (i.e. ILO accuracy > +/- 10%). The user can call the API again for 
 444:Generated_Source\PSoC4/CyLFClk.c **** * another try or wait for some time before calling it again (to let the system 
 445:Generated_Source\PSoC4/CyLFClk.c **** * to settle to another operating point change in temperature etc.) and continue 
 446:Generated_Source\PSoC4/CyLFClk.c **** * using the previous trim value till the next call.
 447:Generated_Source\PSoC4/CyLFClk.c **** *
 448:Generated_Source\PSoC4/CyLFClk.c **** **********************************************************************************/
 449:Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloTrim(uint32 mode, int32* iloAccuracyInPPT)
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 16


 450:Generated_Source\PSoC4/CyLFClk.c **** {
 451:Generated_Source\PSoC4/CyLFClk.c ****     uint32 timeOutClocks = CY_SYS_CLK_TIMEOUT;
 452:Generated_Source\PSoC4/CyLFClk.c ****     uint32 waitUntilCntr1Stops;
 453:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 454:Generated_Source\PSoC4/CyLFClk.c ****     uint32 checkStatus;
 455:Generated_Source\PSoC4/CyLFClk.c ****     cystatus returnStatus;
 456:Generated_Source\PSoC4/CyLFClk.c **** 
 457:Generated_Source\PSoC4/CyLFClk.c ****     checkStatus = (uint32) (CY_SYS_CLK_DFT_REG & (uint32) CY_SYS_TST_DDFT_CTRL_REG_DEFAULT_MASK);
 458:Generated_Source\PSoC4/CyLFClk.c **** 
 459:Generated_Source\PSoC4/CyLFClk.c ****     /* Check if DFT and CTRL registers were configures in CySysStartMeasurement*/
 460:Generated_Source\PSoC4/CyLFClk.c ****     if((checkStatus == CY_SYS_CLK_SEL_ILO_DFT_SOURCE) &&
 461:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
 462:Generated_Source\PSoC4/CyLFClk.c ****        (iloAccuracyInPPT != NULL))
 463:Generated_Source\PSoC4/CyLFClk.c ****     {
 464:Generated_Source\PSoC4/CyLFClk.c ****         if(CY_SYS_CLK_BLOCKING == mode)
 465:Generated_Source\PSoC4/CyLFClk.c ****         {
 466:Generated_Source\PSoC4/CyLFClk.c ****             waitUntilCntr1Stops = cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER;
 467:Generated_Source\PSoC4/CyLFClk.c ****             do
 468:Generated_Source\PSoC4/CyLFClk.c ****             {
 469:Generated_Source\PSoC4/CyLFClk.c ****                 /* Reload CNTR 1 count value for measuring cycle*/
 470:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CNT_REG1_REG = cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER; 
 471:Generated_Source\PSoC4/CyLFClk.c **** 
 472:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait until counter CNTR 1 will finish down-counting */
 473:Generated_Source\PSoC4/CyLFClk.c ****                 while (0u == (CY_SYS_CNT_REG1_REG & CY_SYS_CLK_ILO_CALIBR_COMPLETE_MASK))
 474:Generated_Source\PSoC4/CyLFClk.c ****                 {
 475:Generated_Source\PSoC4/CyLFClk.c ****                     waitUntilCntr1Stops--;
 476:Generated_Source\PSoC4/CyLFClk.c ****                     if (0u == waitUntilCntr1Stops)
 477:Generated_Source\PSoC4/CyLFClk.c ****                     {
 478:Generated_Source\PSoC4/CyLFClk.c ****                         break;
 479:Generated_Source\PSoC4/CyLFClk.c ****                     }
 480:Generated_Source\PSoC4/CyLFClk.c ****                 }
 481:Generated_Source\PSoC4/CyLFClk.c ****                 trimRunningStatus = CySysClkIloUpdateTrimReg(iloAccuracyInPPT);
 482:Generated_Source\PSoC4/CyLFClk.c ****                 timeOutClocks--;
 483:Generated_Source\PSoC4/CyLFClk.c **** 
 484:Generated_Source\PSoC4/CyLFClk.c ****             /* Untill ILO accuracy will be in range less than +/- 10% or timeout occurs*/
 485:Generated_Source\PSoC4/CyLFClk.c ****             } while((CYRET_SUCCESS != trimRunningStatus) && 
 486:Generated_Source\PSoC4/CyLFClk.c ****               (CYRET_INVALID_STATE != trimRunningStatus) && 
 487:Generated_Source\PSoC4/CyLFClk.c ****                                (0u != timeOutClocks));
 488:Generated_Source\PSoC4/CyLFClk.c **** 
 489:Generated_Source\PSoC4/CyLFClk.c ****             if (CYRET_SUCCESS == trimRunningStatus)
 490:Generated_Source\PSoC4/CyLFClk.c ****             {
 491:Generated_Source\PSoC4/CyLFClk.c ****                 returnStatus = CYRET_SUCCESS;
 492:Generated_Source\PSoC4/CyLFClk.c ****             }
 493:Generated_Source\PSoC4/CyLFClk.c ****             else
 494:Generated_Source\PSoC4/CyLFClk.c ****             {
 495:Generated_Source\PSoC4/CyLFClk.c ****                 if(0u == timeOutClocks)
 496:Generated_Source\PSoC4/CyLFClk.c ****                 {
 497:Generated_Source\PSoC4/CyLFClk.c ****                     trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 498:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_TIMEOUT;
 499:Generated_Source\PSoC4/CyLFClk.c ****                 }
 500:Generated_Source\PSoC4/CyLFClk.c ****                 else
 501:Generated_Source\PSoC4/CyLFClk.c ****                 {
 502:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_INVALID_STATE;
 503:Generated_Source\PSoC4/CyLFClk.c ****                 }
 504:Generated_Source\PSoC4/CyLFClk.c ****             }
 505:Generated_Source\PSoC4/CyLFClk.c ****         }
 506:Generated_Source\PSoC4/CyLFClk.c ****         /* Non - blocking mode */
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 17


 507:Generated_Source\PSoC4/CyLFClk.c ****         else
 508:Generated_Source\PSoC4/CyLFClk.c ****         {
 509:Generated_Source\PSoC4/CyLFClk.c ****             if (CY_SYS_CLK_TRIM_OR_COMP_FINISHED != trimRunningStatus)
 510:Generated_Source\PSoC4/CyLFClk.c ****             {
 511:Generated_Source\PSoC4/CyLFClk.c ****                 /* Checking if the counter CNTR 1 finished down-counting */
 512:Generated_Source\PSoC4/CyLFClk.c ****                 if(0u != (CY_SYS_CNT_REG1_REG & CY_SYS_CLK_ILO_CALIBR_COMPLETE_MASK))
 513:Generated_Source\PSoC4/CyLFClk.c ****                 {
 514:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CySysClkIloUpdateTrimReg(iloAccuracyInPPT);
 515:Generated_Source\PSoC4/CyLFClk.c ****                     trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 516:Generated_Source\PSoC4/CyLFClk.c ****                 }
 517:Generated_Source\PSoC4/CyLFClk.c ****                 else
 518:Generated_Source\PSoC4/CyLFClk.c ****                 {
 519:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_STARTED;
 520:Generated_Source\PSoC4/CyLFClk.c ****                 }
 521:Generated_Source\PSoC4/CyLFClk.c ****             }
 522:Generated_Source\PSoC4/CyLFClk.c ****             else
 523:Generated_Source\PSoC4/CyLFClk.c ****             {
 524:Generated_Source\PSoC4/CyLFClk.c ****                 /* Reload CNTR 1 count value for next measuring */
 525:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CNT_REG1_REG = cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER;
 526:Generated_Source\PSoC4/CyLFClk.c ****                 trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_STARTED;
 527:Generated_Source\PSoC4/CyLFClk.c ****                 returnStatus = CYRET_STARTED;
 528:Generated_Source\PSoC4/CyLFClk.c ****             }
 529:Generated_Source\PSoC4/CyLFClk.c ****         }
 530:Generated_Source\PSoC4/CyLFClk.c ****     }
 531:Generated_Source\PSoC4/CyLFClk.c ****     else
 532:Generated_Source\PSoC4/CyLFClk.c ****     {
 533:Generated_Source\PSoC4/CyLFClk.c ****         returnStatus = CYRET_INVALID_STATE;
 534:Generated_Source\PSoC4/CyLFClk.c ****     }
 535:Generated_Source\PSoC4/CyLFClk.c **** 
 536:Generated_Source\PSoC4/CyLFClk.c ****     return (returnStatus);
 537:Generated_Source\PSoC4/CyLFClk.c **** }
 538:Generated_Source\PSoC4/CyLFClk.c **** 
 539:Generated_Source\PSoC4/CyLFClk.c **** 
 540:Generated_Source\PSoC4/CyLFClk.c **** /********************************************************************************
 541:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloUpdateTrimReg
 542:Generated_Source\PSoC4/CyLFClk.c **** *********************************************************************************
 543:Generated_Source\PSoC4/CyLFClk.c **** *
 544:Generated_Source\PSoC4/CyLFClk.c **** * \internal
 545:Generated_Source\PSoC4/CyLFClk.c **** * Function calculates ILO accuracy and check is error range is higher than 
 546:Generated_Source\PSoC4/CyLFClk.c **** * +/- 10%. If Measured frequency is higher than +/- 10% function updates 
 547:Generated_Source\PSoC4/CyLFClk.c **** * ILO Trim register.
 548:Generated_Source\PSoC4/CyLFClk.c **** *
 549:Generated_Source\PSoC4/CyLFClk.c **** * \param
 550:Generated_Source\PSoC4/CyLFClk.c **** * iloAccuracyInPPT Pointer to an integer in which the trimmed ILO 
 551:Generated_Source\PSoC4/CyLFClk.c **** * accuracy will be returned. The value returned in this pointer is not valid 
 552:Generated_Source\PSoC4/CyLFClk.c **** * until the function returns CYRET_SUCCESS. If ILO frequency error is lower 
 553:Generated_Source\PSoC4/CyLFClk.c **** * than +/- 10% then the value returned in this pointer will be updated.
 554:Generated_Source\PSoC4/CyLFClk.c **** *
 555:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - Indicates that ILO frequency error is lower than 
 556:Generated_Source\PSoC4/CyLFClk.c **** * +/- 10% and no actions are required.
 557:Generated_Source\PSoC4/CyLFClk.c **** *
 558:Generated_Source\PSoC4/CyLFClk.c **** * \return  CYRET_STARTED - Indicates that ILO frequency error is higher than 
 559:Generated_Source\PSoC4/CyLFClk.c **** * +/- 10% and ILO Trim register was updated.
 560:Generated_Source\PSoC4/CyLFClk.c **** *
 561:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_INVALID_STATE - Indicates trimming was unsuccessful.
 562:Generated_Source\PSoC4/CyLFClk.c **** *
 563:Generated_Source\PSoC4/CyLFClk.c **** * Post #1 - To obtain 10% ILO accuracy the calculated accuracy should be equal 
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 18


 564:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_ERROR_RANGE = 5.6%. Error value should take to account IMO error of 
 565:Generated_Source\PSoC4/CyLFClk.c **** * +/-2% (+/-0.64kHz), trim step of 2.36kHz (+/-1.18kHz) and error while ILO 
 566:Generated_Source\PSoC4/CyLFClk.c **** * frequency measuring.
 567:Generated_Source\PSoC4/CyLFClk.c **** *
 568:Generated_Source\PSoC4/CyLFClk.c **** * \endinternal
 569:Generated_Source\PSoC4/CyLFClk.c **** *
 570:Generated_Source\PSoC4/CyLFClk.c **** **********************************************************************************/
 571:Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloUpdateTrimReg(int32* iloAccuracyInPPT)
 572:Generated_Source\PSoC4/CyLFClk.c **** {
 573:Generated_Source\PSoC4/CyLFClk.c ****     uint32 measuredIloFreq;
 574:Generated_Source\PSoC4/CyLFClk.c ****     uint32 currentIloTrimValue;
 575:Generated_Source\PSoC4/CyLFClk.c ****     int32 iloAccuracyValue;
 576:Generated_Source\PSoC4/CyLFClk.c ****     int32 trimStep;
 577:Generated_Source\PSoC4/CyLFClk.c ****     cystatus errorRangeStatus;
 578:Generated_Source\PSoC4/CyLFClk.c **** 
 579:Generated_Source\PSoC4/CyLFClk.c ****     if(0u != CY_SYS_CNT_REG2_REG)
 580:Generated_Source\PSoC4/CyLFClk.c ****     {
 581:Generated_Source\PSoC4/CyLFClk.c ****         measuredIloFreq = (CY_SYS_CNT_REG2_REG * cydelayFreqHz) / (cydelayFreqHz >> CY_SYS_CLK_SYS_
 582:Generated_Source\PSoC4/CyLFClk.c **** 
 583:Generated_Source\PSoC4/CyLFClk.c ****         /* Calculate value of error in PPT according to formula - 
 584:Generated_Source\PSoC4/CyLFClk.c ****         *       ((measuredIlofrequency - iloDesired frequency) * 1000 / iloDesired frequency) */
 585:Generated_Source\PSoC4/CyLFClk.c ****         iloAccuracyValue = (((int32) measuredIloFreq - (int32) CY_SYS_CLK_ILO_DESIRED_FREQ_HZ) * \
 586:Generated_Source\PSoC4/CyLFClk.c ****                             ((int32) CY_SYS_CLK_PERTHOUSAND)) / ((int32) CY_SYS_CLK_ILO_DESIRED_FRE
 587:Generated_Source\PSoC4/CyLFClk.c **** 
 588:Generated_Source\PSoC4/CyLFClk.c ****         /* Check if ILO accuracy is more than +/- CY_SYS_CLK_ERROR_RANGE. See post #1 of API descri
 589:Generated_Source\PSoC4/CyLFClk.c ****         if(CY_SYS_CLK_ERROR_RANGE < (uint32) (CY_SYS_CLK_ABS_MACRO(iloAccuracyValue)))
 590:Generated_Source\PSoC4/CyLFClk.c ****         {
 591:Generated_Source\PSoC4/CyLFClk.c ****             if (0 < iloAccuracyValue)
 592:Generated_Source\PSoC4/CyLFClk.c ****             {
 593:Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = (int32) (((iloAccuracyValue * (int32) CY_SYS_CLK_ERROR_COEF) + 
 594:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_HALF_OF_STEP) / CY_SYS_CLK_ERROR_STEP);
 595:Generated_Source\PSoC4/CyLFClk.c ****             }
 596:Generated_Source\PSoC4/CyLFClk.c ****             else
 597:Generated_Source\PSoC4/CyLFClk.c ****             {
 598:Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = (int32) (((iloAccuracyValue * (int32) CY_SYS_CLK_ERROR_COEF) - 
 599:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_HALF_OF_STEP) / CY_SYS_CLK_ERROR_STEP);
 600:Generated_Source\PSoC4/CyLFClk.c ****             }
 601:Generated_Source\PSoC4/CyLFClk.c ****             currentIloTrimValue = (CY_SYS_CLK_ILO_TRIM_REG & CY_SYS_CLK_ILO_TRIM_MASK);
 602:Generated_Source\PSoC4/CyLFClk.c ****             trimStep = (int32) currentIloTrimValue - trimStep;
 603:Generated_Source\PSoC4/CyLFClk.c **** 
 604:Generated_Source\PSoC4/CyLFClk.c ****             if(trimStep > CY_SYS_CLK_FOURBITS_MAX)
 605:Generated_Source\PSoC4/CyLFClk.c ****             {
 606:Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = CY_SYS_CLK_FOURBITS_MAX;
 607:Generated_Source\PSoC4/CyLFClk.c ****             }
 608:Generated_Source\PSoC4/CyLFClk.c ****             if(trimStep < 0)
 609:Generated_Source\PSoC4/CyLFClk.c ****             {
 610:Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = 0;
 611:Generated_Source\PSoC4/CyLFClk.c ****             }
 612:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_CLK_ILO_TRIM_REG = (CY_SYS_CLK_ILO_TRIM_REG & (uint32)(~CY_SYS_CLK_ILO_TRIM_MASK
 613:Generated_Source\PSoC4/CyLFClk.c ****                                                                  ((uint32) trimStep);
 614:Generated_Source\PSoC4/CyLFClk.c ****             errorRangeStatus = CYRET_STARTED;
 615:Generated_Source\PSoC4/CyLFClk.c ****         } /* Else return success because error is in +/- 10% range*/
 616:Generated_Source\PSoC4/CyLFClk.c ****         else
 617:Generated_Source\PSoC4/CyLFClk.c ****         {
 618:Generated_Source\PSoC4/CyLFClk.c ****             /* Write trimmed ILO accuracy through pointer. */
 619:Generated_Source\PSoC4/CyLFClk.c ****             *iloAccuracyInPPT = iloAccuracyValue;
 620:Generated_Source\PSoC4/CyLFClk.c ****             errorRangeStatus = CYRET_SUCCESS;
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 19


 621:Generated_Source\PSoC4/CyLFClk.c ****         }
 622:Generated_Source\PSoC4/CyLFClk.c ****     }
 623:Generated_Source\PSoC4/CyLFClk.c ****     else
 624:Generated_Source\PSoC4/CyLFClk.c ****     {
 625:Generated_Source\PSoC4/CyLFClk.c ****         errorRangeStatus = CYRET_INVALID_STATE;
 626:Generated_Source\PSoC4/CyLFClk.c ****     }
 627:Generated_Source\PSoC4/CyLFClk.c **** return (errorRangeStatus);
 628:Generated_Source\PSoC4/CyLFClk.c **** }
 629:Generated_Source\PSoC4/CyLFClk.c **** 
 630:Generated_Source\PSoC4/CyLFClk.c **** 
 631:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
 632:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloRestoreFactoryTrim
 633:Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
 634:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 635:Generated_Source\PSoC4/CyLFClk.c **** * Restores the ILO Trim Register to factory value.
 636:Generated_Source\PSoC4/CyLFClk.c **** *
 637:Generated_Source\PSoC4/CyLFClk.c **** * The CySysClkIloStartMeasurement() API should be called prior to 
 638:Generated_Source\PSoC4/CyLFClk.c **** * calling this API. Otherwise CYRET_UNKNOWN will be returned.
 639:Generated_Source\PSoC4/CyLFClk.c **** *
 640:Generated_Source\PSoC4/CyLFClk.c **** * Available for all PSoC 4 devices except for PSoC 4000 / PSoC 4100 / PSoC 4200 
 641:Generated_Source\PSoC4/CyLFClk.c **** * / PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor devices.
 642:Generated_Source\PSoC4/CyLFClk.c **** *
 643:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - Operation was successful. 
 644:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_UNKNOWN - CySysClkIloStartMeasurement() was not called 
 645:Generated_Source\PSoC4/CyLFClk.c **** * before this API. Hence the trim value cannot be updated.
 646:Generated_Source\PSoC4/CyLFClk.c **** *
 647:Generated_Source\PSoC4/CyLFClk.c **** ******************************************************************************/
 648:Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloRestoreFactoryTrim(void)
 649:Generated_Source\PSoC4/CyLFClk.c **** {
 650:Generated_Source\PSoC4/CyLFClk.c ****     cystatus returnStatus = CYRET_SUCCESS;
 651:Generated_Source\PSoC4/CyLFClk.c **** 
 652:Generated_Source\PSoC4/CyLFClk.c ****     /* Check was defaultIloTrimRegValue modified in CySysClkIloStartMeasurement */
 653:Generated_Source\PSoC4/CyLFClk.c ****     if(CY_SYS_CLK_ILO_TRIM_DEFAULT_VALUE != defaultIloTrimRegValue)
 654:Generated_Source\PSoC4/CyLFClk.c ****         {
 655:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_CLK_ILO_TRIM_REG = ((CY_SYS_CLK_ILO_TRIM_REG & (uint32)(~CY_SYS_CLK_ILO_TRIM_MAS
 656:Generated_Source\PSoC4/CyLFClk.c ****                                        (defaultIloTrimRegValue & CY_SYS_CLK_ILO_TRIM_MASK));
 657:Generated_Source\PSoC4/CyLFClk.c ****         }
 658:Generated_Source\PSoC4/CyLFClk.c ****         else
 659:Generated_Source\PSoC4/CyLFClk.c ****         {
 660:Generated_Source\PSoC4/CyLFClk.c ****             returnStatus = CYRET_UNKNOWN;
 661:Generated_Source\PSoC4/CyLFClk.c ****         }
 662:Generated_Source\PSoC4/CyLFClk.c **** 
 663:Generated_Source\PSoC4/CyLFClk.c ****         return (returnStatus);
 664:Generated_Source\PSoC4/CyLFClk.c **** }
 665:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2 && (!CY_IP_CPUSS)) */
 666:Generated_Source\PSoC4/CyLFClk.c **** 
 667:Generated_Source\PSoC4/CyLFClk.c **** 
 668:Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_WCO && CY_IP_SRSSV2)
 669:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 670:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkGetLfclkSource
 671:Generated_Source\PSoC4/CyLFClk.c ****     ********************************************************************************
 672:Generated_Source\PSoC4/CyLFClk.c ****     *
 673:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
 674:Generated_Source\PSoC4/CyLFClk.c ****     *  Gets the clock source for the LFCLK clock.
 675:Generated_Source\PSoC4/CyLFClk.c ****     *  The function is applicable only for PSoC 4100 BLE / PSoC 4200 BLE / 
 676:Generated_Source\PSoC4/CyLFClk.c ****     *  PSoC 4100M / PSoC 4200M / PSoC 4200L.
 677:Generated_Source\PSoC4/CyLFClk.c ****     *
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 20


 678:Generated_Source\PSoC4/CyLFClk.c ****     * \return The LFCLK source:
 679:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_LFCLK_SRC_ILO Internal Low Frequency (32 kHz) Oscillator (ILO)
 680:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_LFCLK_SRC_WCO Low Frequency Watch Crystal Oscillator (WCO)
 681:Generated_Source\PSoC4/CyLFClk.c ****     *
 682:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
 683:Generated_Source\PSoC4/CyLFClk.c ****     *
 684:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 685:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkGetLfclkSource(void)
 686:Generated_Source\PSoC4/CyLFClk.c ****     {
 687:Generated_Source\PSoC4/CyLFClk.c ****         uint32 lfclkSource;
 688:Generated_Source\PSoC4/CyLFClk.c ****         lfclkSource = CY_SYS_WDT_CONFIG_REG & CY_SYS_CLK_LFCLK_SEL_MASK;
 689:Generated_Source\PSoC4/CyLFClk.c ****         return (lfclkSource);
 690:Generated_Source\PSoC4/CyLFClk.c ****     }
 691:Generated_Source\PSoC4/CyLFClk.c **** 
 692:Generated_Source\PSoC4/CyLFClk.c **** 
 693:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 694:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkSetLfclkSource
 695:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 696:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 697:Generated_Source\PSoC4/CyLFClk.c ****     *  Sets the clock source for the LFCLK clock.
 698:Generated_Source\PSoC4/CyLFClk.c ****     *
 699:Generated_Source\PSoC4/CyLFClk.c ****     * The switch between LFCLK sources must be done between the positive edges of
 700:Generated_Source\PSoC4/CyLFClk.c ****     * LFCLK, because the glitch risk is around the LFCLK positive edge. To ensure
 701:Generated_Source\PSoC4/CyLFClk.c ****     * that the switch can be done safely, the WDT counter value is read until it
 702:Generated_Source\PSoC4/CyLFClk.c ****     * changes.
 703:Generated_Source\PSoC4/CyLFClk.c ****     *
 704:Generated_Source\PSoC4/CyLFClk.c ****     * That means that the positive edge just finished and the switch is performed.
 705:Generated_Source\PSoC4/CyLFClk.c ****     * The enabled WDT counter is used for that purpose. If no counters are enabled,
 706:Generated_Source\PSoC4/CyLFClk.c ****     * counter 0 is enabled. And after the LFCLK source is switched, counter 0
 707:Generated_Source\PSoC4/CyLFClk.c ****     * configuration is restored.
 708:Generated_Source\PSoC4/CyLFClk.c ****     *
 709:Generated_Source\PSoC4/CyLFClk.c ****     *  The function is applicable only for devices with more than one source for 
 710:Generated_Source\PSoC4/CyLFClk.c ****     * LFCLK - PSoC 4100 BLE / PSoC 4200 BLE / PRoC BLE / PSoC 4100M / PSoC 4200M / 
 711:Generated_Source\PSoC4/CyLFClk.c ****     * PSoC 4200L.
 712:Generated_Source\PSoC4/CyLFClk.c ****     *
 713:Generated_Source\PSoC4/CyLFClk.c ****     * \note For PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor devices LFCLK can
 714:Generated_Source\PSoC4/CyLFClk.c ****     * only be sourced from ILO even though WCO is available.
 715:Generated_Source\PSoC4/CyLFClk.c ****     *
 716:Generated_Source\PSoC4/CyLFClk.c ****     * \param
 717:Generated_Source\PSoC4/CyLFClk.c ****     * source
 718:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_LFCLK_SRC_ILO - Internal Low Frequency (32 kHz) 
 719:Generated_Source\PSoC4/CyLFClk.c ****     * Oscillator (ILO).<br>
 720:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_LFCLK_SRC_WCO - Low Frequency Watch Crystal Oscillator (WCO).
 721:Generated_Source\PSoC4/CyLFClk.c ****     *
 722:Generated_Source\PSoC4/CyLFClk.c ****     * \details
 723:Generated_Source\PSoC4/CyLFClk.c ****     * This function has no effect if WDT is locked (CySysWdtLock() is called). 
 724:Generated_Source\PSoC4/CyLFClk.c ****     * Call CySysWdtUnlock() to unlock WDT.
 725:Generated_Source\PSoC4/CyLFClk.c ****     *
 726:Generated_Source\PSoC4/CyLFClk.c ****     * Both the current source and the new source must be running and stable before
 727:Generated_Source\PSoC4/CyLFClk.c ****     * calling this function.
 728:Generated_Source\PSoC4/CyLFClk.c ****     *
 729:Generated_Source\PSoC4/CyLFClk.c ****     * Changing the LFCLK clock source may change the LFCLK clock frequency and
 730:Generated_Source\PSoC4/CyLFClk.c ****     * affect the functionality that uses this clock. For example, watchdog timer
 731:Generated_Source\PSoC4/CyLFClk.c ****     * "uses this clock" or "this clock uses" (WDT) is clocked by LFCLK.
 732:Generated_Source\PSoC4/CyLFClk.c ****     *
 733:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 734:Generated_Source\PSoC4/CyLFClk.c ****     void CySysClkSetLfclkSource(uint32 source)
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 21


 735:Generated_Source\PSoC4/CyLFClk.c ****     {
 736:Generated_Source\PSoC4/CyLFClk.c ****         uint8  interruptState;
 737:Generated_Source\PSoC4/CyLFClk.c **** 
 738:Generated_Source\PSoC4/CyLFClk.c ****         if (CySysClkGetLfclkSource() != source)
 739:Generated_Source\PSoC4/CyLFClk.c ****         {
 740:Generated_Source\PSoC4/CyLFClk.c ****             interruptState = CyEnterCriticalSection();
 741:Generated_Source\PSoC4/CyLFClk.c ****             CySysClkLfclkPosedgeCatch();
 742:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = (CY_SYS_WDT_CONFIG_REG & (uint32)(~CY_SYS_CLK_LFCLK_SEL_MASK)) 
 743:Generated_Source\PSoC4/CyLFClk.c ****                                     (source & CY_SYS_CLK_LFCLK_SEL_MASK);
 744:Generated_Source\PSoC4/CyLFClk.c ****             CySysClkLfclkPosedgeRestore();
 745:Generated_Source\PSoC4/CyLFClk.c ****             CyExitCriticalSection(interruptState);
 746:Generated_Source\PSoC4/CyLFClk.c ****         }
 747:Generated_Source\PSoC4/CyLFClk.c ****     }
 748:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_WCO && CY_IP_SRSSV2) */
 749:Generated_Source\PSoC4/CyLFClk.c **** 
 750:Generated_Source\PSoC4/CyLFClk.c **** 
 751:Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_WCO)
 752:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 753:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoStart
 754:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 755:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 756:Generated_Source\PSoC4/CyLFClk.c ****     *  Enables Watch Crystal Oscillator (WCO).
 757:Generated_Source\PSoC4/CyLFClk.c ****     * 
 758:Generated_Source\PSoC4/CyLFClk.c ****     * This API enables WCO which is used as a source for LFCLK. Similar to ILO, 
 759:Generated_Source\PSoC4/CyLFClk.c ****     * WCO is also available in all modes except Hibernate and Stop modes.
 760:Generated_Source\PSoC4/CyLFClk.c ****     * \note In PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor devices
 761:Generated_Source\PSoC4/CyLFClk.c ****     * WCO cannot be a source for the LFCLK. 
 762:Generated_Source\PSoC4/CyLFClk.c ****     *
 763:Generated_Source\PSoC4/CyLFClk.c ****     *  WCO is always enabled in High Power Mode (HPM). Refer to the device
 764:Generated_Source\PSoC4/CyLFClk.c ****     *  datasheet for the  WCO startup time. Once WCO becomes stable it can be
 765:Generated_Source\PSoC4/CyLFClk.c ****     *  switched to Low Power Mode (LPM). Note that oscillator can be unstable
 766:Generated_Source\PSoC4/CyLFClk.c ****     *  during a switch and hence its output should not be used at that moment.
 767:Generated_Source\PSoC4/CyLFClk.c ****     *
 768:Generated_Source\PSoC4/CyLFClk.c ****     *  The CySysClkWcoSetPowerMode() function configures the WCO power mode.
 769:Generated_Source\PSoC4/CyLFClk.c ****     *
 770:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 771:Generated_Source\PSoC4/CyLFClk.c ****     void CySysClkWcoStart(void)
 772:Generated_Source\PSoC4/CyLFClk.c ****     {
 773:Generated_Source\PSoC4/CyLFClk.c ****         CySysClkWcoSetHighPowerMode();
 774:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_WCO_CONFIG_REG |= CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE;
 775:Generated_Source\PSoC4/CyLFClk.c ****     }
 776:Generated_Source\PSoC4/CyLFClk.c **** 
 777:Generated_Source\PSoC4/CyLFClk.c **** 
 778:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 779:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoStop
 780:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 781:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 782:Generated_Source\PSoC4/CyLFClk.c ****     * Disables the 32 KHz Crystal Oscillator.
 783:Generated_Source\PSoC4/CyLFClk.c ****     *
 784:Generated_Source\PSoC4/CyLFClk.c ****     * API switch of WCO.
 785:Generated_Source\PSoC4/CyLFClk.c ****     * \note PSoC 4100S / PSoC Analog Coprocessor: WCO is required for DeepSleep 
 786:Generated_Source\PSoC4/CyLFClk.c ****     * Timer's operation.
 787:Generated_Source\PSoC4/CyLFClk.c ****     *
 788:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 789:Generated_Source\PSoC4/CyLFClk.c ****     void  CySysClkWcoStop(void)
 790:Generated_Source\PSoC4/CyLFClk.c ****     {
 791:Generated_Source\PSoC4/CyLFClk.c ****         #if (CY_IP_SRSSV2)
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 22


 792:Generated_Source\PSoC4/CyLFClk.c ****             uint8  interruptState;
 793:Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (CY_IP_SRSSV2) */
 794:Generated_Source\PSoC4/CyLFClk.c **** 
 795:Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysClkWcoEnabled())
 796:Generated_Source\PSoC4/CyLFClk.c ****         {
 797:Generated_Source\PSoC4/CyLFClk.c ****             #if (CY_IP_SRSSV2)
 798:Generated_Source\PSoC4/CyLFClk.c ****                 if (CY_SYS_CLK_LFCLK_SRC_WCO == CySysClkGetLfclkSource())
 799:Generated_Source\PSoC4/CyLFClk.c ****                 {
 800:Generated_Source\PSoC4/CyLFClk.c ****                     interruptState = CyEnterCriticalSection();
 801:Generated_Source\PSoC4/CyLFClk.c ****                     CySysClkLfclkPosedgeCatch();
 802:Generated_Source\PSoC4/CyLFClk.c ****                     CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE;
 803:Generated_Source\PSoC4/CyLFClk.c ****                     CySysClkLfclkPosedgeRestore();
 804:Generated_Source\PSoC4/CyLFClk.c ****                     CyExitCriticalSection(interruptState);
 805:Generated_Source\PSoC4/CyLFClk.c ****                 }
 806:Generated_Source\PSoC4/CyLFClk.c ****                 else /* Safe to disable - shortened pulse does not impact peripheral */
 807:Generated_Source\PSoC4/CyLFClk.c ****             #endif /* (CY_IP_SRSSV2) */
 808:Generated_Source\PSoC4/CyLFClk.c ****             {
 809:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE;
 810:Generated_Source\PSoC4/CyLFClk.c ****             }
 811:Generated_Source\PSoC4/CyLFClk.c ****         } /* Otherwise do nothing. WCO configuration cannot be changed. */
 812:Generated_Source\PSoC4/CyLFClk.c ****     }
 813:Generated_Source\PSoC4/CyLFClk.c **** 
 814:Generated_Source\PSoC4/CyLFClk.c **** 
 815:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 816:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoEnabled
 817:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 818:Generated_Source\PSoC4/CyLFClk.c ****     * \internal Reports the WCO enable state.
 819:Generated_Source\PSoC4/CyLFClk.c ****     *
 820:Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 if WCO is enabled
 821:Generated_Source\PSoC4/CyLFClk.c ****     * \return 0 if WCO is disabled.
 822:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
 823:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 824:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysClkWcoEnabled(void)
 825:Generated_Source\PSoC4/CyLFClk.c ****     {
 826:Generated_Source\PSoC4/CyLFClk.c ****         return ((0u != (CY_SYS_CLK_WCO_CONFIG_REG & (uint32)(CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE))) ?
 827:Generated_Source\PSoC4/CyLFClk.c ****                 (uint32) 1u :
 828:Generated_Source\PSoC4/CyLFClk.c ****                 (uint32) 0u);
 829:Generated_Source\PSoC4/CyLFClk.c ****     }
 830:Generated_Source\PSoC4/CyLFClk.c **** 
 831:Generated_Source\PSoC4/CyLFClk.c **** 
 832:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 833:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoSetPowerMode
 834:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 835:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 836:Generated_Source\PSoC4/CyLFClk.c ****     * Sets the power mode for the 32 KHz WCO.
 837:Generated_Source\PSoC4/CyLFClk.c ****     *
 838:Generated_Source\PSoC4/CyLFClk.c ****     * By default (if this function is not called), the WCO is in High power mode 
 839:Generated_Source\PSoC4/CyLFClk.c ****     * during Active and device's low power modes
 840:Generated_Source\PSoC4/CyLFClk.c ****     *
 841:Generated_Source\PSoC4/CyLFClk.c ****     * \param mode
 842:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_WCO_HPM - The High Power mode.<br>
 843:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_WCO_LPM - The Low Power mode.
 844:Generated_Source\PSoC4/CyLFClk.c ****     *
 845:Generated_Source\PSoC4/CyLFClk.c ****     * \return A previous power mode. The same as the parameters.
 846:Generated_Source\PSoC4/CyLFClk.c ****     *
 847:Generated_Source\PSoC4/CyLFClk.c ****     * \note
 848:Generated_Source\PSoC4/CyLFClk.c ****     * The WCO Low Power mode is applicable for PSoC 4100 BLE / PSoC 4200 BLE devices.
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 23


 849:Generated_Source\PSoC4/CyLFClk.c ****     *
 850:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 851:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysClkWcoSetPowerMode(uint32 mode)
 852:Generated_Source\PSoC4/CyLFClk.c ****     {
 853:Generated_Source\PSoC4/CyLFClk.c ****         uint32 powerModeStatus;
 854:Generated_Source\PSoC4/CyLFClk.c **** 
 855:Generated_Source\PSoC4/CyLFClk.c ****         powerModeStatus = CY_SYS_CLK_WCO_CONFIG_REG & CY_SYS_CLK_WCO_CONFIG_LPM_EN;
 856:Generated_Source\PSoC4/CyLFClk.c **** 
 857:Generated_Source\PSoC4/CyLFClk.c ****         switch(mode)
 858:Generated_Source\PSoC4/CyLFClk.c ****         {
 859:Generated_Source\PSoC4/CyLFClk.c ****         case CY_SYS_CLK_WCO_HPM:
 860:Generated_Source\PSoC4/CyLFClk.c ****                 CySysClkWcoSetHighPowerMode();
 861:Generated_Source\PSoC4/CyLFClk.c ****             break;
 862:Generated_Source\PSoC4/CyLFClk.c **** 
 863:Generated_Source\PSoC4/CyLFClk.c ****         #if(CY_IP_BLESS)
 864:Generated_Source\PSoC4/CyLFClk.c ****             case CY_SYS_CLK_WCO_LPM:
 865:Generated_Source\PSoC4/CyLFClk.c ****                     CySysClkWcoSetLowPowerMode();
 866:Generated_Source\PSoC4/CyLFClk.c ****                 break;
 867:Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (CY_IP_BLESS) */
 868:Generated_Source\PSoC4/CyLFClk.c **** 
 869:Generated_Source\PSoC4/CyLFClk.c ****         default:
 870:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
 871:Generated_Source\PSoC4/CyLFClk.c ****             break;
 872:Generated_Source\PSoC4/CyLFClk.c ****         }
 873:Generated_Source\PSoC4/CyLFClk.c **** 
 874:Generated_Source\PSoC4/CyLFClk.c ****         return (powerModeStatus);
 875:Generated_Source\PSoC4/CyLFClk.c ****     }
 876:Generated_Source\PSoC4/CyLFClk.c **** 
 877:Generated_Source\PSoC4/CyLFClk.c **** 
 878:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 879:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoClockOutSelect
 880:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 881:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 882:Generated_Source\PSoC4/CyLFClk.c ****     * Selects the WCO block output source.
 883:Generated_Source\PSoC4/CyLFClk.c ****     *
 884:Generated_Source\PSoC4/CyLFClk.c ****     * In addition to generating 32.768 kHz clock from external crystals, WCO 
 885:Generated_Source\PSoC4/CyLFClk.c ****     * can be sourced by external clock source using wco_out pin. The API help to
 886:Generated_Source\PSoC4/CyLFClk.c ****     * lets you select between the sources: External crystal or external pin.
 887:Generated_Source\PSoC4/CyLFClk.c ****     *
 888:Generated_Source\PSoC4/CyLFClk.c ****     * If you want to use external pin to drive WCO the next procedure is required:
 889:Generated_Source\PSoC4/CyLFClk.c ****     * <br> 1) Disable the WCO.
 890:Generated_Source\PSoC4/CyLFClk.c ****     * <br> 2) Drive the wco_out pin to an external signal source.
 891:Generated_Source\PSoC4/CyLFClk.c ****     * <br> 3) Call CySysClkWcoClockOutSelect(CY_SYS_CLK_WCO_SEL_PIN).
 892:Generated_Source\PSoC4/CyLFClk.c ****     * <br> 4) Enable the WCO and wait for 15 us before clocking the XO pad at the high 
 893:Generated_Source\PSoC4/CyLFClk.c ****     * potential. Let's assume you are using the 1.6v clock amplitude, then the
 894:Generated_Source\PSoC4/CyLFClk.c ****     * sequence would start at 1.6v, then 0v, then 1.6v etc at a chosen frequency.
 895:Generated_Source\PSoC4/CyLFClk.c ****     *
 896:Generated_Source\PSoC4/CyLFClk.c ****     * If you want to use WCO after using an external pin source:
 897:Generated_Source\PSoC4/CyLFClk.c ****     * <br> 1) Disable the WCO.
 898:Generated_Source\PSoC4/CyLFClk.c ****     * <br> 2) Drive off wco_out pin with external signal source.
 899:Generated_Source\PSoC4/CyLFClk.c ****     * <br> 3) Call CySysClkWcoClockOutSelect(CY_SYS_CLK_WCO_SEL_CRYSTAL).
 900:Generated_Source\PSoC4/CyLFClk.c ****     * <br> 4) Enable the WCO.
 901:Generated_Source\PSoC4/CyLFClk.c ****     *
 902:Generated_Source\PSoC4/CyLFClk.c ****     * \warning 
 903:Generated_Source\PSoC4/CyLFClk.c ****     * Do not use the oscillator output clock prior to a 15uS delay in your system.
 904:Generated_Source\PSoC4/CyLFClk.c ****     * There are no limitations on the external clock frequency.
 905:Generated_Source\PSoC4/CyLFClk.c ****     * \warning 
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 24


 906:Generated_Source\PSoC4/CyLFClk.c ****     * When external clock source was selected to drive WCO block the IMO can be 
 907:Generated_Source\PSoC4/CyLFClk.c ****     * trimmed only when external clock source period is equal to WCO external
 908:Generated_Source\PSoC4/CyLFClk.c ****     * crystal period. Also external clock source accuracy should be higher 
 909:Generated_Source\PSoC4/CyLFClk.c ****     * or equal to WCO external crystal accuracy.
 910:Generated_Source\PSoC4/CyLFClk.c ****     *
 911:Generated_Source\PSoC4/CyLFClk.c ****     * \param clockSel
 912:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_WCO_SEL_CRYSTAL - Selects External crystal as clock 
 913:Generated_Source\PSoC4/CyLFClk.c ****     * source of WCO.<br>
 914:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_WCO_SEL_PIN - Selects External clock input on wco_in pin as 
 915:Generated_Source\PSoC4/CyLFClk.c ****     * clock source of WCO.
 916:Generated_Source\PSoC4/CyLFClk.c ****     *
 917:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 918:Generated_Source\PSoC4/CyLFClk.c ****     void CySysClkWcoClockOutSelect(uint32 clockSel)
 919:Generated_Source\PSoC4/CyLFClk.c ****     {
 920:Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysClkWcoEnabled())
 921:Generated_Source\PSoC4/CyLFClk.c ****         {
 922:Generated_Source\PSoC4/CyLFClk.c ****             if (1u >= clockSel)
 923:Generated_Source\PSoC4/CyLFClk.c ****             {
 924:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_WCO_CONFIG_REG = (CY_SYS_CLK_WCO_CONFIG_REG & (uint32)(~CY_SYS_CLK_WCO_S
 925:Generated_Source\PSoC4/CyLFClk.c ****                                         (clockSel << CY_SYS_CLK_WCO_SELECT_PIN_OFFSET);
 926:Generated_Source\PSoC4/CyLFClk.c ****             }
 927:Generated_Source\PSoC4/CyLFClk.c ****             else
 928:Generated_Source\PSoC4/CyLFClk.c ****             {
 929:Generated_Source\PSoC4/CyLFClk.c ****                 CYASSERT(0u != 0u);
 930:Generated_Source\PSoC4/CyLFClk.c ****             }
 931:Generated_Source\PSoC4/CyLFClk.c ****         }
 932:Generated_Source\PSoC4/CyLFClk.c ****     }
 933:Generated_Source\PSoC4/CyLFClk.c **** #endif  /* (CY_IP_WCO) */
 934:Generated_Source\PSoC4/CyLFClk.c **** 
 935:Generated_Source\PSoC4/CyLFClk.c **** 
 936:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
 937:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 938:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtLock
 939:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 940:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 941:Generated_Source\PSoC4/CyLFClk.c ****     * Locks out configuration changes to the Watchdog timer registers and ILO
 942:Generated_Source\PSoC4/CyLFClk.c ****     * configuration register.
 943:Generated_Source\PSoC4/CyLFClk.c ****     *
 944:Generated_Source\PSoC4/CyLFClk.c ****     * After this function is called, ILO clock can't be disabled until
 945:Generated_Source\PSoC4/CyLFClk.c ****     * CySysWdtUnlock() is called.
 946:Generated_Source\PSoC4/CyLFClk.c ****     *
 947:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 948:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtLock(void)
 949:Generated_Source\PSoC4/CyLFClk.c ****     {
 950:Generated_Source\PSoC4/CyLFClk.c ****         uint8 interruptState;
 951:Generated_Source\PSoC4/CyLFClk.c ****         interruptState = CyEnterCriticalSection();
 952:Generated_Source\PSoC4/CyLFClk.c **** 
 953:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_SELECT_REG = (CY_SYS_CLK_SELECT_REG & (uint32)(~CY_SYS_WDT_CLK_LOCK_BITS_MASK)) 
 954:Generated_Source\PSoC4/CyLFClk.c ****                  CY_SYS_WDT_CLK_LOCK_BITS_MASK;
 955:Generated_Source\PSoC4/CyLFClk.c **** 
 956:Generated_Source\PSoC4/CyLFClk.c ****         CyExitCriticalSection(interruptState);
 957:Generated_Source\PSoC4/CyLFClk.c ****     }
 958:Generated_Source\PSoC4/CyLFClk.c **** 
 959:Generated_Source\PSoC4/CyLFClk.c **** 
 960:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 961:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtLocked
 962:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 25


 963:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
 964:Generated_Source\PSoC4/CyLFClk.c ****     * Reports the WDT lock state.
 965:Generated_Source\PSoC4/CyLFClk.c ****     *
 966:Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 - WDT is locked, and 0 - WDT is unlocked.
 967:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
 968:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 969:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysWdtLocked(void)
 970:Generated_Source\PSoC4/CyLFClk.c ****     {
 971:Generated_Source\PSoC4/CyLFClk.c ****         /* Prohibits writing to WDT registers and ILO/WCO registers when not equal 0 */
 972:Generated_Source\PSoC4/CyLFClk.c ****         return ((0u != (CY_SYS_CLK_SELECT_REG & (uint32)(CY_SYS_WDT_CLK_LOCK_BITS_MASK))) ? (uint32
 973:Generated_Source\PSoC4/CyLFClk.c ****     }
 974:Generated_Source\PSoC4/CyLFClk.c **** 
 975:Generated_Source\PSoC4/CyLFClk.c **** 
 976:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 977:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtUnlock
 978:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 979:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 980:Generated_Source\PSoC4/CyLFClk.c ****     *  Unlocks the Watchdog Timer configuration register.
 981:Generated_Source\PSoC4/CyLFClk.c ****     *
 982:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 983:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtUnlock(void)
 984:Generated_Source\PSoC4/CyLFClk.c ****     {
 985:Generated_Source\PSoC4/CyLFClk.c ****         uint8 interruptState;
 986:Generated_Source\PSoC4/CyLFClk.c ****         interruptState = CyEnterCriticalSection();
 987:Generated_Source\PSoC4/CyLFClk.c **** 
 988:Generated_Source\PSoC4/CyLFClk.c ****         /* Removing WDT lock requires two writes */
 989:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & (uint32)(~CY_SYS_WDT_CLK_LOCK_BITS_MASK))
 990:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_WDT_CLK_LOCK_BIT0);
 991:Generated_Source\PSoC4/CyLFClk.c **** 
 992:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & (uint32)(~CY_SYS_WDT_CLK_LOCK_BITS_MASK))
 993:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_WDT_CLK_LOCK_BIT1);
 994:Generated_Source\PSoC4/CyLFClk.c **** 
 995:Generated_Source\PSoC4/CyLFClk.c ****         CyExitCriticalSection(interruptState);
 996:Generated_Source\PSoC4/CyLFClk.c ****     }
 997:Generated_Source\PSoC4/CyLFClk.c **** 
 998:Generated_Source\PSoC4/CyLFClk.c **** 
 999:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1000:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetEnabledStatus
1001:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1002:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1003:Generated_Source\PSoC4/CyLFClk.c ****     *  Reads the enabled status of one of the three WDT counters.
1004:Generated_Source\PSoC4/CyLFClk.c ****     *
1005:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum: Valid range [0-2].  The number of the WDT counter.
1006:Generated_Source\PSoC4/CyLFClk.c ****     *
1007:Generated_Source\PSoC4/CyLFClk.c ****     * \return The status of the WDT counter:
1008:Generated_Source\PSoC4/CyLFClk.c ****     * \return 0 - If the counter is disabled.
1009:Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 - If the counter is enabled.
1010:Generated_Source\PSoC4/CyLFClk.c ****     *
1011:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1012:Generated_Source\PSoC4/CyLFClk.c ****     * This function returns an actual WDT counter status from the status register. It may
1013:Generated_Source\PSoC4/CyLFClk.c ****     * take up to 3 LFCLK cycles for the WDT status register to contain actual data
1014:Generated_Source\PSoC4/CyLFClk.c ****     * after the WDT counter is enabled.
1015:Generated_Source\PSoC4/CyLFClk.c ****     *
1016:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1017:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetEnabledStatus(uint32 counterNum)
1018:Generated_Source\PSoC4/CyLFClk.c ****     {
1019:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT(counterNum < CY_SYS_WDT_COUNTERS_MAX);
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 26


1020:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_CONTROL_REG >> ((CY_SYS_WDT_CNT_SHIFT * counterNum) + CY_SYS_WDT_CNT_ST
1021:Generated_Source\PSoC4/CyLFClk.c ****     }
1022:Generated_Source\PSoC4/CyLFClk.c **** 
1023:Generated_Source\PSoC4/CyLFClk.c **** 
1024:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1025:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetMode
1026:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1027:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1028:Generated_Source\PSoC4/CyLFClk.c ****     * Writes the mode of one of the three WDT counters.
1029:Generated_Source\PSoC4/CyLFClk.c ****     *
1030:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum: Valid range [0-2].  The number of the WDT counter.
1031:Generated_Source\PSoC4/CyLFClk.c ****     *
1032:Generated_Source\PSoC4/CyLFClk.c ****     * \param mode
1033:Generated_Source\PSoC4/CyLFClk.c ****     *  CY_SYS_WDT_MODE_NONE - Free running.<br>
1034:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_MODE_INT - The interrupt generated on match for counter 0
1035:Generated_Source\PSoC4/CyLFClk.c ****     * and 1, and on bit toggle for counter 2.<br>
1036:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_MODE_RESET - Reset on match (valid for counter 0 and 1 only).<br>
1037:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_MODE_INT_RESET - Generate an interrupt.  Generate a reset on
1038:Generated_Source\PSoC4/CyLFClk.c ****     * the 3rd non-handled interrupt (valid for counter 0 and counter 1 only).
1039:Generated_Source\PSoC4/CyLFClk.c ****     *
1040:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1041:Generated_Source\PSoC4/CyLFClk.c ****     * WDT counter counterNum should be disabled to set a mode. Otherwise, this
1042:Generated_Source\PSoC4/CyLFClk.c ****     * function call has no effect. If the specified counter is enabled,
1043:Generated_Source\PSoC4/CyLFClk.c ****     * call the CySysWdtDisable() function with the corresponding parameter to
1044:Generated_Source\PSoC4/CyLFClk.c ****     * disable the specified counter and wait for it to stop.
1045:Generated_Source\PSoC4/CyLFClk.c ****     *
1046:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1047:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetMode(uint32 counterNum, uint32 mode)
1048:Generated_Source\PSoC4/CyLFClk.c ****     {
1049:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1050:Generated_Source\PSoC4/CyLFClk.c **** 
1051:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT(counterNum < CY_SYS_WDT_COUNTERS_MAX);
1052:Generated_Source\PSoC4/CyLFClk.c **** 
1053:Generated_Source\PSoC4/CyLFClk.c ****         if(0u == CySysWdtGetEnabledStatus(counterNum))
1054:Generated_Source\PSoC4/CyLFClk.c ****         {
1055:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG &
1056:Generated_Source\PSoC4/CyLFClk.c ****                                 (uint32)~((uint32)(CY_SYS_WDT_MODE_MASK << (counterNum * CY_SYS_WDT
1057:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= (uint32)((mode & CY_SYS_WDT_MODE_MASK) << (counterNum * CY_SYS_WDT_CN
1058:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
1059:Generated_Source\PSoC4/CyLFClk.c ****         }
1060:Generated_Source\PSoC4/CyLFClk.c ****     }
1061:Generated_Source\PSoC4/CyLFClk.c **** 
1062:Generated_Source\PSoC4/CyLFClk.c **** 
1063:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1064:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetMode
1065:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1066:Generated_Source\PSoC4/CyLFClk.c ****     * 
1067:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the mode of one of the three WDT counters.
1068:Generated_Source\PSoC4/CyLFClk.c ****     *
1069:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the WDT counter.
1070:Generated_Source\PSoC4/CyLFClk.c ****     *
1071:Generated_Source\PSoC4/CyLFClk.c ****     * \return The mode of the counter. The same enumerated values as the mode 
1072:Generated_Source\PSoC4/CyLFClk.c ****     * parameter used in CySysWdtSetMode().
1073:Generated_Source\PSoC4/CyLFClk.c ****     *
1074:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1075:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetMode(uint32 counterNum)
1076:Generated_Source\PSoC4/CyLFClk.c ****     {
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 27


1077:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_CONFIG_REG >> (counterNum * CY_SYS_WDT_CNT_SHIFT)) & CY_SYS_WDT_MODE_MA
1078:Generated_Source\PSoC4/CyLFClk.c ****     }
1079:Generated_Source\PSoC4/CyLFClk.c **** 
1080:Generated_Source\PSoC4/CyLFClk.c **** 
1081:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1082:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetClearOnMatch
1083:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1084:Generated_Source\PSoC4/CyLFClk.c ****     * 
1085:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures the WDT counter "clear on match" setting.
1086:Generated_Source\PSoC4/CyLFClk.c ****     *
1087:Generated_Source\PSoC4/CyLFClk.c ****     * If configured to "clear on match", the counter counts from 0 to MatchValue
1088:Generated_Source\PSoC4/CyLFClk.c ****     * giving it a period of (MatchValue + 1).
1089:Generated_Source\PSoC4/CyLFClk.c ****     *
1090:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum
1091:Generated_Source\PSoC4/CyLFClk.c ****     * Valid range [0-1]. The number of the WDT counter. The match values are not
1092:Generated_Source\PSoC4/CyLFClk.c ****     * supported by counter 2.
1093:Generated_Source\PSoC4/CyLFClk.c ****     *
1094:Generated_Source\PSoC4/CyLFClk.c ****     * \param enable 0 to disable appropriate counter <br>
1095:Generated_Source\PSoC4/CyLFClk.c ****     *  1 to enable appropriate counter
1096:Generated_Source\PSoC4/CyLFClk.c ****     *
1097:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1098:Generated_Source\PSoC4/CyLFClk.c ****     * WDT counter counterNum should be disabled. Otherwise this function call
1099:Generated_Source\PSoC4/CyLFClk.c ****     * has no effect. If the specified counter is enabled, call the CySysWdtDisable()
1100:Generated_Source\PSoC4/CyLFClk.c ****     * function with the corresponding parameter to disable the specified counter and
1101:Generated_Source\PSoC4/CyLFClk.c ****     * wait for it to stop. This may take up to three LFCLK cycles.
1102:Generated_Source\PSoC4/CyLFClk.c ****     *
1103:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1104:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetClearOnMatch(uint32 counterNum, uint32 enable)
1105:Generated_Source\PSoC4/CyLFClk.c ****     {
1106:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1107:Generated_Source\PSoC4/CyLFClk.c **** 
1108:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
1109:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1110:Generated_Source\PSoC4/CyLFClk.c **** 
1111:Generated_Source\PSoC4/CyLFClk.c ****         if(0u == CySysWdtGetEnabledStatus(counterNum))
1112:Generated_Source\PSoC4/CyLFClk.c ****         {
1113:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG & (uint32)~((uint32)((uint32)1u << 
1114:Generated_Source\PSoC4/CyLFClk.c ****                                      ((counterNum * CY_SYS_WDT_CNT_SHIFT) + CY_SYS_WDT_CNT_MATCH_CL
1115:Generated_Source\PSoC4/CyLFClk.c **** 
1116:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue
1117:Generated_Source\PSoC4/CyLFClk.c ****                 |= (uint32)(enable << ((counterNum * CY_SYS_WDT_CNT_SHIFT) + CY_SYS_WDT_CNT_MATCH_C
1118:Generated_Source\PSoC4/CyLFClk.c **** 
1119:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
1120:Generated_Source\PSoC4/CyLFClk.c ****         }
1121:Generated_Source\PSoC4/CyLFClk.c ****     }
1122:Generated_Source\PSoC4/CyLFClk.c **** 
1123:Generated_Source\PSoC4/CyLFClk.c **** 
1124:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1125:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetClearOnMatch
1126:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1127:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1128:Generated_Source\PSoC4/CyLFClk.c ****     * Reads the "clear on match" setting for the specified counter.
1129:Generated_Source\PSoC4/CyLFClk.c ****     *
1130:Generated_Source\PSoC4/CyLFClk.c ****     * \param
1131:Generated_Source\PSoC4/CyLFClk.c ****     * counterNum Valid range [0-1]. The number of the WDT counter. The match values
1132:Generated_Source\PSoC4/CyLFClk.c ****     * are not supported by counter 2.
1133:Generated_Source\PSoC4/CyLFClk.c ****     *
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 28


1134:Generated_Source\PSoC4/CyLFClk.c ****     * \return The "clear on match" status: <br>1 if enabled <br>0 if disabled
1135:Generated_Source\PSoC4/CyLFClk.c ****     *
1136:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1137:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetClearOnMatch(uint32 counterNum)
1138:Generated_Source\PSoC4/CyLFClk.c ****     {
1139:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
1140:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1141:Generated_Source\PSoC4/CyLFClk.c **** 
1142:Generated_Source\PSoC4/CyLFClk.c ****         return (uint32)((CY_SYS_WDT_CONFIG_REG >>
1143:Generated_Source\PSoC4/CyLFClk.c ****                         ((counterNum * CY_SYS_WDT_CNT_SHIFT) + CY_SYS_WDT_CNT_MATCH_CLR_SHIFT)) & 0
1144:Generated_Source\PSoC4/CyLFClk.c ****     }
1145:Generated_Source\PSoC4/CyLFClk.c **** 
1146:Generated_Source\PSoC4/CyLFClk.c **** 
1147:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1148:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtEnable
1149:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1150:Generated_Source\PSoC4/CyLFClk.c ****     *
1151:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Enables the specified WDT counters.
1152:Generated_Source\PSoC4/CyLFClk.c ****     *
1153:Generated_Source\PSoC4/CyLFClk.c ****     * All the counters specified in the mask are enabled.
1154:Generated_Source\PSoC4/CyLFClk.c ****     *
1155:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask
1156:Generated_Source\PSoC4/CyLFClk.c ****     *  CY_SYS_WDT_COUNTER0_MASK - The mask for counter 0 to enable.<br>
1157:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_MASK - The mask for counter 1 to enable.<br>
1158:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_MASK - The mask for counter 2 to enable.
1159:Generated_Source\PSoC4/CyLFClk.c ****     *
1160:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1161:Generated_Source\PSoC4/CyLFClk.c ****     * Enabling or disabling WDT requires 3 LFCLK cycles to come into effect.
1162:Generated_Source\PSoC4/CyLFClk.c ****     * Therefore, the WDT enable state must not be changed more than once in
1163:Generated_Source\PSoC4/CyLFClk.c ****     * that period.
1164:Generated_Source\PSoC4/CyLFClk.c ****     *
1165:Generated_Source\PSoC4/CyLFClk.c ****     * After WDT is enabled, it is illegal to write WDT configuration (WDT_CONFIG)
1166:Generated_Source\PSoC4/CyLFClk.c ****     * and control (WDT_CONTROL) registers. This means that all WDT functions that
1167:Generated_Source\PSoC4/CyLFClk.c ****     * contain 'write' in the name (with the exception of CySysWdtSetMatch()
1168:Generated_Source\PSoC4/CyLFClk.c ****     * function) are illegal to call if WDT is enabled.
1169:Generated_Source\PSoC4/CyLFClk.c ****     *
1170:Generated_Source\PSoC4/CyLFClk.c ****     * PSoC 4100 / PSoC 4200: This function enables ILO.
1171:Generated_Source\PSoC4/CyLFClk.c ****     *
1172:Generated_Source\PSoC4/CyLFClk.c ****     * PSoC 4100 BLE / PSoC 4200 BLE / PSoC4200L / PSoC 4100M 
1173:Generated_Source\PSoC4/CyLFClk.c ****     * / PSoC 4200M:
1174:Generated_Source\PSoC4/CyLFClk.c ****     * LFLCK should be configured before calling this function. The desired
1175:Generated_Source\PSoC4/CyLFClk.c ****     * source should be enabled and configured to be the source for LFCLK.
1176:Generated_Source\PSoC4/CyLFClk.c ****     *
1177:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1178:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtEnable(uint32 counterMask)
1179:Generated_Source\PSoC4/CyLFClk.c ****     {
1180:Generated_Source\PSoC4/CyLFClk.c ****         #if (!CY_IP_WCO)
1181:Generated_Source\PSoC4/CyLFClk.c ****             CySysClkIloStart();
1182:Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (!CY_IP_WCO) */
1183:Generated_Source\PSoC4/CyLFClk.c **** 
1184:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_CONTROL_REG |= counterMask;
1185:Generated_Source\PSoC4/CyLFClk.c **** 
1186:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_WDT_COUNTER0_MASK))
1187:Generated_Source\PSoC4/CyLFClk.c ****         {
1188:Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0))
1189:Generated_Source\PSoC4/CyLFClk.c ****             {
1190:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 29


1191:Generated_Source\PSoC4/CyLFClk.c ****             }
1192:Generated_Source\PSoC4/CyLFClk.c ****         }
1193:Generated_Source\PSoC4/CyLFClk.c **** 
1194:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_WDT_COUNTER1_MASK))
1195:Generated_Source\PSoC4/CyLFClk.c ****         {
1196:Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1))
1197:Generated_Source\PSoC4/CyLFClk.c ****             {
1198:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
1199:Generated_Source\PSoC4/CyLFClk.c ****             }
1200:Generated_Source\PSoC4/CyLFClk.c ****         }
1201:Generated_Source\PSoC4/CyLFClk.c **** 
1202:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_WDT_COUNTER2_MASK))
1203:Generated_Source\PSoC4/CyLFClk.c ****         {
1204:Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
1205:Generated_Source\PSoC4/CyLFClk.c ****             {
1206:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
1207:Generated_Source\PSoC4/CyLFClk.c ****             }
1208:Generated_Source\PSoC4/CyLFClk.c ****         }
1209:Generated_Source\PSoC4/CyLFClk.c ****     }
1210:Generated_Source\PSoC4/CyLFClk.c **** 
1211:Generated_Source\PSoC4/CyLFClk.c **** 
1212:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1213:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtDisable
1214:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1215:Generated_Source\PSoC4/CyLFClk.c ****     *
1216:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Disables the specified WDT counters.
1217:Generated_Source\PSoC4/CyLFClk.c ****     * All the counters specified in the mask are disabled. The function waits for 
1218:Generated_Source\PSoC4/CyLFClk.c ****     * the changes to come into effect.
1219:Generated_Source\PSoC4/CyLFClk.c ****     *
1220:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask
1221:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0_MASK - The mask for counter 0 to disable. <br>
1222:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_MASK - The mask for counter 1 to disable. <br>
1223:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_MASK - The mask for counter 2 to disable.
1224:Generated_Source\PSoC4/CyLFClk.c ****     *
1225:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1226:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtDisable(uint32 counterMask)
1227:Generated_Source\PSoC4/CyLFClk.c ****     {
1228:Generated_Source\PSoC4/CyLFClk.c ****         if (0uL == CySysWdtLocked())
1229:Generated_Source\PSoC4/CyLFClk.c ****         {
1230:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONTROL_REG &= ~counterMask;
1231:Generated_Source\PSoC4/CyLFClk.c **** 
1232:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (counterMask & CY_SYS_WDT_COUNTER0_MASK))
1233:Generated_Source\PSoC4/CyLFClk.c ****             {
1234:Generated_Source\PSoC4/CyLFClk.c ****                 while (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0))
1235:Generated_Source\PSoC4/CyLFClk.c ****                 {
1236:Generated_Source\PSoC4/CyLFClk.c ****                     /* Wait for changes to come into effect */
1237:Generated_Source\PSoC4/CyLFClk.c ****                 }
1238:Generated_Source\PSoC4/CyLFClk.c ****             }
1239:Generated_Source\PSoC4/CyLFClk.c **** 
1240:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (counterMask & CY_SYS_WDT_COUNTER1_MASK))
1241:Generated_Source\PSoC4/CyLFClk.c ****             {
1242:Generated_Source\PSoC4/CyLFClk.c ****                 while (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1))
1243:Generated_Source\PSoC4/CyLFClk.c ****                 {
1244:Generated_Source\PSoC4/CyLFClk.c ****                     /* Wait for changes to come into effect */
1245:Generated_Source\PSoC4/CyLFClk.c ****                 }
1246:Generated_Source\PSoC4/CyLFClk.c ****             }
1247:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 30


1248:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (counterMask & CY_SYS_WDT_COUNTER2_MASK))
1249:Generated_Source\PSoC4/CyLFClk.c ****             {
1250:Generated_Source\PSoC4/CyLFClk.c ****                 while (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
1251:Generated_Source\PSoC4/CyLFClk.c ****                 {
1252:Generated_Source\PSoC4/CyLFClk.c ****                     /* Wait for changes to come into effect */
1253:Generated_Source\PSoC4/CyLFClk.c ****                 }
1254:Generated_Source\PSoC4/CyLFClk.c ****             }
1255:Generated_Source\PSoC4/CyLFClk.c ****         }
1256:Generated_Source\PSoC4/CyLFClk.c ****     }
1257:Generated_Source\PSoC4/CyLFClk.c **** 
1258:Generated_Source\PSoC4/CyLFClk.c **** 
1259:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1260:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetCascade
1261:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1262:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1263:Generated_Source\PSoC4/CyLFClk.c ****     * Writes the two WDT cascade values based on the combination of mask values
1264:Generated_Source\PSoC4/CyLFClk.c ****     * specified.
1265:Generated_Source\PSoC4/CyLFClk.c ****     *
1266:Generated_Source\PSoC4/CyLFClk.c ****     * \param cascadeMask The mask value used to set or clear the cascade values:
1267:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_CASCADE_NONE - Neither <br>
1268:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_CASCADE_01 - Cascade 01 <br>
1269:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_CASCADE_12 - Cascade 12
1270:Generated_Source\PSoC4/CyLFClk.c ****     *
1271:Generated_Source\PSoC4/CyLFClk.c ****     * If only one cascade mask is specified, the second cascade is disabled.
1272:Generated_Source\PSoC4/CyLFClk.c ****     * To set both cascade modes, two defines should be ORed:
1273:Generated_Source\PSoC4/CyLFClk.c ****     * (CY_SYS_TIMER_CASCADE_01 | CY_SYS_TIMER_CASCADE_12).
1274:Generated_Source\PSoC4/CyLFClk.c ****     * \note If CySysWdtSetCascade() was called with ORed defines it is necessary 
1275:Generated_Source\PSoC4/CyLFClk.c ****     * to call CySysWdtSetClearOnMatch(1,1). It is needed to make sure that 
1276:Generated_Source\PSoC4/CyLFClk.c ****     * Counter 2 will be updated in the expected way.
1277:Generated_Source\PSoC4/CyLFClk.c ****     *
1278:Generated_Source\PSoC4/CyLFClk.c ****     * WDT counters that are part of the specified cascade should be disabled.
1279:Generated_Source\PSoC4/CyLFClk.c ****     * Otherwise this function call has no effect. If the specified
1280:Generated_Source\PSoC4/CyLFClk.c ****     * counter is enabled, call CySysWdtDisable() function with the corresponding
1281:Generated_Source\PSoC4/CyLFClk.c ****     * parameter to disable the specified counter and wait for it to stop. This may
1282:Generated_Source\PSoC4/CyLFClk.c ****     * take up to 3 LFCLK cycles.
1283:Generated_Source\PSoC4/CyLFClk.c ****     *
1284:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1285:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetCascade(uint32 cascadeMask)
1286:Generated_Source\PSoC4/CyLFClk.c ****     {
1287:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1288:Generated_Source\PSoC4/CyLFClk.c ****         uint32 countersEnableStatus;
1289:Generated_Source\PSoC4/CyLFClk.c **** 
1290:Generated_Source\PSoC4/CyLFClk.c ****         countersEnableStatus = CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0) |
1291:Generated_Source\PSoC4/CyLFClk.c ****                             CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1) |
1292:Generated_Source\PSoC4/CyLFClk.c ****                             CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2);
1293:Generated_Source\PSoC4/CyLFClk.c **** 
1294:Generated_Source\PSoC4/CyLFClk.c ****         if (0u == countersEnableStatus)
1295:Generated_Source\PSoC4/CyLFClk.c ****         {
1296:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG;
1297:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue &= ((uint32)(~(CY_SYS_WDT_CASCADE_01|CY_SYS_WDT_CASCADE_12)));
1298:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= cascadeMask;
1299:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
1300:Generated_Source\PSoC4/CyLFClk.c ****         }
1301:Generated_Source\PSoC4/CyLFClk.c ****     }
1302:Generated_Source\PSoC4/CyLFClk.c **** 
1303:Generated_Source\PSoC4/CyLFClk.c **** 
1304:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 31


1305:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetCascade
1306:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1307:Generated_Source\PSoC4/CyLFClk.c ****     *
1308:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the two WDT cascade values returning a mask of the bits set.
1309:Generated_Source\PSoC4/CyLFClk.c ****     *
1310:Generated_Source\PSoC4/CyLFClk.c ****     * \return The mask of the cascade values set.
1311:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_CASCADE_NONE - Neither
1312:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_CASCADE_01 - Cascade 01
1313:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_CASCADE_12 - Cascade 12
1314:Generated_Source\PSoC4/CyLFClk.c ****     *
1315:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1316:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetCascade(void)
1317:Generated_Source\PSoC4/CyLFClk.c ****     {
1318:Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WDT_CONFIG_REG & (CY_SYS_WDT_CASCADE_01 | CY_SYS_WDT_CASCADE_12));
1319:Generated_Source\PSoC4/CyLFClk.c ****     }
1320:Generated_Source\PSoC4/CyLFClk.c **** 
1321:Generated_Source\PSoC4/CyLFClk.c **** 
1322:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1323:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetMatch
1324:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1325:Generated_Source\PSoC4/CyLFClk.c ****     *
1326:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures the WDT counter match comparison value.
1327:Generated_Source\PSoC4/CyLFClk.c ****     *
1328:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum
1329:Generated_Source\PSoC4/CyLFClk.c ****     * Valid range [0-1]. The number of the WDT counter. The match values are not
1330:Generated_Source\PSoC4/CyLFClk.c ****     * supported by counter 2.
1331:Generated_Source\PSoC4/CyLFClk.c ****     *
1332:Generated_Source\PSoC4/CyLFClk.c ****     * \param match
1333:Generated_Source\PSoC4/CyLFClk.c ****     * Valid range [0-65535]. The value to be used to match against the counter.
1334:Generated_Source\PSoC4/CyLFClk.c ****     *
1335:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1336:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetMatch(uint32 counterNum, uint32 match)
1337:Generated_Source\PSoC4/CyLFClk.c ****     {
1338:Generated_Source\PSoC4/CyLFClk.c ****         uint32 regValue;
1339:Generated_Source\PSoC4/CyLFClk.c **** 
1340:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
1341:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1342:Generated_Source\PSoC4/CyLFClk.c **** 
1343:Generated_Source\PSoC4/CyLFClk.c ****         /* Wait for previous changes to come into effect */
1344:Generated_Source\PSoC4/CyLFClk.c ****         CyDelayUs(CY_SYS_WDT_3LFCLK_DELAY_US);
1345:Generated_Source\PSoC4/CyLFClk.c **** 
1346:Generated_Source\PSoC4/CyLFClk.c ****         regValue = CY_SYS_WDT_MATCH_REG;
1347:Generated_Source\PSoC4/CyLFClk.c ****         regValue &= (uint32)~((uint32)(CY_SYS_WDT_LOWER_16BITS_MASK << (counterNum * CY_SYS_WDT_CNT
1348:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_MATCH_REG = (regValue | (match << (counterNum * CY_SYS_WDT_CNT_MATCH_SHIFT)));
1349:Generated_Source\PSoC4/CyLFClk.c **** 
1350:Generated_Source\PSoC4/CyLFClk.c ****         /* Make sure match synchronization has started */
1351:Generated_Source\PSoC4/CyLFClk.c ****         CyDelayUs(CY_SYS_WDT_1LFCLK_DELAY_US);
1352:Generated_Source\PSoC4/CyLFClk.c ****     }
1353:Generated_Source\PSoC4/CyLFClk.c **** 
1354:Generated_Source\PSoC4/CyLFClk.c **** 
1355:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1356:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetToggleBit
1357:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1358:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1359:Generated_Source\PSoC4/CyLFClk.c ****     * Configures which bit in WDT counter 2 to monitor for a toggle.
1360:Generated_Source\PSoC4/CyLFClk.c ****     *
1361:Generated_Source\PSoC4/CyLFClk.c ****     * When that bit toggles, an interrupt is generated if the mode for counter 2 has
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 32


1362:Generated_Source\PSoC4/CyLFClk.c ****     * enabled interrupts.
1363:Generated_Source\PSoC4/CyLFClk.c ****     *
1364:Generated_Source\PSoC4/CyLFClk.c ****     * \param bits Valid range [0-31].  Counter 2 bit to monitor for a toggle.
1365:Generated_Source\PSoC4/CyLFClk.c ****     *
1366:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1367:Generated_Source\PSoC4/CyLFClk.c ****     * WDT Counter 2 should be disabled. Otherwise this function call has no
1368:Generated_Source\PSoC4/CyLFClk.c ****     * effect.
1369:Generated_Source\PSoC4/CyLFClk.c ****     *
1370:Generated_Source\PSoC4/CyLFClk.c ****     * If the specified counter is enabled, call the CySysWdtDisable() function with
1371:Generated_Source\PSoC4/CyLFClk.c ****     * the corresponding parameter to disable the specified counter and wait for it to
1372:Generated_Source\PSoC4/CyLFClk.c ****     * stop. This may take up to 3 LFCLK cycles.
1373:Generated_Source\PSoC4/CyLFClk.c ****     *
1374:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1375:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetToggleBit(uint32 bits)
1376:Generated_Source\PSoC4/CyLFClk.c ****     {
1377:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1378:Generated_Source\PSoC4/CyLFClk.c **** 
1379:Generated_Source\PSoC4/CyLFClk.c ****         if (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
1380:Generated_Source\PSoC4/CyLFClk.c ****         {
1381:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG;
1382:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue &= (uint32)(~((uint32)(CY_SYS_WDT_CONFIG_BITS2_MASK << CY_SYS_WDT_CONFIG
1383:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= ((bits & CY_SYS_WDT_CONFIG_BITS2_MASK) << CY_SYS_WDT_CONFIG_BITS2_POS
1384:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
1385:Generated_Source\PSoC4/CyLFClk.c ****         }
1386:Generated_Source\PSoC4/CyLFClk.c ****     }
1387:Generated_Source\PSoC4/CyLFClk.c **** 
1388:Generated_Source\PSoC4/CyLFClk.c **** 
1389:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1390:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetToggleBit
1391:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1392:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1393:Generated_Source\PSoC4/CyLFClk.c ****     * Reads which bit in WDT counter 2 is monitored for a toggle.
1394:Generated_Source\PSoC4/CyLFClk.c ****     *
1395:Generated_Source\PSoC4/CyLFClk.c ****     * \return The bit that is monitored (range of 0 to 31)
1396:Generated_Source\PSoC4/CyLFClk.c ****     *
1397:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1398:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetToggleBit(void)
1399:Generated_Source\PSoC4/CyLFClk.c ****     {
1400:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_CONFIG_REG >> CY_SYS_WDT_CONFIG_BITS2_POS) & CY_SYS_WDT_CONFIG_BITS2_MA
1401:Generated_Source\PSoC4/CyLFClk.c ****     }
1402:Generated_Source\PSoC4/CyLFClk.c **** 
1403:Generated_Source\PSoC4/CyLFClk.c **** 
1404:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1405:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetMatch
1406:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1407:Generated_Source\PSoC4/CyLFClk.c ****     *
1408:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the WDT counter match comparison value.
1409:Generated_Source\PSoC4/CyLFClk.c ****     *
1410:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-1].  The number of the WDT counter. The match
1411:Generated_Source\PSoC4/CyLFClk.c ****     * values are not supported by counter 2.
1412:Generated_Source\PSoC4/CyLFClk.c ****     *
1413:Generated_Source\PSoC4/CyLFClk.c ****     * \return A 16-bit match value.
1414:Generated_Source\PSoC4/CyLFClk.c ****     *
1415:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1416:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetMatch(uint32 counterNum)
1417:Generated_Source\PSoC4/CyLFClk.c ****     {
1418:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 33


1419:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1420:Generated_Source\PSoC4/CyLFClk.c **** 
1421:Generated_Source\PSoC4/CyLFClk.c ****         return ((uint32)(CY_SYS_WDT_MATCH_REG >> 
1422:Generated_Source\PSoC4/CyLFClk.c ****                                             (counterNum * CY_SYS_WDT_CNT_MATCH_SHIFT)) & CY_SYS_WDT
1423:Generated_Source\PSoC4/CyLFClk.c ****     }
1424:Generated_Source\PSoC4/CyLFClk.c **** 
1425:Generated_Source\PSoC4/CyLFClk.c **** 
1426:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1427:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetCount
1428:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1429:Generated_Source\PSoC4/CyLFClk.c ****     *
1430:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the current WDT counter value.
1431:Generated_Source\PSoC4/CyLFClk.c ****     *
1432:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum: Valid range [0-2]. The number of the WDT counter.
1433:Generated_Source\PSoC4/CyLFClk.c ****     *
1434:Generated_Source\PSoC4/CyLFClk.c ****     * \return A live counter value.  Counter 0 and Counter 1 are 16 bit counters 
1435:Generated_Source\PSoC4/CyLFClk.c ****     * and counter 2 is a 32 bit counter.
1436:Generated_Source\PSoC4/CyLFClk.c ****     *
1437:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1438:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetCount(uint32 counterNum)
1439:Generated_Source\PSoC4/CyLFClk.c ****     {
1440:Generated_Source\PSoC4/CyLFClk.c ****         uint32 regValue = 0u;
1441:Generated_Source\PSoC4/CyLFClk.c **** 
1442:Generated_Source\PSoC4/CyLFClk.c ****         switch(counterNum)
1443:Generated_Source\PSoC4/CyLFClk.c ****         {
1444:Generated_Source\PSoC4/CyLFClk.c ****             /* WDT Counter 0 */
1445:Generated_Source\PSoC4/CyLFClk.c ****             case 0u:
1446:Generated_Source\PSoC4/CyLFClk.c ****                 regValue = CY_SYS_WDT_CTRLOW_REG & CY_SYS_WDT_LOWER_16BITS_MASK;
1447:Generated_Source\PSoC4/CyLFClk.c ****             break;
1448:Generated_Source\PSoC4/CyLFClk.c **** 
1449:Generated_Source\PSoC4/CyLFClk.c ****             /* WDT Counter 1 */
1450:Generated_Source\PSoC4/CyLFClk.c ****             case 1u:
1451:Generated_Source\PSoC4/CyLFClk.c ****                 regValue = (CY_SYS_WDT_CTRLOW_REG >> CY_SYS_WDT_CNT_MATCH_SHIFT) & CY_SYS_WDT_LOWER
1452:Generated_Source\PSoC4/CyLFClk.c ****             break;
1453:Generated_Source\PSoC4/CyLFClk.c **** 
1454:Generated_Source\PSoC4/CyLFClk.c ****             /* WDT Counter 2 */
1455:Generated_Source\PSoC4/CyLFClk.c ****             case 2u:
1456:Generated_Source\PSoC4/CyLFClk.c ****                 regValue = CY_SYS_WDT_CTRHIGH_REG;
1457:Generated_Source\PSoC4/CyLFClk.c ****             break;
1458:Generated_Source\PSoC4/CyLFClk.c **** 
1459:Generated_Source\PSoC4/CyLFClk.c ****             default:
1460:Generated_Source\PSoC4/CyLFClk.c ****                 CYASSERT(0u != 0u);
1461:Generated_Source\PSoC4/CyLFClk.c ****             break;
1462:Generated_Source\PSoC4/CyLFClk.c ****         }
1463:Generated_Source\PSoC4/CyLFClk.c **** 
1464:Generated_Source\PSoC4/CyLFClk.c ****         return (regValue);
1465:Generated_Source\PSoC4/CyLFClk.c ****     }
1466:Generated_Source\PSoC4/CyLFClk.c **** 
1467:Generated_Source\PSoC4/CyLFClk.c **** 
1468:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1469:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetInterruptSource
1470:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1471:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1472:Generated_Source\PSoC4/CyLFClk.c ****     * Reads a mask containing all the WDT counters interrupts that are currently
1473:Generated_Source\PSoC4/CyLFClk.c ****     * set by the hardware, if a corresponding mode is selected.
1474:Generated_Source\PSoC4/CyLFClk.c ****     *
1475:Generated_Source\PSoC4/CyLFClk.c ****     * \return The mask of interrupts set
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 34


1476:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_COUNTER0_INT - Counter 0
1477:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_COUNTER1_INT - Counter 1
1478:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_COUNTER2_INT - Counter 2
1479:Generated_Source\PSoC4/CyLFClk.c ****     *
1480:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1481:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetInterruptSource(void)
1482:Generated_Source\PSoC4/CyLFClk.c ****     {
1483:Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WDT_CONTROL_REG & (CY_SYS_WDT_COUNTER0_INT | CY_SYS_WDT_COUNTER1_INT | CY_SY
1484:Generated_Source\PSoC4/CyLFClk.c ****     }
1485:Generated_Source\PSoC4/CyLFClk.c **** 
1486:Generated_Source\PSoC4/CyLFClk.c **** 
1487:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1488:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtClearInterrupt
1489:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1490:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1491:Generated_Source\PSoC4/CyLFClk.c ****     * Clears all the WDT counter interrupts set in the mask.
1492:Generated_Source\PSoC4/CyLFClk.c ****     *
1493:Generated_Source\PSoC4/CyLFClk.c ****     * Calling this function also prevents from Reset when the counter mode is set 
1494:Generated_Source\PSoC4/CyLFClk.c ****     * to generate 3 interrupts and then the device resets.
1495:Generated_Source\PSoC4/CyLFClk.c ****     *
1496:Generated_Source\PSoC4/CyLFClk.c ****     * All the WDT interrupts are to be cleared by the firmware, otherwise
1497:Generated_Source\PSoC4/CyLFClk.c ****     * interrupts are generated continuously.
1498:Generated_Source\PSoC4/CyLFClk.c ****     *
1499:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask
1500:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0_INT - Clears counter 0 interrupts <br>
1501:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_INT - Clears counter 1 interrupts <br>
1502:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_INT - Clears counter 2 interrupts
1503:Generated_Source\PSoC4/CyLFClk.c ****     *
1504:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1505:Generated_Source\PSoC4/CyLFClk.c ****     * This function temporary removes the watchdog lock, if it was set, and
1506:Generated_Source\PSoC4/CyLFClk.c ****     * restores the lock state after cleaning the WDT interrupts that are set in
1507:Generated_Source\PSoC4/CyLFClk.c ****     * a mask.
1508:Generated_Source\PSoC4/CyLFClk.c ****     *
1509:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1510:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtClearInterrupt(uint32 counterMask)
1511:Generated_Source\PSoC4/CyLFClk.c ****     {
1512:Generated_Source\PSoC4/CyLFClk.c ****         uint8 interruptState;
1513:Generated_Source\PSoC4/CyLFClk.c ****         uint32 wdtLockState;
1514:Generated_Source\PSoC4/CyLFClk.c **** 
1515:Generated_Source\PSoC4/CyLFClk.c ****         interruptState = CyEnterCriticalSection();
1516:Generated_Source\PSoC4/CyLFClk.c **** 
1517:Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysWdtLocked())
1518:Generated_Source\PSoC4/CyLFClk.c ****         {
1519:Generated_Source\PSoC4/CyLFClk.c ****             wdtLockState = 1u;
1520:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtUnlock();
1521:Generated_Source\PSoC4/CyLFClk.c ****         }
1522:Generated_Source\PSoC4/CyLFClk.c ****         else
1523:Generated_Source\PSoC4/CyLFClk.c ****         {
1524:Generated_Source\PSoC4/CyLFClk.c ****             wdtLockState = 0u;
1525:Generated_Source\PSoC4/CyLFClk.c ****         }
1526:Generated_Source\PSoC4/CyLFClk.c **** 
1527:Generated_Source\PSoC4/CyLFClk.c ****         /* Set new WDT control register value */
1528:Generated_Source\PSoC4/CyLFClk.c ****         counterMask &= (CY_SYS_WDT_COUNTER0_INT |
1529:Generated_Source\PSoC4/CyLFClk.c ****                         CY_SYS_WDT_COUNTER1_INT |
1530:Generated_Source\PSoC4/CyLFClk.c ****                         CY_SYS_WDT_COUNTER2_INT);
1531:Generated_Source\PSoC4/CyLFClk.c **** 
1532:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_CONTROL_REG = counterMask | (CY_SYS_WDT_CONTROL_REG & ~(CY_SYS_WDT_COUNTER0_INT 
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 35


1533:Generated_Source\PSoC4/CyLFClk.c ****                                                                            CY_SYS_WDT_COUNTER1_INT 
1534:Generated_Source\PSoC4/CyLFClk.c ****                                                                            CY_SYS_WDT_COUNTER2_INT)
1535:Generated_Source\PSoC4/CyLFClk.c **** 
1536:Generated_Source\PSoC4/CyLFClk.c ****         /* Read the CY_SYS_WDT_CONTROL_REG to clear the interrupt request.
1537:Generated_Source\PSoC4/CyLFClk.c ****          * Cypress ID #207093, #206231
1538:Generated_Source\PSoC4/CyLFClk.c ****         */
1539:Generated_Source\PSoC4/CyLFClk.c ****         (void)CY_SYS_WDT_CONTROL_REG;
1540:Generated_Source\PSoC4/CyLFClk.c **** 
1541:Generated_Source\PSoC4/CyLFClk.c ****         if (1u == wdtLockState)
1542:Generated_Source\PSoC4/CyLFClk.c ****         {
1543:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtLock();
1544:Generated_Source\PSoC4/CyLFClk.c ****         }
1545:Generated_Source\PSoC4/CyLFClk.c **** 
1546:Generated_Source\PSoC4/CyLFClk.c ****         CyExitCriticalSection(interruptState);
1547:Generated_Source\PSoC4/CyLFClk.c ****     }
1548:Generated_Source\PSoC4/CyLFClk.c **** 
1549:Generated_Source\PSoC4/CyLFClk.c **** 
1550:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1551:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtResetCounters
1552:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1553:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1554:Generated_Source\PSoC4/CyLFClk.c ****     * Resets all the WDT counters set in the mask.
1555:Generated_Source\PSoC4/CyLFClk.c ****     *
1556:Generated_Source\PSoC4/CyLFClk.c ****     * \param countersMask
1557:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0_RESET - Reset counter 0 <br>
1558:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_RESET - Reset counter 1 <br>
1559:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_RESET - Reset counter 2
1560:Generated_Source\PSoC4/CyLFClk.c ****     *
1561:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1562:Generated_Source\PSoC4/CyLFClk.c ****     * This function does not reset counter values if the Watchdog is locked.
1563:Generated_Source\PSoC4/CyLFClk.c ****     * This function waits while corresponding counters will be reset. This may
1564:Generated_Source\PSoC4/CyLFClk.c ****     * take up to 3 LFCLK cycles.
1565:Generated_Source\PSoC4/CyLFClk.c ****     * The LFCLK source must be enabled. Otherwise, the function will never exit.
1566:Generated_Source\PSoC4/CyLFClk.c ****     *
1567:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1568:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtResetCounters(uint32 countersMask)
1569:Generated_Source\PSoC4/CyLFClk.c ****     {
1570:Generated_Source\PSoC4/CyLFClk.c ****         /* Set new WDT reset value */
1571:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_CONTROL_REG |= (countersMask & CY_SYS_WDT_COUNTERS_RESET);
1572:Generated_Source\PSoC4/CyLFClk.c **** 
1573:Generated_Source\PSoC4/CyLFClk.c ****         while (0uL != (CY_SYS_WDT_CONTROL_REG & CY_SYS_WDT_COUNTERS_RESET))
1574:Generated_Source\PSoC4/CyLFClk.c ****         {
1575:Generated_Source\PSoC4/CyLFClk.c ****             /* Wait for reset to come into effect */
1576:Generated_Source\PSoC4/CyLFClk.c ****         }
1577:Generated_Source\PSoC4/CyLFClk.c ****     }
1578:Generated_Source\PSoC4/CyLFClk.c **** 
1579:Generated_Source\PSoC4/CyLFClk.c **** 
1580:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1581:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetInterruptCallback
1582:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1583:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1584:Generated_Source\PSoC4/CyLFClk.c ****     * Sets the ISR callback function for the particular WDT counter.
1585:Generated_Source\PSoC4/CyLFClk.c ****     * These functions are called on the WDT interrupt.
1586:Generated_Source\PSoC4/CyLFClk.c ****     *
1587:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum The number of the WDT counter.
1588:Generated_Source\PSoC4/CyLFClk.c ****     * \param function The pointer to the callback function.
1589:Generated_Source\PSoC4/CyLFClk.c ****     *
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 36


1590:Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to the previous callback function.
1591:Generated_Source\PSoC4/CyLFClk.c ****     * \return NULL is returned if the specified address is not set.
1592:Generated_Source\PSoC4/CyLFClk.c ****     *
1593:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1594:Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtSetInterruptCallback(uint32 counterNum, cyWdtCallback function)
1595:Generated_Source\PSoC4/CyLFClk.c ****     {
1596:Generated_Source\PSoC4/CyLFClk.c ****         cyWdtCallback prevCallback = (void *)0;
1597:Generated_Source\PSoC4/CyLFClk.c **** 
1598:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum < CY_WDT_NUM_OF_WDT)
1599:Generated_Source\PSoC4/CyLFClk.c ****         {
1600:Generated_Source\PSoC4/CyLFClk.c ****             prevCallback = cySysWdtCallback[counterNum];
1601:Generated_Source\PSoC4/CyLFClk.c ****             cySysWdtCallback[counterNum] = function;
1602:Generated_Source\PSoC4/CyLFClk.c ****         }
1603:Generated_Source\PSoC4/CyLFClk.c ****         else
1604:Generated_Source\PSoC4/CyLFClk.c ****         {
1605:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
1606:Generated_Source\PSoC4/CyLFClk.c ****         }
1607:Generated_Source\PSoC4/CyLFClk.c **** 
1608:Generated_Source\PSoC4/CyLFClk.c ****         return((cyWdtCallback)prevCallback);
1609:Generated_Source\PSoC4/CyLFClk.c ****     }
1610:Generated_Source\PSoC4/CyLFClk.c **** 
1611:Generated_Source\PSoC4/CyLFClk.c **** 
1612:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1613:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetInterruptCallback
1614:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1615:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1616:Generated_Source\PSoC4/CyLFClk.c ****     * Gets the ISR callback function for the particular WDT counter.
1617:Generated_Source\PSoC4/CyLFClk.c ****     *
1618:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum The number of the WDT counter.
1619:Generated_Source\PSoC4/CyLFClk.c ****     *
1620:Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to the callback function registered for a particular WDT by
1621:Generated_Source\PSoC4/CyLFClk.c ****     * a particular address that are passed through arguments.
1622:Generated_Source\PSoC4/CyLFClk.c ****     *
1623:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1624:Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtGetInterruptCallback(uint32 counterNum)
1625:Generated_Source\PSoC4/CyLFClk.c ****     {
1626:Generated_Source\PSoC4/CyLFClk.c ****         cyWdtCallback retCallback = (void *)0;
1627:Generated_Source\PSoC4/CyLFClk.c **** 
1628:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum < CY_WDT_NUM_OF_WDT)
1629:Generated_Source\PSoC4/CyLFClk.c ****         {
1630:Generated_Source\PSoC4/CyLFClk.c ****             retCallback = (cyWdtCallback)cySysWdtCallback[counterNum];
1631:Generated_Source\PSoC4/CyLFClk.c ****         }
1632:Generated_Source\PSoC4/CyLFClk.c ****         else
1633:Generated_Source\PSoC4/CyLFClk.c ****         {
1634:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
1635:Generated_Source\PSoC4/CyLFClk.c ****         }
1636:Generated_Source\PSoC4/CyLFClk.c **** 
1637:Generated_Source\PSoC4/CyLFClk.c ****         return(retCallback);
1638:Generated_Source\PSoC4/CyLFClk.c ****     }
1639:Generated_Source\PSoC4/CyLFClk.c **** 
1640:Generated_Source\PSoC4/CyLFClk.c **** 
1641:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1642:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtEnableCounterIsr
1643:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1644:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1645:Generated_Source\PSoC4/CyLFClk.c ****     * Enables the ISR callback servicing for the particular WDT counter
1646:Generated_Source\PSoC4/CyLFClk.c ****     *
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 37


1647:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the WDT counter.
1648:Generated_Source\PSoC4/CyLFClk.c ****     *
1649:Generated_Source\PSoC4/CyLFClk.c ****     * Value corresponds to appropriate WDT counter. For example value 1 
1650:Generated_Source\PSoC4/CyLFClk.c ****     * corresponds to second WDT counter.
1651:Generated_Source\PSoC4/CyLFClk.c ****     *
1652:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1653:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtEnableCounterIsr(uint32 counterNum)
1654:Generated_Source\PSoC4/CyLFClk.c ****     {
1655:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum <= CY_SYS_WDT_COUNTER2)
1656:Generated_Source\PSoC4/CyLFClk.c ****         {
1657:Generated_Source\PSoC4/CyLFClk.c ****             disableServicedIsr &= ~counterIntMaskTbl[counterNum];
1658:Generated_Source\PSoC4/CyLFClk.c ****             wdtIsrMask |= counterIntMaskTbl[counterNum];
1659:Generated_Source\PSoC4/CyLFClk.c ****         }
1660:Generated_Source\PSoC4/CyLFClk.c ****         else
1661:Generated_Source\PSoC4/CyLFClk.c ****         {
1662:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
1663:Generated_Source\PSoC4/CyLFClk.c ****         }
1664:Generated_Source\PSoC4/CyLFClk.c ****     }
1665:Generated_Source\PSoC4/CyLFClk.c **** 
1666:Generated_Source\PSoC4/CyLFClk.c **** 
1667:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1668:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtDisableCounterIsr
1669:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1670:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1671:Generated_Source\PSoC4/CyLFClk.c ****     * Disables the ISR callback servicing for the particular WDT counter
1672:Generated_Source\PSoC4/CyLFClk.c ****     *
1673:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the WDT counter.
1674:Generated_Source\PSoC4/CyLFClk.c ****     *
1675:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1676:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtDisableCounterIsr(uint32 counterNum)
1677:Generated_Source\PSoC4/CyLFClk.c ****     {
1678:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum <= CY_SYS_WDT_COUNTER2)
1679:Generated_Source\PSoC4/CyLFClk.c ****         {
1680:Generated_Source\PSoC4/CyLFClk.c ****             wdtIsrMask &= ~counterIntMaskTbl[counterNum];
1681:Generated_Source\PSoC4/CyLFClk.c ****         }
1682:Generated_Source\PSoC4/CyLFClk.c ****         else
1683:Generated_Source\PSoC4/CyLFClk.c ****         {
1684:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
1685:Generated_Source\PSoC4/CyLFClk.c ****         }
1686:Generated_Source\PSoC4/CyLFClk.c ****     }
1687:Generated_Source\PSoC4/CyLFClk.c **** 
1688:Generated_Source\PSoC4/CyLFClk.c **** 
1689:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1690:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtIsr
1691:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1692:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1693:Generated_Source\PSoC4/CyLFClk.c ****     * This is the handler of the WDT interrupt in CPU NVIC.
1694:Generated_Source\PSoC4/CyLFClk.c ****     *
1695:Generated_Source\PSoC4/CyLFClk.c ****     * The handler checks which WDT triggered in the interrupt and calls the 
1696:Generated_Source\PSoC4/CyLFClk.c ****     * respective callback functions configured by the user by using 
1697:Generated_Source\PSoC4/CyLFClk.c ****     * CySysWdtSetIsrCallback() API.
1698:Generated_Source\PSoC4/CyLFClk.c ****     *
1699:Generated_Source\PSoC4/CyLFClk.c ****     * The order of the callback execution is incremental. Callback-0 is
1700:Generated_Source\PSoC4/CyLFClk.c ****     * run as the first one and callback-2 is called as the last one.
1701:Generated_Source\PSoC4/CyLFClk.c ****     *
1702:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1703:Generated_Source\PSoC4/CyLFClk.c ****     * This function clears the WDT interrupt every time when it is called.
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 38


1704:Generated_Source\PSoC4/CyLFClk.c ****     * Reset after the 3rd interrupt does not happen if this function is registered
1705:Generated_Source\PSoC4/CyLFClk.c ****     * as the interrupt handler even if the "Watchdog with Interrupt" mode is
1706:Generated_Source\PSoC4/CyLFClk.c ****     * selected on the "Low Frequency Clocks" tab.
1707:Generated_Source\PSoC4/CyLFClk.c ****     *
1708:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1709:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtIsr(void)
1710:Generated_Source\PSoC4/CyLFClk.c ****     {
1711:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_WDT_COUNTER0_INT & CY_SYS_WDT_CONTROL_REG))
1712:Generated_Source\PSoC4/CyLFClk.c ****         {
1713:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_WDT_COUNTER0_INT & wdtIsrMask))
1714:Generated_Source\PSoC4/CyLFClk.c ****             {
1715:Generated_Source\PSoC4/CyLFClk.c ****                 wdtIsrMask &= ~(disableServicedIsr & CY_SYS_WDT_COUNTER0_INT);
1716:Generated_Source\PSoC4/CyLFClk.c ****                 disableServicedIsr  &= ~CY_SYS_WDT_COUNTER0_INT;
1717:Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysWdtCallback[CY_SYS_WDT_COUNTER0] != (void *) 0)
1718:Generated_Source\PSoC4/CyLFClk.c ****                 {
1719:Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysWdtCallback[CY_SYS_WDT_COUNTER0])();
1720:Generated_Source\PSoC4/CyLFClk.c ****                 }
1721:Generated_Source\PSoC4/CyLFClk.c ****             }
1722:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER0_INT);
1723:Generated_Source\PSoC4/CyLFClk.c ****         }
1724:Generated_Source\PSoC4/CyLFClk.c **** 
1725:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_WDT_COUNTER1_INT & CY_SYS_WDT_CONTROL_REG))
1726:Generated_Source\PSoC4/CyLFClk.c ****         {
1727:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_WDT_COUNTER1_INT & wdtIsrMask))
1728:Generated_Source\PSoC4/CyLFClk.c ****             {
1729:Generated_Source\PSoC4/CyLFClk.c ****                 wdtIsrMask &= ~(disableServicedIsr & CY_SYS_WDT_COUNTER1_INT);
1730:Generated_Source\PSoC4/CyLFClk.c ****                 disableServicedIsr  &= ~CY_SYS_WDT_COUNTER1_INT;
1731:Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysWdtCallback[CY_SYS_WDT_COUNTER1] != (void *) 0)
1732:Generated_Source\PSoC4/CyLFClk.c ****                 {
1733:Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysWdtCallback[CY_SYS_WDT_COUNTER1])();
1734:Generated_Source\PSoC4/CyLFClk.c ****                 }
1735:Generated_Source\PSoC4/CyLFClk.c ****             }
1736:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER1_INT);
1737:Generated_Source\PSoC4/CyLFClk.c ****         }
1738:Generated_Source\PSoC4/CyLFClk.c **** 
1739:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_WDT_COUNTER2_INT & CY_SYS_WDT_CONTROL_REG))
1740:Generated_Source\PSoC4/CyLFClk.c ****         {
1741:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_WDT_COUNTER2_INT & wdtIsrMask))
1742:Generated_Source\PSoC4/CyLFClk.c ****             {
1743:Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysWdtCallback[CY_SYS_WDT_COUNTER2] != (void *) 0)
1744:Generated_Source\PSoC4/CyLFClk.c ****                 {
1745:Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysWdtCallback[CY_SYS_WDT_COUNTER2])();
1746:Generated_Source\PSoC4/CyLFClk.c ****                 }
1747:Generated_Source\PSoC4/CyLFClk.c ****             }
1748:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER2_INT);
1749:Generated_Source\PSoC4/CyLFClk.c ****         }
1750:Generated_Source\PSoC4/CyLFClk.c ****     }
1751:Generated_Source\PSoC4/CyLFClk.c **** 
1752:Generated_Source\PSoC4/CyLFClk.c **** 
1753:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1754:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWatchdogFeed
1755:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1756:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1757:Generated_Source\PSoC4/CyLFClk.c ****     * Feeds the corresponded Watchdog Counter before it causes the device reset.
1758:Generated_Source\PSoC4/CyLFClk.c ****     *
1759:Generated_Source\PSoC4/CyLFClk.c ****     * Supported only for first WDT0 and second WDT1 counters in the "Watchdog" or 
1760:Generated_Source\PSoC4/CyLFClk.c ****     * "Watchdog w/ Interrupts" modes.
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 39


1761:Generated_Source\PSoC4/CyLFClk.c ****     *
1762:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum
1763:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0 - Feeds the Counter 0 <br>
1764:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1 - Feeds the Counter 1
1765:Generated_Source\PSoC4/CyLFClk.c ****     *
1766:Generated_Source\PSoC4/CyLFClk.c ****     * Value of counterNum corresponds to appropriate counter. For example value 1 
1767:Generated_Source\PSoC4/CyLFClk.c ****     * corresponds to second WDT1 Counter.
1768:Generated_Source\PSoC4/CyLFClk.c ****     *
1769:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1770:Generated_Source\PSoC4/CyLFClk.c ****     * Clears the WDT counter in the "Watchdog" mode or clears the WDT interrupt in
1771:Generated_Source\PSoC4/CyLFClk.c ****     * "Watchdog w/ Interrupts" mode. Does nothing in other modes.
1772:Generated_Source\PSoC4/CyLFClk.c ****     *
1773:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1774:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWatchdogFeed(uint32 counterNum)
1775:Generated_Source\PSoC4/CyLFClk.c ****     {
1776:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum == CY_SYS_WDT_COUNTER0)
1777:Generated_Source\PSoC4/CyLFClk.c ****         {
1778:Generated_Source\PSoC4/CyLFClk.c ****             if(CY_SYS_WDT_MODE_INT_RESET == CySysWdtGetMode(counterNum))
1779:Generated_Source\PSoC4/CyLFClk.c ****             {
1780:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER0_INT);
1781:Generated_Source\PSoC4/CyLFClk.c ****             }
1782:Generated_Source\PSoC4/CyLFClk.c ****             else if(CY_SYS_WDT_MODE_RESET == CySysWdtGetMode(counterNum))
1783:Generated_Source\PSoC4/CyLFClk.c ****             {
1784:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtResetCounters(CY_SYS_WDT_COUNTER0_RESET);
1785:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER0_INT);
1786:Generated_Source\PSoC4/CyLFClk.c ****             }
1787:Generated_Source\PSoC4/CyLFClk.c ****             else
1788:Generated_Source\PSoC4/CyLFClk.c ****             {
1789:Generated_Source\PSoC4/CyLFClk.c ****                 /* Do nothing. */
1790:Generated_Source\PSoC4/CyLFClk.c ****             }
1791:Generated_Source\PSoC4/CyLFClk.c ****         }
1792:Generated_Source\PSoC4/CyLFClk.c ****         else if(counterNum == CY_SYS_WDT_COUNTER1)
1793:Generated_Source\PSoC4/CyLFClk.c ****         {
1794:Generated_Source\PSoC4/CyLFClk.c ****             if(CY_SYS_WDT_MODE_INT_RESET == CySysWdtGetMode(counterNum))
1795:Generated_Source\PSoC4/CyLFClk.c ****             {
1796:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER1_INT);
1797:Generated_Source\PSoC4/CyLFClk.c ****             }
1798:Generated_Source\PSoC4/CyLFClk.c ****             else if(CY_SYS_WDT_MODE_RESET == CySysWdtGetMode(counterNum))
1799:Generated_Source\PSoC4/CyLFClk.c ****             {
1800:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtResetCounters(CY_SYS_WDT_COUNTER1_RESET);
1801:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER1_INT);
1802:Generated_Source\PSoC4/CyLFClk.c ****             }
1803:Generated_Source\PSoC4/CyLFClk.c ****             else
1804:Generated_Source\PSoC4/CyLFClk.c ****             {
1805:Generated_Source\PSoC4/CyLFClk.c ****                 /* Do nothing. */
1806:Generated_Source\PSoC4/CyLFClk.c ****             }
1807:Generated_Source\PSoC4/CyLFClk.c ****         }
1808:Generated_Source\PSoC4/CyLFClk.c ****         else
1809:Generated_Source\PSoC4/CyLFClk.c ****         {
1810:Generated_Source\PSoC4/CyLFClk.c ****             /* Do nothing. */
1811:Generated_Source\PSoC4/CyLFClk.c ****         }
1812:Generated_Source\PSoC4/CyLFClk.c ****     }
1813:Generated_Source\PSoC4/CyLFClk.c **** 
1814:Generated_Source\PSoC4/CyLFClk.c **** 
1815:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1816:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkLfclkPosedgeCatch
1817:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 40


1818:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
1819:Generated_Source\PSoC4/CyLFClk.c ****     * Returns once the LFCLK positive edge occurred.
1820:Generated_Source\PSoC4/CyLFClk.c ****     *
1821:Generated_Source\PSoC4/CyLFClk.c ****     * CySysClkLfclkPosedgeRestore() should be called after this function
1822:Generated_Source\PSoC4/CyLFClk.c ****     * to restore the WDT configuration.
1823:Generated_Source\PSoC4/CyLFClk.c ****     *
1824:Generated_Source\PSoC4/CyLFClk.c ****     * A pair of the CySysClkLfclkPosedgeCatch() and CySysClkLfclkPosedgeRestore()
1825:Generated_Source\PSoC4/CyLFClk.c ****     * functions is expected to be called inside a critical section.
1826:Generated_Source\PSoC4/CyLFClk.c ****     *
1827:Generated_Source\PSoC4/CyLFClk.c ****     * To ensure that the WDT counter value is read until it changes, the enabled
1828:Generated_Source\PSoC4/CyLFClk.c ****     * WDT counter is used. If no counter is enabled, counter 0 is enabled.
1829:Generated_Source\PSoC4/CyLFClk.c ****     * And after the LFCLK source is switched, the counter 0 configuration
1830:Generated_Source\PSoC4/CyLFClk.c ****     * is restored.
1831:Generated_Source\PSoC4/CyLFClk.c ****     *
1832:Generated_Source\PSoC4/CyLFClk.c ****     * Not applicable for the PSoC 4000 / PSoC 4000S / PSoC 4100S / PSoC Analog 
1833:Generated_Source\PSoC4/CyLFClk.c ****     * Coprocessor devices.
1834:Generated_Source\PSoC4/CyLFClk.c ****     *
1835:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1836:Generated_Source\PSoC4/CyLFClk.c ****     * This function has no effect if WDT is locked (CySysWdtLock() is
1837:Generated_Source\PSoC4/CyLFClk.c ****     * called). Call CySysWdtUnlock() to unlock WDT.
1838:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
1839:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1840:Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeCatch(void)
1841:Generated_Source\PSoC4/CyLFClk.c ****     {
1842:Generated_Source\PSoC4/CyLFClk.c ****         uint32 firstCount;
1843:Generated_Source\PSoC4/CyLFClk.c ****         static uint32 lfclkPosedgeEnabledWdtCounter = 0u;
1844:Generated_Source\PSoC4/CyLFClk.c **** 
1845:Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0))
1846:Generated_Source\PSoC4/CyLFClk.c ****         {
1847:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER0;
1848:Generated_Source\PSoC4/CyLFClk.c ****         }
1849:Generated_Source\PSoC4/CyLFClk.c ****         else if (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1))
1850:Generated_Source\PSoC4/CyLFClk.c ****         {
1851:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER1;
1852:Generated_Source\PSoC4/CyLFClk.c ****         }
1853:Generated_Source\PSoC4/CyLFClk.c ****         else if (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
1854:Generated_Source\PSoC4/CyLFClk.c ****         {
1855:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER2;
1856:Generated_Source\PSoC4/CyLFClk.c ****         }
1857:Generated_Source\PSoC4/CyLFClk.c ****         else /* All WDT counters are disabled */
1858:Generated_Source\PSoC4/CyLFClk.c ****         {
1859:Generated_Source\PSoC4/CyLFClk.c ****             /* Configure WDT counter # 0 */
1860:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeWdtCounter0Enabled = 1u;
1861:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER0;
1862:Generated_Source\PSoC4/CyLFClk.c **** 
1863:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeWdtCounter0Mode = CySysWdtGetMode(CY_SYS_WDT_COUNTER0);
1864:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtSetMode(CY_SYS_WDT_COUNTER0, CY_SYS_WDT_MODE_NONE);
1865:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtEnable(CY_SYS_WDT_COUNTER0_MASK);
1866:Generated_Source\PSoC4/CyLFClk.c ****         }
1867:Generated_Source\PSoC4/CyLFClk.c **** 
1868:Generated_Source\PSoC4/CyLFClk.c ****         firstCount = CySysWdtGetCount(lfclkPosedgeEnabledWdtCounter);
1869:Generated_Source\PSoC4/CyLFClk.c ****         while (CySysWdtGetCount(lfclkPosedgeEnabledWdtCounter) == firstCount)
1870:Generated_Source\PSoC4/CyLFClk.c ****         {
1871:Generated_Source\PSoC4/CyLFClk.c ****             /* Wait for counter to increment */
1872:Generated_Source\PSoC4/CyLFClk.c ****         }
1873:Generated_Source\PSoC4/CyLFClk.c ****     }
1874:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 41


1875:Generated_Source\PSoC4/CyLFClk.c **** 
1876:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1877:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkLfclkPosedgeRestore
1878:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1879:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
1880:Generated_Source\PSoC4/CyLFClk.c ****     *  Restores the WDT configuration after a CySysClkLfclkPosedgeCatch() call.
1881:Generated_Source\PSoC4/CyLFClk.c ****     *
1882:Generated_Source\PSoC4/CyLFClk.c ****     *  A pair of the CySysClkLfclkPosedgeCatch() and CySysClkLfclkPosedgeRestore()
1883:Generated_Source\PSoC4/CyLFClk.c ****     *  functions is expected to be called inside a critical section.
1884:Generated_Source\PSoC4/CyLFClk.c ****     *
1885:Generated_Source\PSoC4/CyLFClk.c ****     * Not applicable for the PSoC 4000/PSoC 4000S / PSoC 4100S / PSoC Analog 
1886:Generated_Source\PSoC4/CyLFClk.c ****     * Coprocessor devices.
1887:Generated_Source\PSoC4/CyLFClk.c ****     *
1888:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1889:Generated_Source\PSoC4/CyLFClk.c ****     *  This function has no effect if WDT is locked (CySysWdtLock() is
1890:Generated_Source\PSoC4/CyLFClk.c ****     *  called). Call CySysWdtUnlock() to unlock WDT.
1891:Generated_Source\PSoC4/CyLFClk.c ****     *
1892:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
1893:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1894:Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeRestore(void)
1895:Generated_Source\PSoC4/CyLFClk.c ****     {
1896:Generated_Source\PSoC4/CyLFClk.c ****         if (lfclkPosedgeWdtCounter0Enabled != 0u)
1897:Generated_Source\PSoC4/CyLFClk.c ****         {
1898:Generated_Source\PSoC4/CyLFClk.c ****             /* Restore counter # 0 configuration and force its shutdown */
1899:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONTROL_REG &= (uint32)(~CY_SYS_WDT_COUNTER0_MASK);
1900:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtSetMode(CY_SYS_WDT_COUNTER0, lfclkPosedgeWdtCounter0Mode);
1901:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeWdtCounter0Enabled = 0u;
1902:Generated_Source\PSoC4/CyLFClk.c ****         }
1903:Generated_Source\PSoC4/CyLFClk.c ****     }
1904:Generated_Source\PSoC4/CyLFClk.c **** 
1905:Generated_Source\PSoC4/CyLFClk.c **** #else
1906:Generated_Source\PSoC4/CyLFClk.c **** 
1907:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1908:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetEnabledStatus
1909:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1910:Generated_Source\PSoC4/CyLFClk.c ****     *
1911:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the enabled status of the WDT counter.
1912:Generated_Source\PSoC4/CyLFClk.c ****     *
1913:Generated_Source\PSoC4/CyLFClk.c ****     * \return The status of the WDT counter:
1914:Generated_Source\PSoC4/CyLFClk.c ****     * \return 0 - Counter is disabled
1915:Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 - Counter is enabled
1916:Generated_Source\PSoC4/CyLFClk.c ****     *
1917:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1918:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetEnabledStatus(void)
1919:Generated_Source\PSoC4/CyLFClk.c ****     {
 373              		.loc 1 1919 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377              		@ link register save eliminated.
1920:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_DISABLE_KEY_REG == CY_SYS_WDT_KEY) ? (uint32) 0u : (uint32) 1u);
 378              		.loc 1 1920 0
 379 0000 034B     		ldr	r3, .L31
1921:Generated_Source\PSoC4/CyLFClk.c ****     }
 380              		.loc 1 1921 0
 381              		@ sp needed
1920:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_DISABLE_KEY_REG == CY_SYS_WDT_KEY) ? (uint32) 0u : (uint32) 1u);
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 42


 382              		.loc 1 1920 0
 383 0002 1868     		ldr	r0, [r3]
 384 0004 034B     		ldr	r3, .L31+4
 385 0006 9C46     		mov	ip, r3
 386 0008 6044     		add	r0, r0, ip
 387 000a 431E     		subs	r3, r0, #1
 388 000c 9841     		sbcs	r0, r0, r3
 389              		.loc 1 1921 0
 390 000e 7047     		bx	lr
 391              	.L32:
 392              		.align	2
 393              	.L31:
 394 0010 38000340 		.word	1073938488
 395 0014 9B771253 		.word	1393719195
 396              		.cfi_endproc
 397              	.LFE5:
 398              		.size	CySysWdtGetEnabledStatus, .-CySysWdtGetEnabledStatus
 399              		.section	.text.CySysWdtEnable,"ax",%progbits
 400              		.align	2
 401              		.global	CySysWdtEnable
 402              		.code	16
 403              		.thumb_func
 404              		.type	CySysWdtEnable, %function
 405              	CySysWdtEnable:
 406              	.LFB6:
1922:Generated_Source\PSoC4/CyLFClk.c **** 
1923:Generated_Source\PSoC4/CyLFClk.c **** 
1924:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1925:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtEnable
1926:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1927:Generated_Source\PSoC4/CyLFClk.c ****     *
1928:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1929:Generated_Source\PSoC4/CyLFClk.c ****     * Enables watchdog timer reset generation.
1930:Generated_Source\PSoC4/CyLFClk.c ****     *
1931:Generated_Source\PSoC4/CyLFClk.c ****     * CySysWdtClearInterrupt() feeds the watchdog. Two unserviced interrupts lead 
1932:Generated_Source\PSoC4/CyLFClk.c ****     * to a system reset (i.e. at the third match).
1933:Generated_Source\PSoC4/CyLFClk.c ****     *
1934:Generated_Source\PSoC4/CyLFClk.c ****     * ILO is enabled by the hardware once WDT is started.
1935:Generated_Source\PSoC4/CyLFClk.c ****     *
1936:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1937:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtEnable(void)
1938:Generated_Source\PSoC4/CyLFClk.c ****     {
 407              		.loc 1 1938 0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 0
 410              		@ frame_needed = 0, uses_anonymous_args = 0
 411              		@ link register save eliminated.
1939:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_DISABLE_KEY_REG = 0u;
 412              		.loc 1 1939 0
 413 0000 0022     		movs	r2, #0
 414 0002 014B     		ldr	r3, .L34
1940:Generated_Source\PSoC4/CyLFClk.c ****     }
 415              		.loc 1 1940 0
 416              		@ sp needed
1939:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_DISABLE_KEY_REG = 0u;
 417              		.loc 1 1939 0
 418 0004 1A60     		str	r2, [r3]
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 43


 419              		.loc 1 1940 0
 420 0006 7047     		bx	lr
 421              	.L35:
 422              		.align	2
 423              	.L34:
 424 0008 38000340 		.word	1073938488
 425              		.cfi_endproc
 426              	.LFE6:
 427              		.size	CySysWdtEnable, .-CySysWdtEnable
 428              		.section	.text.CySysWdtDisable,"ax",%progbits
 429              		.align	2
 430              		.global	CySysWdtDisable
 431              		.code	16
 432              		.thumb_func
 433              		.type	CySysWdtDisable, %function
 434              	CySysWdtDisable:
 435              	.LFB7:
1941:Generated_Source\PSoC4/CyLFClk.c **** 
1942:Generated_Source\PSoC4/CyLFClk.c **** 
1943:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1944:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtDisable
1945:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1946:Generated_Source\PSoC4/CyLFClk.c ****     *
1947:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Disables the WDT reset generation.
1948:Generated_Source\PSoC4/CyLFClk.c ****     *
1949:Generated_Source\PSoC4/CyLFClk.c ****     * This function unlocks the ENABLE bit in the CLK_ILO_CONFIG registers and
1950:Generated_Source\PSoC4/CyLFClk.c ****     * enables the user to disable ILO.
1951:Generated_Source\PSoC4/CyLFClk.c ****     *
1952:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1953:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtDisable(void)
1954:Generated_Source\PSoC4/CyLFClk.c ****     {
 436              		.loc 1 1954 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440              		@ link register save eliminated.
1955:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_DISABLE_KEY_REG = CY_SYS_WDT_KEY;
 441              		.loc 1 1955 0
 442 0000 014A     		ldr	r2, .L37
 443 0002 024B     		ldr	r3, .L37+4
1956:Generated_Source\PSoC4/CyLFClk.c ****     }
 444              		.loc 1 1956 0
 445              		@ sp needed
1955:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_DISABLE_KEY_REG = CY_SYS_WDT_KEY;
 446              		.loc 1 1955 0
 447 0004 1A60     		str	r2, [r3]
 448              		.loc 1 1956 0
 449 0006 7047     		bx	lr
 450              	.L38:
 451              		.align	2
 452              	.L37:
 453 0008 6588EDAC 		.word	-1393719195
 454 000c 38000340 		.word	1073938488
 455              		.cfi_endproc
 456              	.LFE7:
 457              		.size	CySysWdtDisable, .-CySysWdtDisable
 458              		.section	.text.CySysWdtSetMatch,"ax",%progbits
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 44


 459              		.align	2
 460              		.global	CySysWdtSetMatch
 461              		.code	16
 462              		.thumb_func
 463              		.type	CySysWdtSetMatch, %function
 464              	CySysWdtSetMatch:
 465              	.LFB8:
1957:Generated_Source\PSoC4/CyLFClk.c **** 
1958:Generated_Source\PSoC4/CyLFClk.c **** 
1959:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1960:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetMatch
1961:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1962:Generated_Source\PSoC4/CyLFClk.c ****     *
1963:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures the WDT counter match comparison value.
1964:Generated_Source\PSoC4/CyLFClk.c ****     *
1965:Generated_Source\PSoC4/CyLFClk.c ****     * \param match Valid range [0-65535]. The value to be used to match against 
1966:Generated_Source\PSoC4/CyLFClk.c ****     * the counter.
1967:Generated_Source\PSoC4/CyLFClk.c ****     *
1968:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1969:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetMatch(uint32 match)
1970:Generated_Source\PSoC4/CyLFClk.c ****     {
 466              		.loc 1 1970 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470              		@ link register save eliminated.
 471              	.LVL24:
1971:Generated_Source\PSoC4/CyLFClk.c ****         match &= CY_SYS_WDT_MATCH_MASK;
1972:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_MATCH_REG = (CY_SYS_WDT_MATCH_REG & (uint32)(~CY_SYS_WDT_MATCH_MASK)) | match;
 472              		.loc 1 1972 0
 473 0000 044A     		ldr	r2, .L40
 474 0002 0004     		lsls	r0, r0, #16
 475              	.LVL25:
 476 0004 1368     		ldr	r3, [r2]
 477 0006 000C     		lsrs	r0, r0, #16
 478 0008 1B0C     		lsrs	r3, r3, #16
 479 000a 1B04     		lsls	r3, r3, #16
 480 000c 1843     		orrs	r0, r3
 481 000e 1060     		str	r0, [r2]
1973:Generated_Source\PSoC4/CyLFClk.c ****     }
 482              		.loc 1 1973 0
 483              		@ sp needed
 484 0010 7047     		bx	lr
 485              	.L41:
 486 0012 C046     		.align	2
 487              	.L40:
 488 0014 40000340 		.word	1073938496
 489              		.cfi_endproc
 490              	.LFE8:
 491              		.size	CySysWdtSetMatch, .-CySysWdtSetMatch
 492              		.section	.text.CySysWdtGetMatch,"ax",%progbits
 493              		.align	2
 494              		.global	CySysWdtGetMatch
 495              		.code	16
 496              		.thumb_func
 497              		.type	CySysWdtGetMatch, %function
 498              	CySysWdtGetMatch:
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 45


 499              	.LFB9:
1974:Generated_Source\PSoC4/CyLFClk.c **** 
1975:Generated_Source\PSoC4/CyLFClk.c **** 
1976:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1977:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetMatch
1978:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1979:Generated_Source\PSoC4/CyLFClk.c ****     *
1980:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the WDT counter match comparison value.
1981:Generated_Source\PSoC4/CyLFClk.c ****     *
1982:Generated_Source\PSoC4/CyLFClk.c ****     * \return The counter match value.
1983:Generated_Source\PSoC4/CyLFClk.c ****     *
1984:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1985:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetMatch(void)
1986:Generated_Source\PSoC4/CyLFClk.c ****     {
 500              		.loc 1 1986 0
 501              		.cfi_startproc
 502              		@ args = 0, pretend = 0, frame = 0
 503              		@ frame_needed = 0, uses_anonymous_args = 0
 504              		@ link register save eliminated.
1987:Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WDT_MATCH_REG & CY_SYS_WDT_MATCH_MASK);
 505              		.loc 1 1987 0
 506 0000 024B     		ldr	r3, .L43
1988:Generated_Source\PSoC4/CyLFClk.c ****     }
 507              		.loc 1 1988 0
 508              		@ sp needed
1987:Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WDT_MATCH_REG & CY_SYS_WDT_MATCH_MASK);
 509              		.loc 1 1987 0
 510 0002 1868     		ldr	r0, [r3]
 511 0004 0004     		lsls	r0, r0, #16
 512 0006 000C     		lsrs	r0, r0, #16
 513              		.loc 1 1988 0
 514 0008 7047     		bx	lr
 515              	.L44:
 516 000a C046     		.align	2
 517              	.L43:
 518 000c 40000340 		.word	1073938496
 519              		.cfi_endproc
 520              	.LFE9:
 521              		.size	CySysWdtGetMatch, .-CySysWdtGetMatch
 522              		.section	.text.CySysWdtGetCount,"ax",%progbits
 523              		.align	2
 524              		.global	CySysWdtGetCount
 525              		.code	16
 526              		.thumb_func
 527              		.type	CySysWdtGetCount, %function
 528              	CySysWdtGetCount:
 529              	.LFB10:
1989:Generated_Source\PSoC4/CyLFClk.c **** 
1990:Generated_Source\PSoC4/CyLFClk.c **** 
1991:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1992:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetCount
1993:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1994:Generated_Source\PSoC4/CyLFClk.c ****     *
1995:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the current WDT counter value.
1996:Generated_Source\PSoC4/CyLFClk.c ****     *
1997:Generated_Source\PSoC4/CyLFClk.c ****     * \return A live counter value.
1998:Generated_Source\PSoC4/CyLFClk.c ****     *
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 46


1999:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2000:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetCount(void)
2001:Generated_Source\PSoC4/CyLFClk.c ****     {
 530              		.loc 1 2001 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 0
 533              		@ frame_needed = 0, uses_anonymous_args = 0
 534              		@ link register save eliminated.
2002:Generated_Source\PSoC4/CyLFClk.c ****         return ((uint32)CY_SYS_WDT_COUNTER_REG);
 535              		.loc 1 2002 0
 536 0000 014B     		ldr	r3, .L46
2003:Generated_Source\PSoC4/CyLFClk.c ****     }
 537              		.loc 1 2003 0
 538              		@ sp needed
2002:Generated_Source\PSoC4/CyLFClk.c ****         return ((uint32)CY_SYS_WDT_COUNTER_REG);
 539              		.loc 1 2002 0
 540 0002 1868     		ldr	r0, [r3]
 541              		.loc 1 2003 0
 542 0004 7047     		bx	lr
 543              	.L47:
 544 0006 C046     		.align	2
 545              	.L46:
 546 0008 3C000340 		.word	1073938492
 547              		.cfi_endproc
 548              	.LFE10:
 549              		.size	CySysWdtGetCount, .-CySysWdtGetCount
 550              		.section	.text.CySysWdtSetIgnoreBits,"ax",%progbits
 551              		.align	2
 552              		.global	CySysWdtSetIgnoreBits
 553              		.code	16
 554              		.thumb_func
 555              		.type	CySysWdtSetIgnoreBits, %function
 556              	CySysWdtSetIgnoreBits:
 557              	.LFB11:
2004:Generated_Source\PSoC4/CyLFClk.c **** 
2005:Generated_Source\PSoC4/CyLFClk.c **** 
2006:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2007:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetIgnoreBits
2008:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2009:Generated_Source\PSoC4/CyLFClk.c ****     *
2010:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2011:Generated_Source\PSoC4/CyLFClk.c ****     * Configures the number of the MSB bits of the watchdog timer that are not
2012:Generated_Source\PSoC4/CyLFClk.c ****     * checked against the match.
2013:Generated_Source\PSoC4/CyLFClk.c ****     *
2014:Generated_Source\PSoC4/CyLFClk.c ****     * \param bitsNum Valid range [0-15]. The number of the MSB bits.
2015:Generated_Source\PSoC4/CyLFClk.c ****     *
2016:Generated_Source\PSoC4/CyLFClk.c ****     * \details The value of bitsNum controls the time-to-reset of the watchdog
2017:Generated_Source\PSoC4/CyLFClk.c ****     * (which happens after 3 successive matches).
2018:Generated_Source\PSoC4/CyLFClk.c ****     *
2019:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2020:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetIgnoreBits(uint32 bitsNum)
2021:Generated_Source\PSoC4/CyLFClk.c ****     {
 558              		.loc 1 2021 0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 0
 561              		@ frame_needed = 0, uses_anonymous_args = 0
 562              	.LVL26:
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 47


2022:Generated_Source\PSoC4/CyLFClk.c ****         bitsNum = ((uint32)(bitsNum << CY_SYS_WDT_IGNORE_BITS_SHIFT) & CY_SYS_WDT_IGNORE_BITS_MASK)
2023:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_MATCH_REG = (CY_SYS_WDT_MATCH_REG & (uint32)(~CY_SYS_WDT_IGNORE_BITS_MASK)) | bi
 563              		.loc 1 2023 0
 564 0000 F021     		movs	r1, #240
2021:Generated_Source\PSoC4/CyLFClk.c ****         bitsNum = ((uint32)(bitsNum << CY_SYS_WDT_IGNORE_BITS_SHIFT) & CY_SYS_WDT_IGNORE_BITS_MASK)
 565              		.loc 1 2021 0
 566 0002 10B5     		push	{r4, lr}
 567              		.cfi_def_cfa_offset 8
 568              		.cfi_offset 4, -8
 569              		.cfi_offset 14, -4
 570              		.loc 1 2023 0
 571 0004 044C     		ldr	r4, .L49
2022:Generated_Source\PSoC4/CyLFClk.c ****         bitsNum = ((uint32)(bitsNum << CY_SYS_WDT_IGNORE_BITS_SHIFT) & CY_SYS_WDT_IGNORE_BITS_MASK)
 572              		.loc 1 2022 0
 573 0006 0204     		lsls	r2, r0, #16
 574              	.LVL27:
 575              		.loc 1 2023 0
 576 0008 044B     		ldr	r3, .L49+4
 577 000a 2068     		ldr	r0, [r4]
 578 000c 0903     		lsls	r1, r1, #12
 579 000e 0A40     		ands	r2, r1
 580              	.LVL28:
 581 0010 0340     		ands	r3, r0
 582 0012 1A43     		orrs	r2, r3
 583 0014 2260     		str	r2, [r4]
2024:Generated_Source\PSoC4/CyLFClk.c ****     }
 584              		.loc 1 2024 0
 585              		@ sp needed
 586 0016 10BD     		pop	{r4, pc}
 587              	.L50:
 588              		.align	2
 589              	.L49:
 590 0018 40000340 		.word	1073938496
 591 001c FFFFF0FF 		.word	-983041
 592              		.cfi_endproc
 593              	.LFE11:
 594              		.size	CySysWdtSetIgnoreBits, .-CySysWdtSetIgnoreBits
 595              		.section	.text.CySysWdtGetIgnoreBits,"ax",%progbits
 596              		.align	2
 597              		.global	CySysWdtGetIgnoreBits
 598              		.code	16
 599              		.thumb_func
 600              		.type	CySysWdtGetIgnoreBits, %function
 601              	CySysWdtGetIgnoreBits:
 602              	.LFB12:
2025:Generated_Source\PSoC4/CyLFClk.c **** 
2026:Generated_Source\PSoC4/CyLFClk.c **** 
2027:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2028:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetIgnoreBits
2029:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2030:Generated_Source\PSoC4/CyLFClk.c ****     *
2031:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2032:Generated_Source\PSoC4/CyLFClk.c ****     * Reads the number of the  MSB bits of the watchdog timer that are not
2033:Generated_Source\PSoC4/CyLFClk.c ****     * checked against the match.
2034:Generated_Source\PSoC4/CyLFClk.c ****     *
2035:Generated_Source\PSoC4/CyLFClk.c ****     * \return The number of the MSB bits.
2036:Generated_Source\PSoC4/CyLFClk.c ****     *
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 48


2037:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2038:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetIgnoreBits(void)
2039:Generated_Source\PSoC4/CyLFClk.c ****     {
 603              		.loc 1 2039 0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 607              		@ link register save eliminated.
2040:Generated_Source\PSoC4/CyLFClk.c ****         return((uint32)((CY_SYS_WDT_MATCH_REG & CY_SYS_WDT_IGNORE_BITS_MASK) >> CY_SYS_WDT_IGNORE_B
 608              		.loc 1 2040 0
 609 0000 024B     		ldr	r3, .L52
2041:Generated_Source\PSoC4/CyLFClk.c ****     }
 610              		.loc 1 2041 0
 611              		@ sp needed
2040:Generated_Source\PSoC4/CyLFClk.c ****         return((uint32)((CY_SYS_WDT_MATCH_REG & CY_SYS_WDT_IGNORE_BITS_MASK) >> CY_SYS_WDT_IGNORE_B
 612              		.loc 1 2040 0
 613 0002 1868     		ldr	r0, [r3]
 614 0004 0003     		lsls	r0, r0, #12
 615 0006 000F     		lsrs	r0, r0, #28
 616              		.loc 1 2041 0
 617 0008 7047     		bx	lr
 618              	.L53:
 619 000a C046     		.align	2
 620              	.L52:
 621 000c 40000340 		.word	1073938496
 622              		.cfi_endproc
 623              	.LFE12:
 624              		.size	CySysWdtGetIgnoreBits, .-CySysWdtGetIgnoreBits
 625              		.section	.text.CySysWdtClearInterrupt,"ax",%progbits
 626              		.align	2
 627              		.global	CySysWdtClearInterrupt
 628              		.code	16
 629              		.thumb_func
 630              		.type	CySysWdtClearInterrupt, %function
 631              	CySysWdtClearInterrupt:
 632              	.LFB13:
2042:Generated_Source\PSoC4/CyLFClk.c **** 
2043:Generated_Source\PSoC4/CyLFClk.c **** 
2044:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2045:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtClearInterrupt
2046:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2047:Generated_Source\PSoC4/CyLFClk.c ****     *
2048:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2049:Generated_Source\PSoC4/CyLFClk.c ****     * Feeds the watchdog.
2050:Generated_Source\PSoC4/CyLFClk.c ****     * Cleans the WDT match flag which is set every time the WDT counter reaches a 
2051:Generated_Source\PSoC4/CyLFClk.c ****     * WDT match value. Two unserviced interrupts lead to a system reset 
2052:Generated_Source\PSoC4/CyLFClk.c ****     * (i.e. at the third match).
2053:Generated_Source\PSoC4/CyLFClk.c ****     *
2054:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2055:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtClearInterrupt(void)
2056:Generated_Source\PSoC4/CyLFClk.c ****     {
 633              		.loc 1 2056 0
 634              		.cfi_startproc
 635              		@ args = 0, pretend = 0, frame = 0
 636              		@ frame_needed = 0, uses_anonymous_args = 0
 637              		@ link register save eliminated.
2057:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_REG |= CY_SYS_WDT_LOWER_BIT_MASK;
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 49


 638              		.loc 1 2057 0
 639 0000 0123     		movs	r3, #1
 640 0002 024A     		ldr	r2, .L55
2058:Generated_Source\PSoC4/CyLFClk.c ****     }
 641              		.loc 1 2058 0
 642              		@ sp needed
2057:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_REG |= CY_SYS_WDT_LOWER_BIT_MASK;
 643              		.loc 1 2057 0
 644 0004 1168     		ldr	r1, [r2]
 645 0006 0B43     		orrs	r3, r1
 646 0008 1360     		str	r3, [r2]
 647              		.loc 1 2058 0
 648 000a 7047     		bx	lr
 649              	.L56:
 650              		.align	2
 651              	.L55:
 652 000c 44000340 		.word	1073938500
 653              		.cfi_endproc
 654              	.LFE13:
 655              		.size	CySysWdtClearInterrupt, .-CySysWdtClearInterrupt
 656              		.section	.text.CySysWdtMaskInterrupt,"ax",%progbits
 657              		.align	2
 658              		.global	CySysWdtMaskInterrupt
 659              		.code	16
 660              		.thumb_func
 661              		.type	CySysWdtMaskInterrupt, %function
 662              	CySysWdtMaskInterrupt:
 663              	.LFB14:
2059:Generated_Source\PSoC4/CyLFClk.c **** 
2060:Generated_Source\PSoC4/CyLFClk.c **** 
2061:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2062:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtMaskInterrupt
2063:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2064:Generated_Source\PSoC4/CyLFClk.c ****     *
2065:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2066:Generated_Source\PSoC4/CyLFClk.c ****     * After masking interrupts from WDT, they are not passed to CPU.
2067:Generated_Source\PSoC4/CyLFClk.c ****     * This function does not disable WDT reset generation.
2068:Generated_Source\PSoC4/CyLFClk.c ****     *
2069:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2070:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtMaskInterrupt(void)
2071:Generated_Source\PSoC4/CyLFClk.c ****     {
 664              		.loc 1 2071 0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 0
 667              		@ frame_needed = 0, uses_anonymous_args = 0
 668              		@ link register save eliminated.
2072:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_MASK_REG &= (uint32)(~ (uint32)CY_SYS_WDT_LOWER_BIT_MASK);
 669              		.loc 1 2072 0
 670 0000 0121     		movs	r1, #1
 671 0002 024A     		ldr	r2, .L58
2073:Generated_Source\PSoC4/CyLFClk.c ****     }
 672              		.loc 1 2073 0
 673              		@ sp needed
2072:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_MASK_REG &= (uint32)(~ (uint32)CY_SYS_WDT_LOWER_BIT_MASK);
 674              		.loc 1 2072 0
 675 0004 1368     		ldr	r3, [r2]
 676 0006 8B43     		bics	r3, r1
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 50


 677 0008 1360     		str	r3, [r2]
 678              		.loc 1 2073 0
 679 000a 7047     		bx	lr
 680              	.L59:
 681              		.align	2
 682              	.L58:
 683 000c 4C000340 		.word	1073938508
 684              		.cfi_endproc
 685              	.LFE14:
 686              		.size	CySysWdtMaskInterrupt, .-CySysWdtMaskInterrupt
 687              		.section	.text.CySysWdtUnmaskInterrupt,"ax",%progbits
 688              		.align	2
 689              		.global	CySysWdtUnmaskInterrupt
 690              		.code	16
 691              		.thumb_func
 692              		.type	CySysWdtUnmaskInterrupt, %function
 693              	CySysWdtUnmaskInterrupt:
 694              	.LFB15:
2074:Generated_Source\PSoC4/CyLFClk.c **** 
2075:Generated_Source\PSoC4/CyLFClk.c **** 
2076:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2077:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtUnmaskInterrupt
2078:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2079:Generated_Source\PSoC4/CyLFClk.c ****     *
2080:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2081:Generated_Source\PSoC4/CyLFClk.c ****     * After unmasking interrupts from WDT, they are passed to CPU.
2082:Generated_Source\PSoC4/CyLFClk.c ****     * This function does not impact the reset generation.
2083:Generated_Source\PSoC4/CyLFClk.c ****     *
2084:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2085:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtUnmaskInterrupt(void)
2086:Generated_Source\PSoC4/CyLFClk.c ****     {
 695              		.loc 1 2086 0
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 0
 698              		@ frame_needed = 0, uses_anonymous_args = 0
 699              		@ link register save eliminated.
2087:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_MASK_REG |= CY_SYS_WDT_LOWER_BIT_MASK;
 700              		.loc 1 2087 0
 701 0000 0123     		movs	r3, #1
 702 0002 024A     		ldr	r2, .L61
2088:Generated_Source\PSoC4/CyLFClk.c ****     }
 703              		.loc 1 2088 0
 704              		@ sp needed
2087:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_MASK_REG |= CY_SYS_WDT_LOWER_BIT_MASK;
 705              		.loc 1 2087 0
 706 0004 1168     		ldr	r1, [r2]
 707 0006 0B43     		orrs	r3, r1
 708 0008 1360     		str	r3, [r2]
 709              		.loc 1 2088 0
 710 000a 7047     		bx	lr
 711              	.L62:
 712              		.align	2
 713              	.L61:
 714 000c 4C000340 		.word	1073938508
 715              		.cfi_endproc
 716              	.LFE15:
 717              		.size	CySysWdtUnmaskInterrupt, .-CySysWdtUnmaskInterrupt
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 51


 718              		.section	.text.CySysWdtSetInterruptCallback,"ax",%progbits
 719              		.align	2
 720              		.global	CySysWdtSetInterruptCallback
 721              		.code	16
 722              		.thumb_func
 723              		.type	CySysWdtSetInterruptCallback, %function
 724              	CySysWdtSetInterruptCallback:
 725              	.LFB16:
2089:Generated_Source\PSoC4/CyLFClk.c **** 
2090:Generated_Source\PSoC4/CyLFClk.c **** 
2091:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2092:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetIsrCallback
2093:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2094:Generated_Source\PSoC4/CyLFClk.c ****     *
2095:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2096:Generated_Source\PSoC4/CyLFClk.c ****     * Sets the ISR callback function for the WDT counter
2097:Generated_Source\PSoC4/CyLFClk.c ****     *
2098:Generated_Source\PSoC4/CyLFClk.c ****     * \param function The pointer to the callback function.
2099:Generated_Source\PSoC4/CyLFClk.c ****     *
2100:Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to a previous callback function.
2101:Generated_Source\PSoC4/CyLFClk.c ****     *
2102:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2103:Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtSetInterruptCallback(cyWdtCallback function)
2104:Generated_Source\PSoC4/CyLFClk.c ****     {
 726              		.loc 1 2104 0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 0
 729              		@ frame_needed = 0, uses_anonymous_args = 0
 730              		@ link register save eliminated.
 731              	.LVL29:
2105:Generated_Source\PSoC4/CyLFClk.c ****         cyWdtCallback prevCallback = (void *)0;
2106:Generated_Source\PSoC4/CyLFClk.c **** 
2107:Generated_Source\PSoC4/CyLFClk.c ****         prevCallback = cySysWdtCallback;
 732              		.loc 1 2107 0
 733 0000 024B     		ldr	r3, .L64
2108:Generated_Source\PSoC4/CyLFClk.c ****         cySysWdtCallback = function;
2109:Generated_Source\PSoC4/CyLFClk.c **** 
2110:Generated_Source\PSoC4/CyLFClk.c ****         return(prevCallback);
2111:Generated_Source\PSoC4/CyLFClk.c ****     }
 734              		.loc 1 2111 0
 735              		@ sp needed
2107:Generated_Source\PSoC4/CyLFClk.c ****         cySysWdtCallback = function;
 736              		.loc 1 2107 0
 737 0002 5A68     		ldr	r2, [r3, #4]
 738              	.LVL30:
2108:Generated_Source\PSoC4/CyLFClk.c ****         cySysWdtCallback = function;
 739              		.loc 1 2108 0
 740 0004 5860     		str	r0, [r3, #4]
 741              		.loc 1 2111 0
 742 0006 1000     		movs	r0, r2
 743              	.LVL31:
 744 0008 7047     		bx	lr
 745              	.L65:
 746 000a C046     		.align	2
 747              	.L64:
 748 000c 00000000 		.word	.LANCHOR0
 749              		.cfi_endproc
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 52


 750              	.LFE16:
 751              		.size	CySysWdtSetInterruptCallback, .-CySysWdtSetInterruptCallback
 752              		.section	.text.CySysWdtGetInterruptCallback,"ax",%progbits
 753              		.align	2
 754              		.global	CySysWdtGetInterruptCallback
 755              		.code	16
 756              		.thumb_func
 757              		.type	CySysWdtGetInterruptCallback, %function
 758              	CySysWdtGetInterruptCallback:
 759              	.LFB17:
2112:Generated_Source\PSoC4/CyLFClk.c **** 
2113:Generated_Source\PSoC4/CyLFClk.c **** 
2114:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2115:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetIsrCallback
2116:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2117:Generated_Source\PSoC4/CyLFClk.c ****     *
2118:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2119:Generated_Source\PSoC4/CyLFClk.c ****     * Gets the ISR callback function for the WDT counter
2120:Generated_Source\PSoC4/CyLFClk.c ****     *
2121:Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to the callback function registered for WDT.
2122:Generated_Source\PSoC4/CyLFClk.c ****     *
2123:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2124:Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtGetInterruptCallback(void)
2125:Generated_Source\PSoC4/CyLFClk.c ****     {
 760              		.loc 1 2125 0
 761              		.cfi_startproc
 762              		@ args = 0, pretend = 0, frame = 0
 763              		@ frame_needed = 0, uses_anonymous_args = 0
 764              		@ link register save eliminated.
2126:Generated_Source\PSoC4/CyLFClk.c ****         return(cySysWdtCallback);
 765              		.loc 1 2126 0
 766 0000 014B     		ldr	r3, .L67
2127:Generated_Source\PSoC4/CyLFClk.c ****     }
 767              		.loc 1 2127 0
 768              		@ sp needed
2126:Generated_Source\PSoC4/CyLFClk.c ****         return(cySysWdtCallback);
 769              		.loc 1 2126 0
 770 0002 5868     		ldr	r0, [r3, #4]
 771              		.loc 1 2127 0
 772 0004 7047     		bx	lr
 773              	.L68:
 774 0006 C046     		.align	2
 775              	.L67:
 776 0008 00000000 		.word	.LANCHOR0
 777              		.cfi_endproc
 778              	.LFE17:
 779              		.size	CySysWdtGetInterruptCallback, .-CySysWdtGetInterruptCallback
 780              		.section	.text.CySysWdtIsr,"ax",%progbits
 781              		.align	2
 782              		.global	CySysWdtIsr
 783              		.code	16
 784              		.thumb_func
 785              		.type	CySysWdtIsr, %function
 786              	CySysWdtIsr:
 787              	.LFB18:
2128:Generated_Source\PSoC4/CyLFClk.c **** 
2129:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 53


2130:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2131:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtIsr
2132:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2133:Generated_Source\PSoC4/CyLFClk.c ****     *
2134:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2135:Generated_Source\PSoC4/CyLFClk.c ****     * This is the handler of the WDT interrupt in CPU NVIC.
2136:Generated_Source\PSoC4/CyLFClk.c ****     *
2137:Generated_Source\PSoC4/CyLFClk.c ****     * The handler calls the respective callback functions configured by the user 
2138:Generated_Source\PSoC4/CyLFClk.c ****     * by using CySysWdtSetIsrCallback() API.
2139:Generated_Source\PSoC4/CyLFClk.c ****     *
2140:Generated_Source\PSoC4/CyLFClk.c ****     *
2141:Generated_Source\PSoC4/CyLFClk.c ****     * \details
2142:Generated_Source\PSoC4/CyLFClk.c ****     * This function clears the WDT interrupt every time when it is called.
2143:Generated_Source\PSoC4/CyLFClk.c ****     * Reset after the 3rd interrupt does not happen if this function is registered
2144:Generated_Source\PSoC4/CyLFClk.c ****     * as the interrupt handler even if the "Watchdog with Interrupt" mode is
2145:Generated_Source\PSoC4/CyLFClk.c ****     * selected on the "Low Frequency Clocks" tab.
2146:Generated_Source\PSoC4/CyLFClk.c ****     *
2147:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2148:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtIsr(void)
2149:Generated_Source\PSoC4/CyLFClk.c ****     {
 788              		.loc 1 2149 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 0
 791              		@ frame_needed = 0, uses_anonymous_args = 0
2150:Generated_Source\PSoC4/CyLFClk.c ****         if(cySysWdtCallback != (void *) 0)
 792              		.loc 1 2150 0
 793 0000 054B     		ldr	r3, .L74
2149:Generated_Source\PSoC4/CyLFClk.c ****         if(cySysWdtCallback != (void *) 0)
 794              		.loc 1 2149 0
 795 0002 10B5     		push	{r4, lr}
 796              		.cfi_def_cfa_offset 8
 797              		.cfi_offset 4, -8
 798              		.cfi_offset 14, -4
 799              		.loc 1 2150 0
 800 0004 5B68     		ldr	r3, [r3, #4]
 801 0006 002B     		cmp	r3, #0
 802 0008 00D0     		beq	.L70
2151:Generated_Source\PSoC4/CyLFClk.c ****         {
2152:Generated_Source\PSoC4/CyLFClk.c ****             (void)(cySysWdtCallback)();
 803              		.loc 1 2152 0
 804 000a 9847     		blx	r3
 805              	.LVL32:
 806              	.L70:
 807              	.LBB4:
 808              	.LBB5:
2057:Generated_Source\PSoC4/CyLFClk.c ****     }
 809              		.loc 1 2057 0
 810 000c 0123     		movs	r3, #1
 811 000e 034A     		ldr	r2, .L74+4
 812              	.LBE5:
 813              	.LBE4:
2153:Generated_Source\PSoC4/CyLFClk.c ****         }
2154:Generated_Source\PSoC4/CyLFClk.c **** 
2155:Generated_Source\PSoC4/CyLFClk.c ****         CySysWdtClearInterrupt();
2156:Generated_Source\PSoC4/CyLFClk.c ****     }
 814              		.loc 1 2156 0
 815              		@ sp needed
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 54


 816              	.LBB7:
 817              	.LBB6:
2057:Generated_Source\PSoC4/CyLFClk.c ****     }
 818              		.loc 1 2057 0
 819 0010 1168     		ldr	r1, [r2]
 820 0012 0B43     		orrs	r3, r1
 821 0014 1360     		str	r3, [r2]
 822              	.LBE6:
 823              	.LBE7:
 824              		.loc 1 2156 0
 825 0016 10BD     		pop	{r4, pc}
 826              	.L75:
 827              		.align	2
 828              	.L74:
 829 0018 00000000 		.word	.LANCHOR0
 830 001c 44000340 		.word	1073938500
 831              		.cfi_endproc
 832              	.LFE18:
 833              		.size	CySysWdtIsr, .-CySysWdtIsr
 834              		.bss
 835              		.align	2
 836              		.set	.LANCHOR0,. + 0
 837              		.type	compensateRunningStatus.4781, %object
 838              		.size	compensateRunningStatus.4781, 4
 839              	compensateRunningStatus.4781:
 840 0000 00000000 		.space	4
 841              		.type	cySysWdtCallback, %object
 842              		.size	cySysWdtCallback, 4
 843              	cySysWdtCallback:
 844 0004 00000000 		.space	4
 845              		.text
 846              	.Letext0:
 847              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 848              		.file 3 "Generated_Source\\PSoC4\\CyLFClk.h"
 849              		.file 4 "Generated_Source\\PSoC4\\CyLib.h"
 850              		.section	.debug_info,"",%progbits
 851              	.Ldebug_info0:
 852 0000 37030000 		.4byte	0x337
 853 0004 0400     		.2byte	0x4
 854 0006 00000000 		.4byte	.Ldebug_abbrev0
 855 000a 04       		.byte	0x4
 856 000b 01       		.uleb128 0x1
 857 000c BB010000 		.4byte	.LASF48
 858 0010 0C       		.byte	0xc
 859 0011 B4000000 		.4byte	.LASF49
 860 0015 D5000000 		.4byte	.LASF50
 861 0019 18000000 		.4byte	.Ldebug_ranges0+0x18
 862 001d 00000000 		.4byte	0
 863 0021 00000000 		.4byte	.Ldebug_line0
 864 0025 02       		.uleb128 0x2
 865 0026 01       		.byte	0x1
 866 0027 06       		.byte	0x6
 867 0028 EF030000 		.4byte	.LASF0
 868 002c 02       		.uleb128 0x2
 869 002d 01       		.byte	0x1
 870 002e 08       		.byte	0x8
 871 002f 41010000 		.4byte	.LASF1
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 55


 872 0033 02       		.uleb128 0x2
 873 0034 02       		.byte	0x2
 874 0035 05       		.byte	0x5
 875 0036 CF030000 		.4byte	.LASF2
 876 003a 02       		.uleb128 0x2
 877 003b 02       		.byte	0x2
 878 003c 07       		.byte	0x7
 879 003d 8D010000 		.4byte	.LASF3
 880 0041 02       		.uleb128 0x2
 881 0042 04       		.byte	0x4
 882 0043 05       		.byte	0x5
 883 0044 D9030000 		.4byte	.LASF4
 884 0048 02       		.uleb128 0x2
 885 0049 04       		.byte	0x4
 886 004a 07       		.byte	0x7
 887 004b 73010000 		.4byte	.LASF5
 888 004f 02       		.uleb128 0x2
 889 0050 08       		.byte	0x8
 890 0051 05       		.byte	0x5
 891 0052 88030000 		.4byte	.LASF6
 892 0056 02       		.uleb128 0x2
 893 0057 08       		.byte	0x8
 894 0058 07       		.byte	0x7
 895 0059 E9020000 		.4byte	.LASF7
 896 005d 03       		.uleb128 0x3
 897 005e 04       		.byte	0x4
 898 005f 05       		.byte	0x5
 899 0060 696E7400 		.ascii	"int\000"
 900 0064 02       		.uleb128 0x2
 901 0065 04       		.byte	0x4
 902 0066 07       		.byte	0x7
 903 0067 C7020000 		.4byte	.LASF8
 904 006b 04       		.uleb128 0x4
 905 006c A8020000 		.4byte	.LASF12
 906 0070 02       		.byte	0x2
 907 0071 D401     		.2byte	0x1d4
 908 0073 48000000 		.4byte	0x48
 909 0077 02       		.uleb128 0x2
 910 0078 04       		.byte	0x4
 911 0079 04       		.byte	0x4
 912 007a AE000000 		.4byte	.LASF9
 913 007e 02       		.uleb128 0x2
 914 007f 08       		.byte	0x8
 915 0080 04       		.byte	0x4
 916 0081 49020000 		.4byte	.LASF10
 917 0085 02       		.uleb128 0x2
 918 0086 01       		.byte	0x1
 919 0087 08       		.byte	0x8
 920 0088 A3030000 		.4byte	.LASF11
 921 008c 04       		.uleb128 0x4
 922 008d 19000000 		.4byte	.LASF13
 923 0091 02       		.byte	0x2
 924 0092 7402     		.2byte	0x274
 925 0094 48000000 		.4byte	0x48
 926 0098 04       		.uleb128 0x4
 927 0099 22000000 		.4byte	.LASF14
 928 009d 02       		.byte	0x2
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 56


 929 009e 7E02     		.2byte	0x27e
 930 00a0 A4000000 		.4byte	0xa4
 931 00a4 05       		.uleb128 0x5
 932 00a5 6B000000 		.4byte	0x6b
 933 00a9 06       		.uleb128 0x6
 934 00aa 04       		.byte	0x4
 935 00ab AF000000 		.4byte	0xaf
 936 00af 07       		.uleb128 0x7
 937 00b0 08       		.uleb128 0x8
 938 00b1 55010000 		.4byte	.LASF15
 939 00b5 03       		.byte	0x3
 940 00b6 58       		.byte	0x58
 941 00b7 A9000000 		.4byte	0xa9
 942 00bb 02       		.uleb128 0x2
 943 00bc 08       		.byte	0x8
 944 00bd 04       		.byte	0x4
 945 00be 60020000 		.4byte	.LASF16
 946 00c2 02       		.uleb128 0x2
 947 00c3 04       		.byte	0x4
 948 00c4 07       		.byte	0x7
 949 00c5 5D030000 		.4byte	.LASF17
 950 00c9 09       		.uleb128 0x9
 951 00ca 86000000 		.4byte	.LASF51
 952 00ce 01       		.byte	0x1
 953 00cf 0708     		.2byte	0x807
 954 00d1 01       		.byte	0x1
 955 00d2 0A       		.uleb128 0xa
 956 00d3 5C000000 		.4byte	.LASF18
 957 00d7 01       		.byte	0x1
 958 00d8 53       		.byte	0x53
 959 00d9 00000000 		.4byte	.LFB0
 960 00dd 14000000 		.4byte	.LFE0-.LFB0
 961 00e1 01       		.uleb128 0x1
 962 00e2 9C       		.byte	0x9c
 963 00e3 0A       		.uleb128 0xa
 964 00e4 63010000 		.4byte	.LASF19
 965 00e8 01       		.byte	0x1
 966 00e9 6C       		.byte	0x6c
 967 00ea 00000000 		.4byte	.LFB1
 968 00ee 10000000 		.4byte	.LFE1-.LFB1
 969 00f2 01       		.uleb128 0x1
 970 00f3 9C       		.byte	0x9c
 971 00f4 0A       		.uleb128 0xa
 972 00f5 6C020000 		.4byte	.LASF20
 973 00f9 01       		.byte	0x1
 974 00fa A8       		.byte	0xa8
 975 00fb 00000000 		.4byte	.LFB2
 976 00ff 34000000 		.4byte	.LFE2-.LFB2
 977 0103 01       		.uleb128 0x1
 978 0104 9C       		.byte	0x9c
 979 0105 0A       		.uleb128 0xa
 980 0106 A0010000 		.4byte	.LASF21
 981 010a 01       		.byte	0x1
 982 010b C9       		.byte	0xc9
 983 010c 00000000 		.4byte	.LFB3
 984 0110 28000000 		.4byte	.LFE3-.LFB3
 985 0114 01       		.uleb128 0x1
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 57


 986 0115 9C       		.byte	0x9c
 987 0116 0B       		.uleb128 0xb
 988 0117 18040000 		.4byte	.LASF41
 989 011b 01       		.byte	0x1
 990 011c 0B01     		.2byte	0x10b
 991 011e 8C000000 		.4byte	0x8c
 992 0122 00000000 		.4byte	.LFB4
 993 0126 00010000 		.4byte	.LFE4-.LFB4
 994 012a 01       		.uleb128 0x1
 995 012b 9C       		.byte	0x9c
 996 012c A3010000 		.4byte	0x1a3
 997 0130 0C       		.uleb128 0xc
 998 0131 96030000 		.4byte	.LASF22
 999 0135 01       		.byte	0x1
 1000 0136 0B01     		.2byte	0x10b
 1001 0138 6B000000 		.4byte	0x6b
 1002 013c 00000000 		.4byte	.LLST0
 1003 0140 0C       		.uleb128 0xc
 1004 0141 18030000 		.4byte	.LASF23
 1005 0145 01       		.byte	0x1
 1006 0146 0B01     		.2byte	0x10b
 1007 0148 A3010000 		.4byte	0x1a3
 1008 014c 3A000000 		.4byte	.LLST1
 1009 0150 0D       		.uleb128 0xd
 1010 0151 47000000 		.4byte	.LASF24
 1011 0155 01       		.byte	0x1
 1012 0156 0D01     		.2byte	0x10d
 1013 0158 6B000000 		.4byte	0x6b
 1014 015c 71000000 		.4byte	.LLST2
 1015 0160 0D       		.uleb128 0xd
 1016 0161 D4020000 		.4byte	.LASF25
 1017 0165 01       		.byte	0x1
 1018 0166 0E01     		.2byte	0x10e
 1019 0168 6B000000 		.4byte	0x6b
 1020 016c 8F000000 		.4byte	.LLST3
 1021 0170 0E       		.uleb128 0xe
 1022 0171 AF020000 		.4byte	.LASF26
 1023 0175 01       		.byte	0x1
 1024 0176 0F01     		.2byte	0x10f
 1025 0178 6B000000 		.4byte	0x6b
 1026 017c 05       		.uleb128 0x5
 1027 017d 03       		.byte	0x3
 1028 017e 00000000 		.4byte	compensateRunningStatus.4781
 1029 0182 0D       		.uleb128 0xd
 1030 0183 6D000000 		.4byte	.LASF27
 1031 0187 01       		.byte	0x1
 1032 0188 1001     		.2byte	0x110
 1033 018a 6B000000 		.4byte	0x6b
 1034 018e C3000000 		.4byte	.LLST4
 1035 0192 0D       		.uleb128 0xd
 1036 0193 E2030000 		.4byte	.LASF28
 1037 0197 01       		.byte	0x1
 1038 0198 1101     		.2byte	0x111
 1039 019a 8C000000 		.4byte	0x8c
 1040 019e F2000000 		.4byte	.LLST5
 1041 01a2 00       		.byte	0
 1042 01a3 06       		.uleb128 0x6
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 58


 1043 01a4 04       		.byte	0x4
 1044 01a5 6B000000 		.4byte	0x6b
 1045 01a9 0F       		.uleb128 0xf
 1046 01aa 00000000 		.4byte	.LASF32
 1047 01ae 01       		.byte	0x1
 1048 01af 7E07     		.2byte	0x77e
 1049 01b1 6B000000 		.4byte	0x6b
 1050 01b5 00000000 		.4byte	.LFB5
 1051 01b9 18000000 		.4byte	.LFE5-.LFB5
 1052 01bd 01       		.uleb128 0x1
 1053 01be 9C       		.byte	0x9c
 1054 01bf 10       		.uleb128 0x10
 1055 01c0 88020000 		.4byte	.LASF29
 1056 01c4 01       		.byte	0x1
 1057 01c5 9107     		.2byte	0x791
 1058 01c7 00000000 		.4byte	.LFB6
 1059 01cb 0C000000 		.4byte	.LFE6-.LFB6
 1060 01cf 01       		.uleb128 0x1
 1061 01d0 9C       		.byte	0x9c
 1062 01d1 10       		.uleb128 0x10
 1063 01d2 50020000 		.4byte	.LASF30
 1064 01d6 01       		.byte	0x1
 1065 01d7 A107     		.2byte	0x7a1
 1066 01d9 00000000 		.4byte	.LFB7
 1067 01dd 10000000 		.4byte	.LFE7-.LFB7
 1068 01e1 01       		.uleb128 0x1
 1069 01e2 9C       		.byte	0x9c
 1070 01e3 11       		.uleb128 0x11
 1071 01e4 28000000 		.4byte	.LASF35
 1072 01e8 01       		.byte	0x1
 1073 01e9 B107     		.2byte	0x7b1
 1074 01eb 00000000 		.4byte	.LFB8
 1075 01ef 18000000 		.4byte	.LFE8-.LFB8
 1076 01f3 01       		.uleb128 0x1
 1077 01f4 9C       		.byte	0x9c
 1078 01f5 0A020000 		.4byte	0x20a
 1079 01f9 0C       		.uleb128 0xc
 1080 01fa 4F010000 		.4byte	.LASF31
 1081 01fe 01       		.byte	0x1
 1082 01ff B107     		.2byte	0x7b1
 1083 0201 6B000000 		.4byte	0x6b
 1084 0205 1D010000 		.4byte	.LLST6
 1085 0209 00       		.byte	0
 1086 020a 0F       		.uleb128 0xf
 1087 020b A8030000 		.4byte	.LASF33
 1088 020f 01       		.byte	0x1
 1089 0210 C107     		.2byte	0x7c1
 1090 0212 6B000000 		.4byte	0x6b
 1091 0216 00000000 		.4byte	.LFB9
 1092 021a 10000000 		.4byte	.LFE9-.LFB9
 1093 021e 01       		.uleb128 0x1
 1094 021f 9C       		.byte	0x9c
 1095 0220 0F       		.uleb128 0xf
 1096 0221 97020000 		.4byte	.LASF34
 1097 0225 01       		.byte	0x1
 1098 0226 D007     		.2byte	0x7d0
 1099 0228 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 59


 1100 022c 00000000 		.4byte	.LFB10
 1101 0230 0C000000 		.4byte	.LFE10-.LFB10
 1102 0234 01       		.uleb128 0x1
 1103 0235 9C       		.byte	0x9c
 1104 0236 11       		.uleb128 0x11
 1105 0237 B9030000 		.4byte	.LASF36
 1106 023b 01       		.byte	0x1
 1107 023c E407     		.2byte	0x7e4
 1108 023e 00000000 		.4byte	.LFB11
 1109 0242 20000000 		.4byte	.LFE11-.LFB11
 1110 0246 01       		.uleb128 0x1
 1111 0247 9C       		.byte	0x9c
 1112 0248 5D020000 		.4byte	0x25d
 1113 024c 0C       		.uleb128 0xc
 1114 024d 85010000 		.4byte	.LASF37
 1115 0251 01       		.byte	0x1
 1116 0252 E407     		.2byte	0x7e4
 1117 0254 6B000000 		.4byte	0x6b
 1118 0258 53010000 		.4byte	.LLST7
 1119 025c 00       		.byte	0
 1120 025d 0F       		.uleb128 0xf
 1121 025e 72030000 		.4byte	.LASF38
 1122 0262 01       		.byte	0x1
 1123 0263 F607     		.2byte	0x7f6
 1124 0265 6B000000 		.4byte	0x6b
 1125 0269 00000000 		.4byte	.LFB12
 1126 026d 10000000 		.4byte	.LFE12-.LFB12
 1127 0271 01       		.uleb128 0x1
 1128 0272 9C       		.byte	0x9c
 1129 0273 12       		.uleb128 0x12
 1130 0274 C9000000 		.4byte	0xc9
 1131 0278 00000000 		.4byte	.LFB13
 1132 027c 10000000 		.4byte	.LFE13-.LFB13
 1133 0280 01       		.uleb128 0x1
 1134 0281 9C       		.byte	0x9c
 1135 0282 10       		.uleb128 0x10
 1136 0283 47030000 		.4byte	.LASF39
 1137 0287 01       		.byte	0x1
 1138 0288 1608     		.2byte	0x816
 1139 028a 00000000 		.4byte	.LFB14
 1140 028e 10000000 		.4byte	.LFE14-.LFB14
 1141 0292 01       		.uleb128 0x1
 1142 0293 9C       		.byte	0x9c
 1143 0294 10       		.uleb128 0x10
 1144 0295 00030000 		.4byte	.LASF40
 1145 0299 01       		.byte	0x1
 1146 029a 2508     		.2byte	0x825
 1147 029c 00000000 		.4byte	.LFB15
 1148 02a0 10000000 		.4byte	.LFE15-.LFB15
 1149 02a4 01       		.uleb128 0x1
 1150 02a5 9C       		.byte	0x9c
 1151 02a6 13       		.uleb128 0x13
 1152 02a7 2A030000 		.4byte	.LASF42
 1153 02ab 01       		.byte	0x1
 1154 02ac 3708     		.2byte	0x837
 1155 02ae B0000000 		.4byte	0xb0
 1156 02b2 00000000 		.4byte	.LFB16
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 60


 1157 02b6 10000000 		.4byte	.LFE16-.LFB16
 1158 02ba 01       		.uleb128 0x1
 1159 02bb 9C       		.byte	0x9c
 1160 02bc E1020000 		.4byte	0x2e1
 1161 02c0 0C       		.uleb128 0xc
 1162 02c1 2E040000 		.4byte	.LASF43
 1163 02c5 01       		.byte	0x1
 1164 02c6 3708     		.2byte	0x837
 1165 02c8 B0000000 		.4byte	0xb0
 1166 02cc 8B010000 		.4byte	.LLST8
 1167 02d0 0D       		.uleb128 0xd
 1168 02d1 79000000 		.4byte	.LASF44
 1169 02d5 01       		.byte	0x1
 1170 02d6 3908     		.2byte	0x839
 1171 02d8 B0000000 		.4byte	0xb0
 1172 02dc AD010000 		.4byte	.LLST9
 1173 02e0 00       		.byte	0
 1174 02e1 0F       		.uleb128 0xf
 1175 02e2 FB030000 		.4byte	.LASF45
 1176 02e6 01       		.byte	0x1
 1177 02e7 4C08     		.2byte	0x84c
 1178 02e9 B0000000 		.4byte	0xb0
 1179 02ed 00000000 		.4byte	.LFB17
 1180 02f1 0C000000 		.4byte	.LFE17-.LFB17
 1181 02f5 01       		.uleb128 0x1
 1182 02f6 9C       		.byte	0x9c
 1183 02f7 14       		.uleb128 0x14
 1184 02f8 66030000 		.4byte	.LASF46
 1185 02fc 01       		.byte	0x1
 1186 02fd 6408     		.2byte	0x864
 1187 02ff 00000000 		.4byte	.LFB18
 1188 0303 20000000 		.4byte	.LFE18-.LFB18
 1189 0307 01       		.uleb128 0x1
 1190 0308 9C       		.byte	0x9c
 1191 0309 1E030000 		.4byte	0x31e
 1192 030d 15       		.uleb128 0x15
 1193 030e C9000000 		.4byte	0xc9
 1194 0312 0C000000 		.4byte	.LBB4
 1195 0316 00000000 		.4byte	.Ldebug_ranges0+0
 1196 031a 01       		.byte	0x1
 1197 031b 6B08     		.2byte	0x86b
 1198 031d 00       		.byte	0
 1199 031e 16       		.uleb128 0x16
 1200 031f 9D000000 		.4byte	.LASF47
 1201 0323 01       		.byte	0x1
 1202 0324 46       		.byte	0x46
 1203 0325 B0000000 		.4byte	0xb0
 1204 0329 05       		.uleb128 0x5
 1205 032a 03       		.byte	0x3
 1206 032b 04000000 		.4byte	cySysWdtCallback
 1207 032f 17       		.uleb128 0x17
 1208 0330 39000000 		.4byte	.LASF52
 1209 0334 04       		.byte	0x4
 1210 0335 D4       		.byte	0xd4
 1211 0336 6B000000 		.4byte	0x6b
 1212 033a 00       		.byte	0
 1213              		.section	.debug_abbrev,"",%progbits
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 61


 1214              	.Ldebug_abbrev0:
 1215 0000 01       		.uleb128 0x1
 1216 0001 11       		.uleb128 0x11
 1217 0002 01       		.byte	0x1
 1218 0003 25       		.uleb128 0x25
 1219 0004 0E       		.uleb128 0xe
 1220 0005 13       		.uleb128 0x13
 1221 0006 0B       		.uleb128 0xb
 1222 0007 03       		.uleb128 0x3
 1223 0008 0E       		.uleb128 0xe
 1224 0009 1B       		.uleb128 0x1b
 1225 000a 0E       		.uleb128 0xe
 1226 000b 55       		.uleb128 0x55
 1227 000c 17       		.uleb128 0x17
 1228 000d 11       		.uleb128 0x11
 1229 000e 01       		.uleb128 0x1
 1230 000f 10       		.uleb128 0x10
 1231 0010 17       		.uleb128 0x17
 1232 0011 00       		.byte	0
 1233 0012 00       		.byte	0
 1234 0013 02       		.uleb128 0x2
 1235 0014 24       		.uleb128 0x24
 1236 0015 00       		.byte	0
 1237 0016 0B       		.uleb128 0xb
 1238 0017 0B       		.uleb128 0xb
 1239 0018 3E       		.uleb128 0x3e
 1240 0019 0B       		.uleb128 0xb
 1241 001a 03       		.uleb128 0x3
 1242 001b 0E       		.uleb128 0xe
 1243 001c 00       		.byte	0
 1244 001d 00       		.byte	0
 1245 001e 03       		.uleb128 0x3
 1246 001f 24       		.uleb128 0x24
 1247 0020 00       		.byte	0
 1248 0021 0B       		.uleb128 0xb
 1249 0022 0B       		.uleb128 0xb
 1250 0023 3E       		.uleb128 0x3e
 1251 0024 0B       		.uleb128 0xb
 1252 0025 03       		.uleb128 0x3
 1253 0026 08       		.uleb128 0x8
 1254 0027 00       		.byte	0
 1255 0028 00       		.byte	0
 1256 0029 04       		.uleb128 0x4
 1257 002a 16       		.uleb128 0x16
 1258 002b 00       		.byte	0
 1259 002c 03       		.uleb128 0x3
 1260 002d 0E       		.uleb128 0xe
 1261 002e 3A       		.uleb128 0x3a
 1262 002f 0B       		.uleb128 0xb
 1263 0030 3B       		.uleb128 0x3b
 1264 0031 05       		.uleb128 0x5
 1265 0032 49       		.uleb128 0x49
 1266 0033 13       		.uleb128 0x13
 1267 0034 00       		.byte	0
 1268 0035 00       		.byte	0
 1269 0036 05       		.uleb128 0x5
 1270 0037 35       		.uleb128 0x35
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 62


 1271 0038 00       		.byte	0
 1272 0039 49       		.uleb128 0x49
 1273 003a 13       		.uleb128 0x13
 1274 003b 00       		.byte	0
 1275 003c 00       		.byte	0
 1276 003d 06       		.uleb128 0x6
 1277 003e 0F       		.uleb128 0xf
 1278 003f 00       		.byte	0
 1279 0040 0B       		.uleb128 0xb
 1280 0041 0B       		.uleb128 0xb
 1281 0042 49       		.uleb128 0x49
 1282 0043 13       		.uleb128 0x13
 1283 0044 00       		.byte	0
 1284 0045 00       		.byte	0
 1285 0046 07       		.uleb128 0x7
 1286 0047 15       		.uleb128 0x15
 1287 0048 00       		.byte	0
 1288 0049 27       		.uleb128 0x27
 1289 004a 19       		.uleb128 0x19
 1290 004b 00       		.byte	0
 1291 004c 00       		.byte	0
 1292 004d 08       		.uleb128 0x8
 1293 004e 16       		.uleb128 0x16
 1294 004f 00       		.byte	0
 1295 0050 03       		.uleb128 0x3
 1296 0051 0E       		.uleb128 0xe
 1297 0052 3A       		.uleb128 0x3a
 1298 0053 0B       		.uleb128 0xb
 1299 0054 3B       		.uleb128 0x3b
 1300 0055 0B       		.uleb128 0xb
 1301 0056 49       		.uleb128 0x49
 1302 0057 13       		.uleb128 0x13
 1303 0058 00       		.byte	0
 1304 0059 00       		.byte	0
 1305 005a 09       		.uleb128 0x9
 1306 005b 2E       		.uleb128 0x2e
 1307 005c 00       		.byte	0
 1308 005d 3F       		.uleb128 0x3f
 1309 005e 19       		.uleb128 0x19
 1310 005f 03       		.uleb128 0x3
 1311 0060 0E       		.uleb128 0xe
 1312 0061 3A       		.uleb128 0x3a
 1313 0062 0B       		.uleb128 0xb
 1314 0063 3B       		.uleb128 0x3b
 1315 0064 05       		.uleb128 0x5
 1316 0065 27       		.uleb128 0x27
 1317 0066 19       		.uleb128 0x19
 1318 0067 20       		.uleb128 0x20
 1319 0068 0B       		.uleb128 0xb
 1320 0069 00       		.byte	0
 1321 006a 00       		.byte	0
 1322 006b 0A       		.uleb128 0xa
 1323 006c 2E       		.uleb128 0x2e
 1324 006d 00       		.byte	0
 1325 006e 3F       		.uleb128 0x3f
 1326 006f 19       		.uleb128 0x19
 1327 0070 03       		.uleb128 0x3
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 63


 1328 0071 0E       		.uleb128 0xe
 1329 0072 3A       		.uleb128 0x3a
 1330 0073 0B       		.uleb128 0xb
 1331 0074 3B       		.uleb128 0x3b
 1332 0075 0B       		.uleb128 0xb
 1333 0076 27       		.uleb128 0x27
 1334 0077 19       		.uleb128 0x19
 1335 0078 11       		.uleb128 0x11
 1336 0079 01       		.uleb128 0x1
 1337 007a 12       		.uleb128 0x12
 1338 007b 06       		.uleb128 0x6
 1339 007c 40       		.uleb128 0x40
 1340 007d 18       		.uleb128 0x18
 1341 007e 9742     		.uleb128 0x2117
 1342 0080 19       		.uleb128 0x19
 1343 0081 00       		.byte	0
 1344 0082 00       		.byte	0
 1345 0083 0B       		.uleb128 0xb
 1346 0084 2E       		.uleb128 0x2e
 1347 0085 01       		.byte	0x1
 1348 0086 3F       		.uleb128 0x3f
 1349 0087 19       		.uleb128 0x19
 1350 0088 03       		.uleb128 0x3
 1351 0089 0E       		.uleb128 0xe
 1352 008a 3A       		.uleb128 0x3a
 1353 008b 0B       		.uleb128 0xb
 1354 008c 3B       		.uleb128 0x3b
 1355 008d 05       		.uleb128 0x5
 1356 008e 27       		.uleb128 0x27
 1357 008f 19       		.uleb128 0x19
 1358 0090 49       		.uleb128 0x49
 1359 0091 13       		.uleb128 0x13
 1360 0092 11       		.uleb128 0x11
 1361 0093 01       		.uleb128 0x1
 1362 0094 12       		.uleb128 0x12
 1363 0095 06       		.uleb128 0x6
 1364 0096 40       		.uleb128 0x40
 1365 0097 18       		.uleb128 0x18
 1366 0098 9642     		.uleb128 0x2116
 1367 009a 19       		.uleb128 0x19
 1368 009b 01       		.uleb128 0x1
 1369 009c 13       		.uleb128 0x13
 1370 009d 00       		.byte	0
 1371 009e 00       		.byte	0
 1372 009f 0C       		.uleb128 0xc
 1373 00a0 05       		.uleb128 0x5
 1374 00a1 00       		.byte	0
 1375 00a2 03       		.uleb128 0x3
 1376 00a3 0E       		.uleb128 0xe
 1377 00a4 3A       		.uleb128 0x3a
 1378 00a5 0B       		.uleb128 0xb
 1379 00a6 3B       		.uleb128 0x3b
 1380 00a7 05       		.uleb128 0x5
 1381 00a8 49       		.uleb128 0x49
 1382 00a9 13       		.uleb128 0x13
 1383 00aa 02       		.uleb128 0x2
 1384 00ab 17       		.uleb128 0x17
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 64


 1385 00ac 00       		.byte	0
 1386 00ad 00       		.byte	0
 1387 00ae 0D       		.uleb128 0xd
 1388 00af 34       		.uleb128 0x34
 1389 00b0 00       		.byte	0
 1390 00b1 03       		.uleb128 0x3
 1391 00b2 0E       		.uleb128 0xe
 1392 00b3 3A       		.uleb128 0x3a
 1393 00b4 0B       		.uleb128 0xb
 1394 00b5 3B       		.uleb128 0x3b
 1395 00b6 05       		.uleb128 0x5
 1396 00b7 49       		.uleb128 0x49
 1397 00b8 13       		.uleb128 0x13
 1398 00b9 02       		.uleb128 0x2
 1399 00ba 17       		.uleb128 0x17
 1400 00bb 00       		.byte	0
 1401 00bc 00       		.byte	0
 1402 00bd 0E       		.uleb128 0xe
 1403 00be 34       		.uleb128 0x34
 1404 00bf 00       		.byte	0
 1405 00c0 03       		.uleb128 0x3
 1406 00c1 0E       		.uleb128 0xe
 1407 00c2 3A       		.uleb128 0x3a
 1408 00c3 0B       		.uleb128 0xb
 1409 00c4 3B       		.uleb128 0x3b
 1410 00c5 05       		.uleb128 0x5
 1411 00c6 49       		.uleb128 0x49
 1412 00c7 13       		.uleb128 0x13
 1413 00c8 02       		.uleb128 0x2
 1414 00c9 18       		.uleb128 0x18
 1415 00ca 00       		.byte	0
 1416 00cb 00       		.byte	0
 1417 00cc 0F       		.uleb128 0xf
 1418 00cd 2E       		.uleb128 0x2e
 1419 00ce 00       		.byte	0
 1420 00cf 3F       		.uleb128 0x3f
 1421 00d0 19       		.uleb128 0x19
 1422 00d1 03       		.uleb128 0x3
 1423 00d2 0E       		.uleb128 0xe
 1424 00d3 3A       		.uleb128 0x3a
 1425 00d4 0B       		.uleb128 0xb
 1426 00d5 3B       		.uleb128 0x3b
 1427 00d6 05       		.uleb128 0x5
 1428 00d7 27       		.uleb128 0x27
 1429 00d8 19       		.uleb128 0x19
 1430 00d9 49       		.uleb128 0x49
 1431 00da 13       		.uleb128 0x13
 1432 00db 11       		.uleb128 0x11
 1433 00dc 01       		.uleb128 0x1
 1434 00dd 12       		.uleb128 0x12
 1435 00de 06       		.uleb128 0x6
 1436 00df 40       		.uleb128 0x40
 1437 00e0 18       		.uleb128 0x18
 1438 00e1 9742     		.uleb128 0x2117
 1439 00e3 19       		.uleb128 0x19
 1440 00e4 00       		.byte	0
 1441 00e5 00       		.byte	0
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 65


 1442 00e6 10       		.uleb128 0x10
 1443 00e7 2E       		.uleb128 0x2e
 1444 00e8 00       		.byte	0
 1445 00e9 3F       		.uleb128 0x3f
 1446 00ea 19       		.uleb128 0x19
 1447 00eb 03       		.uleb128 0x3
 1448 00ec 0E       		.uleb128 0xe
 1449 00ed 3A       		.uleb128 0x3a
 1450 00ee 0B       		.uleb128 0xb
 1451 00ef 3B       		.uleb128 0x3b
 1452 00f0 05       		.uleb128 0x5
 1453 00f1 27       		.uleb128 0x27
 1454 00f2 19       		.uleb128 0x19
 1455 00f3 11       		.uleb128 0x11
 1456 00f4 01       		.uleb128 0x1
 1457 00f5 12       		.uleb128 0x12
 1458 00f6 06       		.uleb128 0x6
 1459 00f7 40       		.uleb128 0x40
 1460 00f8 18       		.uleb128 0x18
 1461 00f9 9742     		.uleb128 0x2117
 1462 00fb 19       		.uleb128 0x19
 1463 00fc 00       		.byte	0
 1464 00fd 00       		.byte	0
 1465 00fe 11       		.uleb128 0x11
 1466 00ff 2E       		.uleb128 0x2e
 1467 0100 01       		.byte	0x1
 1468 0101 3F       		.uleb128 0x3f
 1469 0102 19       		.uleb128 0x19
 1470 0103 03       		.uleb128 0x3
 1471 0104 0E       		.uleb128 0xe
 1472 0105 3A       		.uleb128 0x3a
 1473 0106 0B       		.uleb128 0xb
 1474 0107 3B       		.uleb128 0x3b
 1475 0108 05       		.uleb128 0x5
 1476 0109 27       		.uleb128 0x27
 1477 010a 19       		.uleb128 0x19
 1478 010b 11       		.uleb128 0x11
 1479 010c 01       		.uleb128 0x1
 1480 010d 12       		.uleb128 0x12
 1481 010e 06       		.uleb128 0x6
 1482 010f 40       		.uleb128 0x40
 1483 0110 18       		.uleb128 0x18
 1484 0111 9742     		.uleb128 0x2117
 1485 0113 19       		.uleb128 0x19
 1486 0114 01       		.uleb128 0x1
 1487 0115 13       		.uleb128 0x13
 1488 0116 00       		.byte	0
 1489 0117 00       		.byte	0
 1490 0118 12       		.uleb128 0x12
 1491 0119 2E       		.uleb128 0x2e
 1492 011a 00       		.byte	0
 1493 011b 31       		.uleb128 0x31
 1494 011c 13       		.uleb128 0x13
 1495 011d 11       		.uleb128 0x11
 1496 011e 01       		.uleb128 0x1
 1497 011f 12       		.uleb128 0x12
 1498 0120 06       		.uleb128 0x6
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 66


 1499 0121 40       		.uleb128 0x40
 1500 0122 18       		.uleb128 0x18
 1501 0123 9742     		.uleb128 0x2117
 1502 0125 19       		.uleb128 0x19
 1503 0126 00       		.byte	0
 1504 0127 00       		.byte	0
 1505 0128 13       		.uleb128 0x13
 1506 0129 2E       		.uleb128 0x2e
 1507 012a 01       		.byte	0x1
 1508 012b 3F       		.uleb128 0x3f
 1509 012c 19       		.uleb128 0x19
 1510 012d 03       		.uleb128 0x3
 1511 012e 0E       		.uleb128 0xe
 1512 012f 3A       		.uleb128 0x3a
 1513 0130 0B       		.uleb128 0xb
 1514 0131 3B       		.uleb128 0x3b
 1515 0132 05       		.uleb128 0x5
 1516 0133 27       		.uleb128 0x27
 1517 0134 19       		.uleb128 0x19
 1518 0135 49       		.uleb128 0x49
 1519 0136 13       		.uleb128 0x13
 1520 0137 11       		.uleb128 0x11
 1521 0138 01       		.uleb128 0x1
 1522 0139 12       		.uleb128 0x12
 1523 013a 06       		.uleb128 0x6
 1524 013b 40       		.uleb128 0x40
 1525 013c 18       		.uleb128 0x18
 1526 013d 9742     		.uleb128 0x2117
 1527 013f 19       		.uleb128 0x19
 1528 0140 01       		.uleb128 0x1
 1529 0141 13       		.uleb128 0x13
 1530 0142 00       		.byte	0
 1531 0143 00       		.byte	0
 1532 0144 14       		.uleb128 0x14
 1533 0145 2E       		.uleb128 0x2e
 1534 0146 01       		.byte	0x1
 1535 0147 3F       		.uleb128 0x3f
 1536 0148 19       		.uleb128 0x19
 1537 0149 03       		.uleb128 0x3
 1538 014a 0E       		.uleb128 0xe
 1539 014b 3A       		.uleb128 0x3a
 1540 014c 0B       		.uleb128 0xb
 1541 014d 3B       		.uleb128 0x3b
 1542 014e 05       		.uleb128 0x5
 1543 014f 27       		.uleb128 0x27
 1544 0150 19       		.uleb128 0x19
 1545 0151 11       		.uleb128 0x11
 1546 0152 01       		.uleb128 0x1
 1547 0153 12       		.uleb128 0x12
 1548 0154 06       		.uleb128 0x6
 1549 0155 40       		.uleb128 0x40
 1550 0156 18       		.uleb128 0x18
 1551 0157 9642     		.uleb128 0x2116
 1552 0159 19       		.uleb128 0x19
 1553 015a 01       		.uleb128 0x1
 1554 015b 13       		.uleb128 0x13
 1555 015c 00       		.byte	0
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 67


 1556 015d 00       		.byte	0
 1557 015e 15       		.uleb128 0x15
 1558 015f 1D       		.uleb128 0x1d
 1559 0160 00       		.byte	0
 1560 0161 31       		.uleb128 0x31
 1561 0162 13       		.uleb128 0x13
 1562 0163 52       		.uleb128 0x52
 1563 0164 01       		.uleb128 0x1
 1564 0165 55       		.uleb128 0x55
 1565 0166 17       		.uleb128 0x17
 1566 0167 58       		.uleb128 0x58
 1567 0168 0B       		.uleb128 0xb
 1568 0169 59       		.uleb128 0x59
 1569 016a 05       		.uleb128 0x5
 1570 016b 00       		.byte	0
 1571 016c 00       		.byte	0
 1572 016d 16       		.uleb128 0x16
 1573 016e 34       		.uleb128 0x34
 1574 016f 00       		.byte	0
 1575 0170 03       		.uleb128 0x3
 1576 0171 0E       		.uleb128 0xe
 1577 0172 3A       		.uleb128 0x3a
 1578 0173 0B       		.uleb128 0xb
 1579 0174 3B       		.uleb128 0x3b
 1580 0175 0B       		.uleb128 0xb
 1581 0176 49       		.uleb128 0x49
 1582 0177 13       		.uleb128 0x13
 1583 0178 02       		.uleb128 0x2
 1584 0179 18       		.uleb128 0x18
 1585 017a 00       		.byte	0
 1586 017b 00       		.byte	0
 1587 017c 17       		.uleb128 0x17
 1588 017d 34       		.uleb128 0x34
 1589 017e 00       		.byte	0
 1590 017f 03       		.uleb128 0x3
 1591 0180 0E       		.uleb128 0xe
 1592 0181 3A       		.uleb128 0x3a
 1593 0182 0B       		.uleb128 0xb
 1594 0183 3B       		.uleb128 0x3b
 1595 0184 0B       		.uleb128 0xb
 1596 0185 49       		.uleb128 0x49
 1597 0186 13       		.uleb128 0x13
 1598 0187 3F       		.uleb128 0x3f
 1599 0188 19       		.uleb128 0x19
 1600 0189 3C       		.uleb128 0x3c
 1601 018a 19       		.uleb128 0x19
 1602 018b 00       		.byte	0
 1603 018c 00       		.byte	0
 1604 018d 00       		.byte	0
 1605              		.section	.debug_loc,"",%progbits
 1606              	.Ldebug_loc0:
 1607              	.LLST0:
 1608 0000 00000000 		.4byte	.LVL0
 1609 0004 1A000000 		.4byte	.LVL4
 1610 0008 0100     		.2byte	0x1
 1611 000a 50       		.byte	0x50
 1612 000b 1A000000 		.4byte	.LVL4
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 68


 1613 000f 22000000 		.4byte	.LVL6
 1614 0013 0400     		.2byte	0x4
 1615 0015 F3       		.byte	0xf3
 1616 0016 01       		.uleb128 0x1
 1617 0017 50       		.byte	0x50
 1618 0018 9F       		.byte	0x9f
 1619 0019 22000000 		.4byte	.LVL6
 1620 001d 6E000000 		.4byte	.LVL10
 1621 0021 0100     		.2byte	0x1
 1622 0023 50       		.byte	0x50
 1623 0024 6E000000 		.4byte	.LVL10
 1624 0028 00010000 		.4byte	.LFE4
 1625 002c 0400     		.2byte	0x4
 1626 002e F3       		.byte	0xf3
 1627 002f 01       		.uleb128 0x1
 1628 0030 50       		.byte	0x50
 1629 0031 9F       		.byte	0x9f
 1630 0032 00000000 		.4byte	0
 1631 0036 00000000 		.4byte	0
 1632              	.LLST1:
 1633 003a 00000000 		.4byte	.LVL0
 1634 003e 08000000 		.4byte	.LVL1
 1635 0042 0100     		.2byte	0x1
 1636 0044 51       		.byte	0x51
 1637 0045 08000000 		.4byte	.LVL1
 1638 0049 1C000000 		.4byte	.LVL5
 1639 004d 0100     		.2byte	0x1
 1640 004f 54       		.byte	0x54
 1641 0050 1C000000 		.4byte	.LVL5
 1642 0054 22000000 		.4byte	.LVL6
 1643 0058 0400     		.2byte	0x4
 1644 005a F3       		.byte	0xf3
 1645 005b 01       		.uleb128 0x1
 1646 005c 51       		.byte	0x51
 1647 005d 9F       		.byte	0x9f
 1648 005e 22000000 		.4byte	.LVL6
 1649 0062 00010000 		.4byte	.LFE4
 1650 0066 0100     		.2byte	0x1
 1651 0068 54       		.byte	0x54
 1652 0069 00000000 		.4byte	0
 1653 006d 00000000 		.4byte	0
 1654              	.LLST2:
 1655 0071 A4000000 		.4byte	.LVL18
 1656 0075 AC000000 		.4byte	.LVL20
 1657 0079 0100     		.2byte	0x1
 1658 007b 50       		.byte	0x50
 1659 007c C4000000 		.4byte	.LVL23
 1660 0080 00010000 		.4byte	.LFE4
 1661 0084 0100     		.2byte	0x1
 1662 0086 50       		.byte	0x50
 1663 0087 00000000 		.4byte	0
 1664 008b 00000000 		.4byte	0
 1665              	.LLST3:
 1666 008f 7E000000 		.4byte	.LVL12
 1667 0093 86000000 		.4byte	.LVL13
 1668 0097 0100     		.2byte	0x1
 1669 0099 50       		.byte	0x50
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 69


 1670 009a 86000000 		.4byte	.LVL13
 1671 009e 9C000000 		.4byte	.LVL16
 1672 00a2 0100     		.2byte	0x1
 1673 00a4 57       		.byte	0x57
 1674 00a5 AC000000 		.4byte	.LVL20
 1675 00a9 B0000000 		.4byte	.LVL21
 1676 00ad 0100     		.2byte	0x1
 1677 00af 50       		.byte	0x50
 1678 00b0 B0000000 		.4byte	.LVL21
 1679 00b4 00010000 		.4byte	.LFE4
 1680 00b8 0100     		.2byte	0x1
 1681 00ba 57       		.byte	0x57
 1682 00bb 00000000 		.4byte	0
 1683 00bf 00000000 		.4byte	0
 1684              	.LLST4:
 1685 00c3 0E000000 		.4byte	.LVL2
 1686 00c7 14000000 		.4byte	.LVL3
 1687 00cb 0700     		.2byte	0x7
 1688 00cd 72       		.byte	0x72
 1689 00ce 00       		.sleb128 0
 1690 00cf 0A       		.byte	0xa
 1691 00d0 0F0F     		.2byte	0xf0f
 1692 00d2 1A       		.byte	0x1a
 1693 00d3 9F       		.byte	0x9f
 1694 00d4 14000000 		.4byte	.LVL3
 1695 00d8 1A000000 		.4byte	.LVL4
 1696 00dc 0100     		.2byte	0x1
 1697 00de 53       		.byte	0x53
 1698 00df 22000000 		.4byte	.LVL6
 1699 00e3 24000000 		.4byte	.LVL7
 1700 00e7 0100     		.2byte	0x1
 1701 00e9 53       		.byte	0x53
 1702 00ea 00000000 		.4byte	0
 1703 00ee 00000000 		.4byte	0
 1704              	.LLST5:
 1705 00f2 1A000000 		.4byte	.LVL4
 1706 00f6 22000000 		.4byte	.LVL6
 1707 00fa 0100     		.2byte	0x1
 1708 00fc 52       		.byte	0x52
 1709 00fd 52000000 		.4byte	.LVL8
 1710 0101 54000000 		.4byte	.LVL9
 1711 0105 0200     		.2byte	0x2
 1712 0107 37       		.byte	0x37
 1713 0108 9F       		.byte	0x9f
 1714 0109 AA000000 		.4byte	.LVL19
 1715 010d AC000000 		.4byte	.LVL20
 1716 0111 0200     		.2byte	0x2
 1717 0113 30       		.byte	0x30
 1718 0114 9F       		.byte	0x9f
 1719 0115 00000000 		.4byte	0
 1720 0119 00000000 		.4byte	0
 1721              	.LLST6:
 1722 011d 00000000 		.4byte	.LVL24
 1723 0121 00000000 		.4byte	.LVL24
 1724 0125 0100     		.2byte	0x1
 1725 0127 50       		.byte	0x50
 1726 0128 00000000 		.4byte	.LVL24
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 70


 1727 012c 04000000 		.4byte	.LVL25
 1728 0130 0700     		.2byte	0x7
 1729 0132 70       		.byte	0x70
 1730 0133 00       		.sleb128 0
 1731 0134 0A       		.byte	0xa
 1732 0135 FFFF     		.2byte	0xffff
 1733 0137 1A       		.byte	0x1a
 1734 0138 9F       		.byte	0x9f
 1735 0139 04000000 		.4byte	.LVL25
 1736 013d 18000000 		.4byte	.LFE8
 1737 0141 0800     		.2byte	0x8
 1738 0143 F3       		.byte	0xf3
 1739 0144 01       		.uleb128 0x1
 1740 0145 50       		.byte	0x50
 1741 0146 0A       		.byte	0xa
 1742 0147 FFFF     		.2byte	0xffff
 1743 0149 1A       		.byte	0x1a
 1744 014a 9F       		.byte	0x9f
 1745 014b 00000000 		.4byte	0
 1746 014f 00000000 		.4byte	0
 1747              	.LLST7:
 1748 0153 00000000 		.4byte	.LVL26
 1749 0157 08000000 		.4byte	.LVL27
 1750 015b 0100     		.2byte	0x1
 1751 015d 50       		.byte	0x50
 1752 015e 08000000 		.4byte	.LVL27
 1753 0162 10000000 		.4byte	.LVL28
 1754 0166 0700     		.2byte	0x7
 1755 0168 72       		.byte	0x72
 1756 0169 00       		.sleb128 0
 1757 016a 4E       		.byte	0x4e
 1758 016b 3F       		.byte	0x3f
 1759 016c 24       		.byte	0x24
 1760 016d 1A       		.byte	0x1a
 1761 016e 9F       		.byte	0x9f
 1762 016f 10000000 		.4byte	.LVL28
 1763 0173 20000000 		.4byte	.LFE11
 1764 0177 0A00     		.2byte	0xa
 1765 0179 F3       		.byte	0xf3
 1766 017a 01       		.uleb128 0x1
 1767 017b 50       		.byte	0x50
 1768 017c 40       		.byte	0x40
 1769 017d 24       		.byte	0x24
 1770 017e 4E       		.byte	0x4e
 1771 017f 3F       		.byte	0x3f
 1772 0180 24       		.byte	0x24
 1773 0181 1A       		.byte	0x1a
 1774 0182 9F       		.byte	0x9f
 1775 0183 00000000 		.4byte	0
 1776 0187 00000000 		.4byte	0
 1777              	.LLST8:
 1778 018b 00000000 		.4byte	.LVL29
 1779 018f 08000000 		.4byte	.LVL31
 1780 0193 0100     		.2byte	0x1
 1781 0195 50       		.byte	0x50
 1782 0196 08000000 		.4byte	.LVL31
 1783 019a 10000000 		.4byte	.LFE16
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 71


 1784 019e 0500     		.2byte	0x5
 1785 01a0 03       		.byte	0x3
 1786 01a1 04000000 		.4byte	cySysWdtCallback
 1787 01a5 00000000 		.4byte	0
 1788 01a9 00000000 		.4byte	0
 1789              	.LLST9:
 1790 01ad 00000000 		.4byte	.LVL29
 1791 01b1 04000000 		.4byte	.LVL30
 1792 01b5 0200     		.2byte	0x2
 1793 01b7 30       		.byte	0x30
 1794 01b8 9F       		.byte	0x9f
 1795 01b9 04000000 		.4byte	.LVL30
 1796 01bd 10000000 		.4byte	.LFE16
 1797 01c1 0100     		.2byte	0x1
 1798 01c3 52       		.byte	0x52
 1799 01c4 00000000 		.4byte	0
 1800 01c8 00000000 		.4byte	0
 1801              		.section	.debug_aranges,"",%progbits
 1802 0000 AC000000 		.4byte	0xac
 1803 0004 0200     		.2byte	0x2
 1804 0006 00000000 		.4byte	.Ldebug_info0
 1805 000a 04       		.byte	0x4
 1806 000b 00       		.byte	0
 1807 000c 0000     		.2byte	0
 1808 000e 0000     		.2byte	0
 1809 0010 00000000 		.4byte	.LFB0
 1810 0014 14000000 		.4byte	.LFE0-.LFB0
 1811 0018 00000000 		.4byte	.LFB1
 1812 001c 10000000 		.4byte	.LFE1-.LFB1
 1813 0020 00000000 		.4byte	.LFB2
 1814 0024 34000000 		.4byte	.LFE2-.LFB2
 1815 0028 00000000 		.4byte	.LFB3
 1816 002c 28000000 		.4byte	.LFE3-.LFB3
 1817 0030 00000000 		.4byte	.LFB4
 1818 0034 00010000 		.4byte	.LFE4-.LFB4
 1819 0038 00000000 		.4byte	.LFB5
 1820 003c 18000000 		.4byte	.LFE5-.LFB5
 1821 0040 00000000 		.4byte	.LFB6
 1822 0044 0C000000 		.4byte	.LFE6-.LFB6
 1823 0048 00000000 		.4byte	.LFB7
 1824 004c 10000000 		.4byte	.LFE7-.LFB7
 1825 0050 00000000 		.4byte	.LFB8
 1826 0054 18000000 		.4byte	.LFE8-.LFB8
 1827 0058 00000000 		.4byte	.LFB9
 1828 005c 10000000 		.4byte	.LFE9-.LFB9
 1829 0060 00000000 		.4byte	.LFB10
 1830 0064 0C000000 		.4byte	.LFE10-.LFB10
 1831 0068 00000000 		.4byte	.LFB11
 1832 006c 20000000 		.4byte	.LFE11-.LFB11
 1833 0070 00000000 		.4byte	.LFB12
 1834 0074 10000000 		.4byte	.LFE12-.LFB12
 1835 0078 00000000 		.4byte	.LFB13
 1836 007c 10000000 		.4byte	.LFE13-.LFB13
 1837 0080 00000000 		.4byte	.LFB14
 1838 0084 10000000 		.4byte	.LFE14-.LFB14
 1839 0088 00000000 		.4byte	.LFB15
 1840 008c 10000000 		.4byte	.LFE15-.LFB15
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 72


 1841 0090 00000000 		.4byte	.LFB16
 1842 0094 10000000 		.4byte	.LFE16-.LFB16
 1843 0098 00000000 		.4byte	.LFB17
 1844 009c 0C000000 		.4byte	.LFE17-.LFB17
 1845 00a0 00000000 		.4byte	.LFB18
 1846 00a4 20000000 		.4byte	.LFE18-.LFB18
 1847 00a8 00000000 		.4byte	0
 1848 00ac 00000000 		.4byte	0
 1849              		.section	.debug_ranges,"",%progbits
 1850              	.Ldebug_ranges0:
 1851 0000 0C000000 		.4byte	.LBB4
 1852 0004 10000000 		.4byte	.LBE4
 1853 0008 10000000 		.4byte	.LBB7
 1854 000c 16000000 		.4byte	.LBE7
 1855 0010 00000000 		.4byte	0
 1856 0014 00000000 		.4byte	0
 1857 0018 00000000 		.4byte	.LFB0
 1858 001c 14000000 		.4byte	.LFE0
 1859 0020 00000000 		.4byte	.LFB1
 1860 0024 10000000 		.4byte	.LFE1
 1861 0028 00000000 		.4byte	.LFB2
 1862 002c 34000000 		.4byte	.LFE2
 1863 0030 00000000 		.4byte	.LFB3
 1864 0034 28000000 		.4byte	.LFE3
 1865 0038 00000000 		.4byte	.LFB4
 1866 003c 00010000 		.4byte	.LFE4
 1867 0040 00000000 		.4byte	.LFB5
 1868 0044 18000000 		.4byte	.LFE5
 1869 0048 00000000 		.4byte	.LFB6
 1870 004c 0C000000 		.4byte	.LFE6
 1871 0050 00000000 		.4byte	.LFB7
 1872 0054 10000000 		.4byte	.LFE7
 1873 0058 00000000 		.4byte	.LFB8
 1874 005c 18000000 		.4byte	.LFE8
 1875 0060 00000000 		.4byte	.LFB9
 1876 0064 10000000 		.4byte	.LFE9
 1877 0068 00000000 		.4byte	.LFB10
 1878 006c 0C000000 		.4byte	.LFE10
 1879 0070 00000000 		.4byte	.LFB11
 1880 0074 20000000 		.4byte	.LFE11
 1881 0078 00000000 		.4byte	.LFB12
 1882 007c 10000000 		.4byte	.LFE12
 1883 0080 00000000 		.4byte	.LFB13
 1884 0084 10000000 		.4byte	.LFE13
 1885 0088 00000000 		.4byte	.LFB14
 1886 008c 10000000 		.4byte	.LFE14
 1887 0090 00000000 		.4byte	.LFB15
 1888 0094 10000000 		.4byte	.LFE15
 1889 0098 00000000 		.4byte	.LFB16
 1890 009c 10000000 		.4byte	.LFE16
 1891 00a0 00000000 		.4byte	.LFB17
 1892 00a4 0C000000 		.4byte	.LFE17
 1893 00a8 00000000 		.4byte	.LFB18
 1894 00ac 20000000 		.4byte	.LFE18
 1895 00b0 00000000 		.4byte	0
 1896 00b4 00000000 		.4byte	0
 1897              		.section	.debug_line,"",%progbits
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 73


 1898              	.Ldebug_line0:
 1899 0000 3C020000 		.section	.debug_str,"MS",%progbits,1
 1899      02005C00 
 1899      00000201 
 1899      FB0E0D00 
 1899      01010101 
 1900              	.LASF32:
 1901 0000 43795379 		.ascii	"CySysWdtGetEnabledStatus\000"
 1901      73576474 
 1901      47657445 
 1901      6E61626C 
 1901      65645374 
 1902              	.LASF13:
 1903 0019 63797374 		.ascii	"cystatus\000"
 1903      61747573 
 1903      00
 1904              	.LASF14:
 1905 0022 72656733 		.ascii	"reg32\000"
 1905      3200
 1906              	.LASF35:
 1907 0028 43795379 		.ascii	"CySysWdtSetMatch\000"
 1907      73576474 
 1907      5365744D 
 1907      61746368 
 1907      00
 1908              	.LASF52:
 1909 0039 63796465 		.ascii	"cydelayFreqHz\000"
 1909      6C617946 
 1909      72657148 
 1909      7A00
 1910              	.LASF24:
 1911 0047 696C6F43 		.ascii	"iloCompensatedCycles\000"
 1911      6F6D7065 
 1911      6E736174 
 1911      65644379 
 1911      636C6573 
 1912              	.LASF18:
 1913 005c 43795379 		.ascii	"CySysClkIloStart\000"
 1913      73436C6B 
 1913      496C6F53 
 1913      74617274 
 1913      00
 1914              	.LASF27:
 1915 006d 63686563 		.ascii	"checkStatus\000"
 1915      6B537461 
 1915      74757300 
 1916              	.LASF44:
 1917 0079 70726576 		.ascii	"prevCallback\000"
 1917      43616C6C 
 1917      6261636B 
 1917      00
 1918              	.LASF51:
 1919 0086 43795379 		.ascii	"CySysWdtClearInterrupt\000"
 1919      73576474 
 1919      436C6561 
 1919      72496E74 
 1919      65727275 
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 74


 1920              	.LASF47:
 1921 009d 63795379 		.ascii	"cySysWdtCallback\000"
 1921      73576474 
 1921      43616C6C 
 1921      6261636B 
 1921      00
 1922              	.LASF9:
 1923 00ae 666C6F61 		.ascii	"float\000"
 1923      7400
 1924              	.LASF49:
 1925 00b4 47656E65 		.ascii	"Generated_Source\\PSoC4\\CyLFClk.c\000"
 1925      72617465 
 1925      645F536F 
 1925      75726365 
 1925      5C50536F 
 1926              	.LASF50:
 1927 00d5 433A5C55 		.ascii	"C:\\Users\\Public\\touch\\(NowC302)A1_Global_Multi_"
 1927      73657273 
 1927      5C507562 
 1927      6C69635C 
 1927      746F7563 
 1928 0104 43726561 		.ascii	"Creator4.1_hawkeye\\CapSense_CSD_P4_Example_WithTun"
 1928      746F7234 
 1928      2E315F68 
 1928      61776B65 
 1928      79655C43 
 1929 0136 65723031 		.ascii	"er01.cydsn\000"
 1929      2E637964 
 1929      736E00
 1930              	.LASF1:
 1931 0141 756E7369 		.ascii	"unsigned char\000"
 1931      676E6564 
 1931      20636861 
 1931      7200
 1932              	.LASF31:
 1933 014f 6D617463 		.ascii	"match\000"
 1933      6800
 1934              	.LASF15:
 1935 0155 63795764 		.ascii	"cyWdtCallback\000"
 1935      7443616C 
 1935      6C626163 
 1935      6B00
 1936              	.LASF19:
 1937 0163 43795379 		.ascii	"CySysClkIloStop\000"
 1937      73436C6B 
 1937      496C6F53 
 1937      746F7000 
 1938              	.LASF5:
 1939 0173 6C6F6E67 		.ascii	"long unsigned int\000"
 1939      20756E73 
 1939      69676E65 
 1939      6420696E 
 1939      7400
 1940              	.LASF37:
 1941 0185 62697473 		.ascii	"bitsNum\000"
 1941      4E756D00 
 1942              	.LASF3:
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 75


 1943 018d 73686F72 		.ascii	"short unsigned int\000"
 1943      7420756E 
 1943      7369676E 
 1943      65642069 
 1943      6E7400
 1944              	.LASF21:
 1945 01a0 43795379 		.ascii	"CySysClkIloStopMeasurement\000"
 1945      73436C6B 
 1945      496C6F53 
 1945      746F704D 
 1945      65617375 
 1946              	.LASF48:
 1947 01bb 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1947      43313120 
 1947      352E342E 
 1947      31203230 
 1947      31363036 
 1948 01ee 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 1948      20726576 
 1948      6973696F 
 1948      6E203233 
 1948      37373135 
 1949 0221 33202D66 		.ascii	"3 -ffunction-sections -ffat-lto-objects\000"
 1949      66756E63 
 1949      74696F6E 
 1949      2D736563 
 1949      74696F6E 
 1950              	.LASF10:
 1951 0249 646F7562 		.ascii	"double\000"
 1951      6C6500
 1952              	.LASF30:
 1953 0250 43795379 		.ascii	"CySysWdtDisable\000"
 1953      73576474 
 1953      44697361 
 1953      626C6500 
 1954              	.LASF16:
 1955 0260 6C6F6E67 		.ascii	"long double\000"
 1955      20646F75 
 1955      626C6500 
 1956              	.LASF20:
 1957 026c 43795379 		.ascii	"CySysClkIloStartMeasurement\000"
 1957      73436C6B 
 1957      496C6F53 
 1957      74617274 
 1957      4D656173 
 1958              	.LASF29:
 1959 0288 43795379 		.ascii	"CySysWdtEnable\000"
 1959      73576474 
 1959      456E6162 
 1959      6C6500
 1960              	.LASF34:
 1961 0297 43795379 		.ascii	"CySysWdtGetCount\000"
 1961      73576474 
 1961      47657443 
 1961      6F756E74 
 1961      00
 1962              	.LASF12:
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 76


 1963 02a8 75696E74 		.ascii	"uint32\000"
 1963      333200
 1964              	.LASF26:
 1965 02af 636F6D70 		.ascii	"compensateRunningStatus\000"
 1965      656E7361 
 1965      74655275 
 1965      6E6E696E 
 1965      67537461 
 1966              	.LASF8:
 1967 02c7 756E7369 		.ascii	"unsigned int\000"
 1967      676E6564 
 1967      20696E74 
 1967      00
 1968              	.LASF25:
 1969 02d4 64657369 		.ascii	"desiredDelayInCounts\000"
 1969      72656444 
 1969      656C6179 
 1969      496E436F 
 1969      756E7473 
 1970              	.LASF7:
 1971 02e9 6C6F6E67 		.ascii	"long long unsigned int\000"
 1971      206C6F6E 
 1971      6720756E 
 1971      7369676E 
 1971      65642069 
 1972              	.LASF40:
 1973 0300 43795379 		.ascii	"CySysWdtUnmaskInterrupt\000"
 1973      73576474 
 1973      556E6D61 
 1973      736B496E 
 1973      74657272 
 1974              	.LASF23:
 1975 0318 636F6D70 		.ascii	"compensatedCycles\000"
 1975      656E7361 
 1975      74656443 
 1975      79636C65 
 1975      7300
 1976              	.LASF42:
 1977 032a 43795379 		.ascii	"CySysWdtSetInterruptCallback\000"
 1977      73576474 
 1977      53657449 
 1977      6E746572 
 1977      72757074 
 1978              	.LASF39:
 1979 0347 43795379 		.ascii	"CySysWdtMaskInterrupt\000"
 1979      73576474 
 1979      4D61736B 
 1979      496E7465 
 1979      72727570 
 1980              	.LASF17:
 1981 035d 73697A65 		.ascii	"sizetype\000"
 1981      74797065 
 1981      00
 1982              	.LASF46:
 1983 0366 43795379 		.ascii	"CySysWdtIsr\000"
 1983      73576474 
 1983      49737200 
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 77


 1984              	.LASF38:
 1985 0372 43795379 		.ascii	"CySysWdtGetIgnoreBits\000"
 1985      73576474 
 1985      47657449 
 1985      676E6F72 
 1985      65426974 
 1986              	.LASF6:
 1987 0388 6C6F6E67 		.ascii	"long long int\000"
 1987      206C6F6E 
 1987      6720696E 
 1987      7400
 1988              	.LASF22:
 1989 0396 64657369 		.ascii	"desiredDelay\000"
 1989      72656444 
 1989      656C6179 
 1989      00
 1990              	.LASF11:
 1991 03a3 63686172 		.ascii	"char\000"
 1991      00
 1992              	.LASF33:
 1993 03a8 43795379 		.ascii	"CySysWdtGetMatch\000"
 1993      73576474 
 1993      4765744D 
 1993      61746368 
 1993      00
 1994              	.LASF36:
 1995 03b9 43795379 		.ascii	"CySysWdtSetIgnoreBits\000"
 1995      73576474 
 1995      53657449 
 1995      676E6F72 
 1995      65426974 
 1996              	.LASF2:
 1997 03cf 73686F72 		.ascii	"short int\000"
 1997      7420696E 
 1997      7400
 1998              	.LASF4:
 1999 03d9 6C6F6E67 		.ascii	"long int\000"
 1999      20696E74 
 1999      00
 2000              	.LASF28:
 2001 03e2 72657475 		.ascii	"returnStatus\000"
 2001      726E5374 
 2001      61747573 
 2001      00
 2002              	.LASF0:
 2003 03ef 7369676E 		.ascii	"signed char\000"
 2003      65642063 
 2003      68617200 
 2004              	.LASF45:
 2005 03fb 43795379 		.ascii	"CySysWdtGetInterruptCallback\000"
 2005      73576474 
 2005      47657449 
 2005      6E746572 
 2005      72757074 
 2006              	.LASF41:
 2007 0418 43795379 		.ascii	"CySysClkIloCompensate\000"
 2007      73436C6B 
ARM GAS  C:\Users\young\AppData\Local\Temp\ccfUNwlI.s 			page 78


 2007      496C6F43 
 2007      6F6D7065 
 2007      6E736174 
 2008              	.LASF43:
 2009 042e 66756E63 		.ascii	"function\000"
 2009      74696F6E 
 2009      00
 2010              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
